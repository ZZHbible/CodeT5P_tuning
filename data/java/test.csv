nl,code
"Use $postgres$ to get the database engine and execute the SQL ( get the date_part in the stock_data ) and get all the data, and use the for loop to store the list type with the 'year' for the first element of each item in the query result, finally, return the list content that JSONArray handles.","public Object getYears ( DataSource postgres ) { JdbcTemplate engine = new JdbcTemplate ( postgres ) ; List < Object > data = engine . query ( "" select date_part from stock_data "" , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > newdata = new ArrayList ( ) ; for ( Object x : data ) { Map d = new HashMap ( ) { { put ( "" year "" , x . toString ( ) ) ; } } ; newdata . add ( d ) ; } JSONArray json = new JSONArray ( newdata ) ; return json ; }"
Use $conn$ to execute SQL ( query all the information in the log table based on $information_schema$ ) and return all query results.,"public List showTables ( JdbcTemplate conn , String information_schema ) { List < Map > query = conn . query ( "" select * from log where information_schema = ? "" , new Object [ ] { information_schema } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }"
Use $conn$ to execute SQL ( query all columns in the dialog table ) and get all the data. Return the query results.,"public List dialogShowdb ( JdbcTemplate conn ) { List < Map > texts = conn . query ( "" select * from dialog "" , new BeanPropertyRowMapper ( List . class ) ) ; return texts ; }"
"Use the JdbcTemplate to get the connection via $db$, execute the SQL ( get the Creator_Email in event_details based on $Ref_Code$ ) , get all the data, and finally return the obtained result.","public List cancel ( DataSource db , String Ref_Code ) { JdbcTemplate connection = new JdbcTemplate ( db ) ; String sql_query = "" select Creator_Email from event_details where Ref_Code = ? "" ; List < Object > creator_email = connection . query ( sql_query , new Object [ ] { Ref_Code } , new BeanPropertyRowMapper ( List . class ) ) ; return creator_email ; }"
"Execute SQL ( get all columns in users where the name of user $username$ ) with $conn$ and get all the data. Then return rendered 'register.html', where the users parameter is the result of the query executing the SQL statement.","public String selectRegister ( Model model , JdbcTemplate conn , String username ) { String register_sql = "" select * from users where username = ? "" ; List < Object > users = conn . query ( register_sql , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" users "" , users ) ; return "" register.html "" ; }"
"Use $db$ to connect the database, execute SQL ( query the number of all columns in the query_users table based on $user_id$ ) , set the assertion to determine whether the length of all the data obtained is 0, and return the result.","public Integer queryPage ( DataSource db_connect , Integer user_id ) { JdbcTemplate connection = new JdbcTemplate ( db_connect ) ; int result = connection . queryForObject ( "" select count(*) from query_users where user_id = ? "" , new Object [ ] { user_id } , Integer . class ) ; assert result != 0 ; return result ; }"
"Connect to the database according to $engine$. Set the SQL statement and the content is as follows: ( Query all columns in the movies_mean_count table whose rating_count is greater than $rating$ ) , and execute SQL to get all the data and return the list content.","public List getMostRatedMovies ( DataSource engine , Integer rating ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; String query = "" select * from movies_mean_count where rating_count > ? "" ; List < Object > results = conn . query ( query , new Object [ ] { rating } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use $conn$ to execute SQL ( query all columns in the pooling table based on $client$ ) , get and return all the query results, and set assertions to determine whether the length of the query results is greater than 0.","public List testMainPooling ( JdbcTemplate conn , String client ) { List < Object > v = conn . query ( "" select * from pooling where client = ? "" , new Object [ ] { client } , new BeanPropertyRowMapper ( List . class ) ) ; assert v . size ( ) > 0 ; return v ; }"
Use $conn$ to execute SQL ( query all columns in the class_schedule table ) and get all the data. Return the rendered 'create.html' and pass the query results to the data parameter.,"public String create ( JdbcTemplate conn , Model model ) { List < Object > data = conn . query ( "" select * from class_schedule "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" data "" , data ) ; return "" create.html "" ; }"
"Connect to the database engine using $e$, and execute SQL ( query all date columns in the RInd ) using $conn$. Finally, the keys of the result are executed as the key in the mapionary, and the cursors of each item in the result are executed as the corresponding values. Put each item in the mapionary into a list and return it.","public List search ( DataSource e ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List < Map > query = conn . query ( "" select date from RInd "" , new BeanPropertyRowMapper ( List . class ) ) ; List rs = new ArrayList ( ) ; for ( Map record : query ) { for ( Object key : record . keySet ( ) ) { rs . add ( new HashMap ( ) { { put ( key , record . get ( key ) ) ; } } ) ; } } return rs ; }"
Use $conn$ to execute the SQL ( get the name column in the Consumables table based on $id$ ) and get all the data. Then use for loop to convert each item of the query result into mapionary type and return the contents of mapionary.,"public List getConsumables ( JdbcTemplate conn , Integer id ) { String sql = "" select name from Consumables where id = ? "" ; List < Object > rs = conn . query ( sql , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object row : rs ) { result . add ( new HashMap ( ) { { put ( "" name "" , row ) ; } } ) ; } return result ; }"
Use $engine$ to get the database connection. Use the connection to execute SQL ( query all columns in audio_features when youtube_id is $yt_id$ ) and get the first piece of data. Return the query results.,"public Object selectCluster ( DataSource engine , Integer yt_id ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; Object audio_id = con . query ( "" select * from audio_features where youtube_id = ? "" , new Object [ ] { yt_id } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; return audio_id ; }"
"Set SQL ( get all the columns in the 'table' table based on $filter$ ) , connect to the database using $engine$, execute the SQL statement to get all the data, and finally return the query result.","public List select ( JdbcTemplate engine , String filter ) { String query = "" select * from table where filter = ? "" ; List result = engine . query ( query , new Object [ ] { filter } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Use $conn$ to execute SQL ( query all columns in the flights table based on $fli_id$ ) , get all the query results, return the rendered ""flights.html"" page, and set the flights parameter to the query result.","public String flights ( JdbcTemplate conn , Integer fli_id , Model model ) { List < Object > flights = conn . query ( "" select * from flights where fli_id = ? "" , new Object [ ] { fli_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights ) ; return "" flights.html "" ; }"
"Use $conn$ to execute the SQL ( get the synopsis column in the books table based on $id$ ) , then convert the 0th element of the 0th item of the query result into list, and finally return the list contents","public List application ( JdbcTemplate conn , Integer id ) { String query = "" select synopsis from books where id = ? "" ; List < List > output = conn . query ( query , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return new ArrayList ( ) { { add ( output . get ( 0 ) . get ( 0 ) ) ; } } ; }"
"Get database engine by $db_string$, try to execute SQL statement ( get all columns in project based on $id_fornecedor$ ) and get all the data. The result will be given true, otherwise print ""Problem occur!"" and the result will be given false. Finally return the result true or false.","public Boolean querySale ( DataSource db_string , Integer id_fornecedor ) { JdbcTemplate db = new JdbcTemplate ( db_string ) ; Boolean res = Boolean . TRUE ; try { db . query ( "" select * from project where id_fornecedor = ? "" , new Object [ id_fornecedor ] , new BeanPropertyRowMapper ( List . class ) ) ; res = Boolean . TRUE ; } catch ( Exception e ) { System . out . println ( "" Problem occur! "" ) ; res = Boolean . FALSE ; } return res ; }"
"Set up SQL ( query the trained_model column in the models table based on $accuracy_score$ ) . Use $dbconn$ to execute the SQL, get the first piece of data, and return the 0th element of the query result.","public Object getBestModel ( JdbcTemplate dbconn , Float accuracy_score ) { String query_sql = "" select trained_model from models where accuracy_score = ? "" ; List < List > results = dbconn . query ( query_sql , new Object [ ] { accuracy_score } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }"
"Try using $db$ to execute the SQL ( query the title information in the books table where isbn is $isbn$ ) and get the first data, return the rendered ""book.html"" and pass the query result to the book parameter. Redirect and url_for redirect to 'error' if an exception occurs.","public String getBook ( JdbcTemplate db , String isbn , Model model ) { try { List results = db . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" title "" , results . get ( 0 ) ) ; return "" book.html "" ; } catch ( Exception e ) { return "" error "" ; } }"
Use $conn$ to execute SQL ( query the id in the current_user table based on $created_at$ ) and get the first piece of data. Set the assertion to determine that the query result is not empty list. Return the query results.,"public List currentSession ( JdbcTemplate conn , Date created_at ) { List count = conn . queryForObject ( "" select id from current_user where created_at = ? "" , new Object [ ] { created_at } , List . class ) ; assert count . size ( ) > 0 ; return count ; }"
"Use $db_uri$ to get the database engine and execute SQL ( get the data column in the example table according to $id$ ) , get all the data, and finally return the query result.","public List searchDatas ( DataSource db_uri , Integer id ) { JdbcTemplate engine = new JdbcTemplate ( db_uri ) ; List < Object > datas = engine . query ( "" select data from example where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return datas ; }"
"Try to use $engine$ to execute the SQL ( get all the information in db_satz where uid is $uid$ and pro is $pro$ ) and get all the data, return the query result, otherwise return None.","public List satzPositivBewerten ( JdbcTemplate engine , UUID uid , String pro ) { try { List rs = engine . query ( "" select * from db_satz where uid = ? and pro = ? "" , new Object [ ] { uid , pro } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; } catch ( Exception e ) { return null ; } }"
"Create a database engine based on $morphweb_db$ and execute SQL ( query the ip in the usertable based on $email$ ) , get the first piece of data, and print the 0th element of each item of the query result.","public String userIp ( DataSource morphweb_db , String email ) { JdbcTemplate session = new JdbcTemplate ( morphweb_db ) ; List < List > ret = session . query ( "" select ip from usertable where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; for ( List t : ret ) { return t . get ( 0 ) . toString ( ) ; } return null ; }"
"Use $conn$ to execute SQL ( query all columns in the users table when username equals $name$ ) and get all the data. If the query result is not empty list, return the rendered 'error.html'. Otherwise, return the rendered ""success.html"" and pass the query result to the unique parameter.","public String queryUser ( JdbcTemplate conn , String name , Model model ) { List < Object > unique = conn . query ( "" select * from users where username = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! unique . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" unique "" , unique ) ; return "" success.html "" ; } }"
"Try to use $connection$ to execute SQL ( query all the information in the query_users table based on $user_id$ and $user_name$ ) , and print the Exception if it is caught. Set the assertion to determine whether the length of all the obtained data is 0.","public void testRaise ( JdbcTemplate connection , UUID user_id , String user_name ) { List result = new ArrayList < > ( ) ; try { result = connection . query ( "" select * from query_users where user_id = ? and user_name = ? "" , new Object [ ] { user_id , user_name } , new BeanPropertyRowMapper ( List . class ) ) ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; } assert result . size ( ) == 0 ; }"
Execute the SQL statement via $conn$: ( Query all the id data in the books table based on $user_id$ and $book_id$ ) and return the query results.,"public List checkUserBookAuthorized ( JdbcTemplate conn , UUID user_id , String book_id ) { List < Object > result = conn . query ( "" select id from books where user_id = ? and book_id = ? "" , new Object [ ] { user_id , book_id } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
Execute the SQL based on $conn$ ( get the name column in the user table based on $group_id$ ) and get all the data. Use for loop to print each item of the query results.,"public void sqlStm ( JdbcTemplate conn , String group_id ) { String stm = "" select name from user where group_id = ? "" ; List < Object > rows = conn . query ( stm , new Object [ ] { group_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rows ) { System . out . println ( row . toString ( ) ) ; } }"
"Execute the SQL ( get all the columns in the report where portfolio is $portfolio$ and date is $date$ ) with $conn$, get all the data, and return the results of the query.","public List getPortfolio ( JdbcTemplate conn , String portfolio , Date date ) { String qry = "" select * from report where portfolio = ? and date = ? "" ; List < Object > df = conn . query ( qry , new Object [ ] { portfolio , date } , new BeanPropertyRowMapper ( List . class ) ) ; return df ; }"
"Use the $conn$ connection to execute the SQL statement: ( Get all the columns in the flights table based on $id$ ) and get all the data. If the query result exists, render and return ""indexair.html"", where the flights parameter is the query result.","public String index ( JdbcTemplate conn , String id , Model model ) { List res = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { model . addAttribute ( "" flights "" , res ) ; return "" indexair.html "" ; } else { return "" "" ; } }"
"Get the database engine by $url$. Try to set the SQL: Query the task_id data with task_enumber of $enumber$ in the finishedtask table. Execute SQL to get all data and return. If there is an Exception, return the exception information by logging.error ( ) method.","public List myQuery ( DataSource url , String enumber , Logger logger ) { JdbcTemplate engine = new JdbcTemplate ( url ) ; try { String stm = "" select task_id from finishedtask where task_enumber = ? "" ; List < Object > res = engine . query ( stm , new Object [ ] { enumber } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { logger . info ( e . getMessage ( ) ) ; return null ; } }"
Use $conn$ to execute SQL ( get all data in db_table based on $db_id$ ) . Return all the query results after executing the statement.,"public List readFromSqlServer ( JdbcTemplate conn , String db_id ) { return conn . query ( "" select * from db_table where db_id = ? "" , new Object [ ] { db_id } , new BeanPropertyRowMapper ( List . class ) ) ; }"
"connect the database according to $engine$. Execute the SQL ( according to the itemName column of items in the $manufacturer$ table ) , get all the query results, convert each item of the query results to map, store them as list, and return.","public List getBeers ( DataSource engine , String manufacturer ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select itemName from items where manufacturer = ? "" , new Object [ ] { manufacturer } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object row : rs ) { result . add ( new HashMap ( ) { { put ( "" name "" , row ) ; } } ) ; } return result ; }"
"Set the SQL statement ( query all columns in the flow table based on $userid$ and $sessionid$ ) , use e$conn$ to execute SQL to get all the data, use for loop traversal to query the results, and print the userid attribute value of the query results.","public void evaluateUsersWithFewSessions ( JdbcTemplate conn , String userid , String sessionid ) { String query = "" select * from flow where userid = ? and sessionid = ? "" ; List < Map > resultFlowPerUser = conn . query ( query , new Object [ ] { userid , sessionid } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Map userFlow : resultFlowPerUser ) { System . out . println ( userFlow . get ( "" userid "" ) ) ; } }"
"Use $conn$ to execute the SQL statement ( query all the columns in the members table ) to get all the data, render and return ""index.html"", where the members parameter is the execution result.","public String index ( JdbcTemplate conn , Model model ) { List members = conn . query ( "" select * from members "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" members "" , members ) ; return "" index.html "" ; }"
"Set up the SQL ( query all sequence_name in sequences where schemaval is $schemaval$ ) , execute the SQL over the $conn$ connection and get the data. Store the 0th element of each item of the query result as a list and return.","public List getSeqListFromDb ( JdbcTemplate conn , String schemaval ) { String sql = "" select sequence_name from sequences where schemaval = ? "" ; List < List > names = conn . query ( sql , new Object [ ] { schemaval } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( List name : names ) { result . add ( name . get ( 0 ) ) ; } return result ; }"
"Set the SQL statement: ( Query all the columns in the dnsreqs table with $d_id$ ) , use $ses$ to execute SQL to get all the data. For loop iterates through the execution results and print.","public void getDnsHttp ( JdbcTemplate ses , String d_id ) { String sql = "" select * from dnsreqs where d_id = ? "" ; List results = ses . query ( sql , new Object [ ] { d_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : results ) { System . out . println ( row . toString ( ) ) ; } }"
use $engine$ to get the connection and execute the following code to set the SQL: ( query the name information in Table D based on $drinkerID$ ) . Execute the SQL using the link and obtain all the data convert each item in the query result to a map type and return.,"public List getFrequents ( DataSource engine , String drinkerID ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; String sql = "" select name from D where drinkerID = ? "" ; List rs = con . query ( sql , new Object [ ] { drinkerID } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object row : rs ) { result . add ( new HashMap ( ) { { put ( "" name "" , row ) ; } } ) ; } return result ; }"
"Get the database engine and establish a connection through $DATABASEURI$. Execute the SQL statement ( query all the columns in the teams table according to $id$ ) , get all the data, take the query result as the value of the parameter rows, and return the rendered ""listteam.html"" page.","public String listTeam ( Model model , DataSource DATABASEURI , Integer id ) { JdbcTemplate conn = new JdbcTemplate ( DATABASEURI ) ; List res = conn . query ( "" select * from teams where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rows "" , res ) ; return "" listteam.html "" ; }"
"Use the $conn$ connection to execute SQL ( query the first destination data in the flights table through $fid$ ) . If the query result is empty, print 'Error: no such flight.' and return. Use for loop to traverse the query result and print it.","public void main ( JdbcTemplate conn , String fid ) { List < Object > fout = conn . query ( "" select destination from flights where fid = ? "" , new Object [ ] { fid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( fout == null ) { System . out . println ( "" Error: no such flight. "" ) ; } for ( Object f : fout ) { System . out . println ( f . toString ( ) ) ; } }"
"Use $conn$ to execute SQL ( query all columns in the flights table according to $name$ ) , get all the query results, set assertions to determine whether the query result length is not equal to 0, and return to the rendered ""index.html"" page, where the parameter flights is set to the query result.","public String index ( JdbcTemplate conn , String name , Model model ) { List flights = conn . query ( "" select * from flights where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; assert ! flights . isEmpty ( ) ; model . addAttribute ( "" flights "" , flights ) ; return "" index.html "" ; }"
"Connect to the database using $conn$, execute SQL statements ( query all number data in the availability_data where available_bikes is $available_bikes$ ) , and use the for loop to traverse the query results and print them.","public void availToDb ( JdbcTemplate conn , String available_bikes ) { List data_points = conn . query ( "" select number from availability_data where available_bikes = ? "" , new Object [ ] { available_bikes } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object data : data_points ) { System . out . println ( data . toString ( ) ) ; } }"
"Use $conn$ to execute SQL statement: ( Get all columns in table based on $key$, execute SQL and get all the data ) . Store the 0th element of each item of query results as list and return it.","public List selectKeys ( JdbcTemplate conn , String key ) { List < List > result = conn . query ( "" select * from table where key = ? "" , new Object [ ] { key } , new BeanPropertyRowMapper ( List . class ) ) ; List res = new ArrayList ( ) ; for ( List x : result ) { res . add ( x . get ( 0 ) ) ; } return res ; }"
Use $conn$ to execute the SQL ( query the table_namet table for old information based on $uc_name$ ) and get all the data. Use for loop to store the 0th element of each item in the result to list and return.,"public List getUniqueConstraint ( JdbcTemplate conn , String uc_name ) { List < List > ucname = conn . query ( "" select old from table_namet where name = ? "" , new Object [ ] { uc_name } , new BeanPropertyRowMapper ( List . class ) ) ; List namet = new ArrayList ( ) ; for ( List r : ucname ) { namet . add ( r . get ( 0 ) ) ; } return namet ; }"
"Use $conn_string$ to get the database engine and execute SQL ( get the target column in the targets table based on $url$, $email$ and $id$ ) , get the first piece of data, and finally return the query result.","public Object getTarget ( DataSource conn_string , String url , String email , String id ) { JdbcTemplate engine = new JdbcTemplate ( conn_string ) ; String sql = "" select target from targets where url = ? and email = ? and id = ? "" ; Object target = engine . query ( sql , new Object [ ] { url , email , id } , new BeanPropertyRowMapper ( List . class ) ) ; return target ; }"
"Get the database engine via $connection_string$ with the echo parameter being False, and establish a connection. Set up the SQL statement ( query all the columns in the saltie table based on $value$ ) , get all the data, close the connection, and return the query results.","public Object selectValue ( DataSource conn_string , String value ) { JdbcTemplate conn = new JdbcTemplate ( conn_string ) ; String query_sql = "" select * from saltie where value = ? "" ; Object results = conn . query ( query_sql , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use $engine$ to connect to the database , execute the SQL ( get all columns in drinkers based on $drinkerID$ ) and get all data. Finally return the query result.","public List generateDrinkerID ( DataSource engine , String drinkerID ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; String query = "" select * from drinkers where drinkerID = ? "" ; List rs = con . query ( query , new Object [ ] { drinkerID } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }"
"Execute the SQL ( get the table_name column in the information_schema where table_schema is $table_schema$ ) with $conn$ and get all the data, then use the for loop to store the list type for the tenth element of each item in the query result and return.","public List getTableListFromDb ( JdbcTemplate conn , String table_schema ) { String sql = "" select table_name from information_schema where table_schema = ? "" ; List < List > res = conn . query ( sql , new Object [ ] { table_schema } , new BeanPropertyRowMapper ( List . class ) ) ; List results_list = new ArrayList ( ) ; for ( List name : res ) { results_list . add ( name . get ( 0 ) ) ; } return results_list ; }"
"Open the books.csv file and read it, use for loop traversal to iterate over the content, and use $conn$ to execute the SQL statement: ( Query all the isbn in the books table through 'title' ) and print the query results.","public void main ( JdbcTemplate conn ) throws Exception { File file = new File ( "" books.csv "" ) ; InputStreamReader reader = new InputStreamReader ( new FileInputStream ( file ) ) ; BufferedReader bufferedReader = new BufferedReader ( reader ) ; while ( bufferedReader . readLine ( ) != null ) { String sql = "" select isbn from books where title = ? "" ; List res = conn . query ( sql , new Object [ ] { bufferedReader . readLine ( ) } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res . toString ( ) ) ; } }"
Get the database engine through $sqlite$. Execute the SQL statement ( query the first piece of name data in the hello table based on $hid$ ) . Return all the query results.,"public Object createEngine ( DataSource sqlite , Integer hid ) { JdbcTemplate engine = new JdbcTemplate ( sqlite ) ; Object hres = engine . query ( "" select name from hello where hid = ? "" , new Object [ ] { hid } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; return hres ; }"
"Create a cursor object through $conn$, set the SQL statement: ( Query the id data in the regione table where nome is $nome$ ) , execute the SQL statement to get all the data and return the 0th element of the execution result.","public Object getRegioneIdSql ( DataSource conn , String nome ) { JdbcTemplate c = new JdbcTemplate ( conn ) ; String query = "" select id from regione where nome = ? "" ; List < Object > res = c . query ( query , new Object [ ] { nome } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( query the keyfile in the clients table based on $name$ and $system_uuid$ ) and get all the data. If the query result length is not 0, return the query result.","public List < Object > downloadKey ( JdbcTemplate conn , String name , Integer system_uuid ) { List < Object > longres = conn . query ( "" select keyfile from clients where name = ? and system_uuid = ? "" , new Object [ ] { name , system_uuid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( longres . size ( ) != 0 ) { return longres ; } else { return Collections . emptyList ( ) ; } }"
"Use the $conn$ connection to execute the SQL statement ( query all the columns in the books based on $isbn$ ) and get the first piece of data. If the execution result exists, use jsonify to return the execution result.","public JSONObject bookApi ( JdbcTemplate conn , String isbn ) { Object book = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; Map < String , Object > res = new HashMap < > ( ) ; if ( book != null ) { res . put ( "" book "" , book ) ; return new JSONObject ( res ) ; } else { return new JSONObject ( ) ; } }"
"Execute SQL via $conn$: ( Get all the job_name in jobzl via $company$ ) , set the assertion to determine that the obtained result is not an empty 'list', print the obtained result and return.","public List < Object > getSelect ( JdbcTemplate conn , String company ) { List < Object > res = conn . query ( "" select job_name from jobzl where company = ? "" , new Object [ ] { company } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) > 0 ; System . out . println ( res ) ; return res ; }"
"Set the SQL statement based on $author$, ( get the year data in the books table ) , execute the SQL statement with the $conn$ connection, and convert the execution result to list. If the length of the list content is 0, render and return ""failure.html""; otherwise, render and return ""found.html"".","public Object searchResult ( JdbcTemplate conn , String author ) { String sql = "" select year from books where author = ? "" ; List < Object > results = conn . query ( sql , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . size ( ) == 0 ) { return "" failure.html "" ; } return "" found.html "" ; }"
Use $e$ to get the connection. Use the connection to execute the SQL ( query the weather_cond information in airport_weather based on $airport$ ) and get all the data. Store the 0th element of each item in the query results in the list and return.,"public List < Object > getInf ( DataSource e , String airport ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List < List > weat = conn . query ( "" select weather_cond from airport_weather where airport = ? "" , new Object [ ] { airport } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > results = new ArrayList < Object > ( ) ; for ( List item : weat ) { results . add ( item . get ( 0 ) ) ; } return results ; }"
Set SQL ( query the books table for review information where isbn is $isbn$ ) . Execute the SQL using $connection$ and get all the data. Return the rendered 'profile.html' and pass the query results to the reviews parameter.,"public Object searchBook ( JdbcTemplate connection , String isbn , Model model ) { String querys = "" select review from books where isbn = ? "" ; List < Object > reviews = connection . query ( querys , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" reviews "" , reviews ) ; return "" profile.html "" ; }"
"Execute the SQL ( get the time column in the flights where password is $password$ ) with $conn$, get all the data, and finally return the rendered ""flights.html"" with the RES parameter as the result of the query.","public Object flights ( JdbcTemplate conn , String password , Model model ) { String query = "" select time from flights where password = ? "" ; List < Object > res = conn . query ( query , new Object [ ] { password } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , res ) ; return "" flights.html "" ; }"
"Get the database connection from $testing$ , execute the SQL statement ( query all columns in the table1 ) and get all the data. Convert each item in the query result into a list and return it as a list.","public Object search ( DataSource testing ) { JdbcTemplate con = new JdbcTemplate ( testing ) ; List < List > results = con . query ( "" select * from table1 "" , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Set the SQL statement and the content is as follows: ( Query the duration data in the flights table where id is $id$ ) , use the $conn$ connection to execute SQL, get all the data, convert each item of the query result into map, store it as list, and return.","public List < Object > selectDuration ( JdbcTemplate conn , Integer id ) { String duration_sql = "" select duration from flights where id = ? "" ; List < Object > durations = conn . query ( duration_sql , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < Object > ( ) ; for ( final Object row : durations ) { result . add ( new HashMap ( ) { { put ( "" date "" , row ) ; } } ) ; } return result ; }"
"Set the SQL ( query all data in the data_hist with the string $code$ through the format ( ) function format string ) , execute the SQL statement with $conn$ to get all the data, make sure the database connection is closed and return the query results.","public List < Object > refleshProfitPeaksBotts ( JdbcTemplate conn , String code ) { String sql = "" select count(*) from data_hist where code = "" + code ; List < Object > infor = conn . query ( sql , new BeanPropertyRowMapper ( List . class ) ) ; return infor ; }"
"Execute SQL with $conn$ ( get all columns in sqlalchemy where word is $word$ ) and get all data, then set the assertion query result not to be of type list, print the query result, and return the query result.","public List < Object > testQueryWithParameter ( JdbcTemplate conn , String word ) { String query = "" select * from sqlalchemy where word = ? "" ; List < Object > result = conn . query ( query , new Object [ ] { word } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) > 0 ; System . out . println ( result ) ; return result ; }"
"Set up SQL ( query the wallet_id column in the transaction_records table according to $id$ ) , use $conn$ to execute the SQL to query the first row of data, and return empty if no data is queried; otherwise, return the queried data.","public Object getWalletByTx ( JdbcTemplate conn , Integer id ) { String find_tx_sql_str = "" select wallet_id from transaction_records where id = "" + id ; Object data_query = conn . query ( find_tx_sql_str , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; if ( data_query == null ) { return null ; } return data_query ; }"
"Use $db$ to execute SQL ( get all the columns in the books table where book_name is $name$ and isbn is $id$ ) , get all the data, and finally return the rendered ""index.html"", where the books parameter is the query result.","public Object getBooks ( JdbcTemplate conn , String name , Integer id , Model model ) { List < Object > bs = conn . query ( "" select * from books where book_name = ? and isbn = ? "" , new Object [ ] { name , id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , bs ) ; return "" index.html "" ; }"
"Execute SQL via $conn$: ( Query the first id in the user table based on $login$ ) . If the query result exists, return it.","public Object okUser ( JdbcTemplate conn , String login ) { Object my_user = conn . query ( "" select id from user where login = ? "" , new Object [ ] { login } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; if ( my_user != null ) { return my_user ; } else { return null ; } }"
"Try to use $conn$ to execute SQL ( get all the columns in the db table according to values for $val$ ) and get the first row of data, return the query result. If an exception occurs during execution, print the exception and return False.","public Object getCommendationView ( JdbcTemplate conn , Integer val ) { try { Object result = conn . query ( "" select * from db where values = ? "" , new Object [ ] { val } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; return result ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }"
"Use $conn$ to execute SQL ( get the description column in the Images table where imageID is $imageId$ ) , get all the data, and finally return the query result.","public List < Object > findDescription ( JdbcTemplate conn , Integer imageId ) { List < Object > desc = conn . query ( "" select description from Images where imageID = ? "" , new Object [ ] { imageId } , new BeanPropertyRowMapper ( List . class ) ) ; return desc ; }"
"Use $tussl_test$ to get the database engine and connect to the database, then execute SQL ( get column 'a' in the basic table with d as $time$ ) and get all the data, and finally set the assertion that the length of the query result is not 0","public void testBasicExecute ( DataSource tussl_test , Object time ) { JdbcTemplate engine = new JdbcTemplate ( tussl_test ) ; String data_sql = "" select a from basic where d = ? "" ; List < Object > results = engine . query ( data_sql , new Object [ ] { time } , new BeanPropertyRowMapper ( List . class ) ) ; assert results . size ( ) != 0 ; }"
"Use $db$ to execute SQL ( get the year column in the books table based on $isbn$, $title$ and $author$ ) . If the number of rows of the query result is 0, return the rendered ""error.html"", then obtain the first piece of data of the query result, and finally return the rendered ""results.html"", where the year parameter is the first data of the query result.","public Object searchYear ( JdbcTemplate conn , String isbn , String title , String author , Model model ) { String query = "" select year from books where isbn = ? and title = ? and author = ? "" ; List < Object > year = conn . query ( query , new Object [ ] { isbn , title , author } , new BeanPropertyRowMapper ( List . class ) ) ; if ( year . size ( ) == 0 ) { return "" error.html "" ; } model . addAttribute ( "" year "" , year ) ; return "" results.html "" ; }"
"Execute the SQL statement with $con$: ( Query the largest duration in the flights table ) , get all the data, and return the obtained data.","public List < Object > main ( JdbcTemplate con ) { List < Object > m_duration = con . query ( "" select max(duration) from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; return m_duration ; }"
"Use $dbcur$ to execute SQL ( query the number of all columns in the information_schema table based on $table_name$ ) and return False, if the 0th element of the first row of data obtained is not equal to 1; otherwise, return the 0th element of the first row of data.","public Object checkTable ( JdbcTemplate dbcur , String table_name ) { List < Object > res = dbcur . query ( "" select count(*) from information_schema where table_name = ? "" , new Object [ ] { table_name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . get ( 0 ) . toString ( ) . equals ( "" 1 "" ) ) { return res . get ( 0 ) ; } else { return false ; } }"
"Set the SQL statement: ( Query all columns in the stocks_hist table with 'date' of $date$ ) , and execute SQL to get all the data via $conn_hist$. If the obtained data is not empty, return.","public Object getSotcksHist ( JdbcTemplate conn_hist , Object date ) { String rawsql = "" select * from stocks_hist where date = ? "" ; List < Object > res = conn_hist . query ( rawsql , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res != null ) { return res ; } else { return null ; } }"
Use $conn$ to execute SQL ( query the first row of data in the osm column of the scripts table based on $functions$ ) and return the 0th element of the data.,"public Object osmaxxFunctions ( JdbcTemplate conn , Object functions ) { List < Object > res = conn . query ( "" select osm from scripts where functions = ? "" , new Object [ ] { functions } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }"
"Execute SQL statement through $conn$: ( Query statistical values of all columns in the apbd table based on $tahun$, $kode$ and $ref_kode$ ) . Get the first piece of data and return the query results.","public Object dataFound ( JdbcTemplate conn , String tahun , String kode , String ref_kode ) { Object res = conn . query ( "" select count(*) from apbd where tahun = ? and kode = ? and ref_kode = ? "" , new Object [ ] { tahun , kode , ref_kode } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; return res ; }"
"Get the database engine and establish a connection through $postgresql$. Execute the SQL statement ( query the message column in the articles table according to $title$ ) , get all the data, close the connection. If the execution result is greater than 0, return the rendered ""articles.html"" page, where the parameter articles is the query result.","public Object articles ( DataSource postgresql , String title , Model model ) { JdbcTemplate engine = new JdbcTemplate ( postgresql ) ; List < Object > result = engine . query ( "" select message from articles where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . size ( ) > 0 ) { model . addAttribute ( "" articles "" , result ) ; } return "" articles.html "" ; }"
"Set up SQL ( query all the information in the usersdata table based on $startDate$ ) , execute SQL with $conn$ and get all the query results. Use for loop to convert each query result to map, and store it in list and return.","public Object selectValue ( JdbcTemplate conn , String startDate ) { String query_sql = "" select * from usersdata where startDate = ? "" ; List < Object > data = conn . query ( query_sql , new Object [ ] { startDate } , new BeanPropertyRowMapper ( List . class ) ) ; List < Map > result = new ArrayList < > ( ) ; for ( Object row : data ) { result . add ( ( HashMap ) row ) ; } return result ; }"
"Execute the SQL ( get all the columns in the books where p1_index is $p1_index$ ) with $conn$ and get all the data, then return the rendered ""p1_index.html"" with the books parameter as the result of the query.","public Object books ( JdbcTemplate conn , Integer p1_index , Model model ) { String query = "" select * from books where p1_index = ? "" ; List < Object > res = conn . query ( query , new Object [ ] { p1_index } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , res ) ; return "" p1_index.html "" ; }"
Execute SQL through $connection$ ( get the gid column in the pg_prepared_xacts table ) and get all the data. Then print the query results. Use for loop to store the 0th element of each item of the query results as list and finally return the list.,"public Object doRecoverTwophase ( JdbcTemplate connection ) { List < List > res = connection . query ( "" select gid from pg_prepared_xacts "" , new BeanPropertyRowMapper ( List . class ) ) ; List < List > result = new ArrayList < > ( ) ; for ( List row : res ) { result . add ( ( List ) row . get ( 0 ) ) ; } return result ; }"
"Execute SQL via $conn$ connection ( query all columns in books with isbn of $isbn_code$ ) to get the first piece of data, and return 0 if the data is empty; otherwise, returm the execution result of the mapionary type.","public Object api ( JdbcTemplate connection , String isbn_code ) { Object res = connection . query ( "" select * from books isbn = ? "" , new Object [ ] { isbn_code } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; if ( res == null ) { return null ; } else { return ( HashMap ) res ; } }"
Set up an SQL statement: ( Query the LastUpdated data in the boxes table by $boxID$ ) and execute SQL to query all data via $conn$. For loop iterates through the query results and prints the 0th element of the query results.,"public void getLastUpdatedDate ( JdbcTemplate conn , String boxID ) { String sql = "" select LastUpdated from boxes where boxID = ? "" ; List < Object > result = conn . query ( sql , new Object [ ] { boxID } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( ( ( List ) row ) . get ( 0 ) ) ; } }"
"If $schema$ is empty, throw and execute an Exception, whose parameter is ""fail""; otherwise, obtain the database engine through $connection_string$. establish a connection. Use the format string matching method to set the sql statement ( query all columns in the 'pg_tables' table based on the condition that schemaname is $schema$ ) , execute the SQL statement, get all the data, and return the query results.","public List < Object > getPage ( DataSource connection_string , String schema ) { if ( "" "" . equals ( schema ) ) { throw new IllegalArgumentException ( "" fail "" ) ; } else { JdbcTemplate engine = new JdbcTemplate ( connection_string ) ; List < Object > result = engine . query ( "" select * from pg_tables where schemaname = "" + schema , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } }"
"Try to use $conn$ to execute SQL ( query sponsor in user based on $plan$ ) and get all the data and return the query results. Finally, make sure the connection is closed.","public List < Object > basicFixture ( JdbcTemplate conn , Object plan ) { List < Object > sponsor = conn . query ( "" select sponsor from user where plan = ? "" , new Object [ ] { plan } , new BeanPropertyRowMapper ( List . class ) ) ; return sponsor ; }"
"Creating a database engine using $oracle$. Start a connection, and use the connection to execute the SQL ( querying the team_name_abbr in the team based on $name$ ) and get the first data. Print element 0 in the query result.","public Object articles ( DataSource oracle , String name ) { JdbcTemplate engine = new JdbcTemplate ( oracle ) ; Object result = engine . query ( "" select team_name_abbr from team where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; return ( ( List ) result ) . get ( 0 ) ; }"
"Execute the SQL using $db$ ( get the book column in the tableh where linkValue is $link$ ) and get all the data, return the query results if the length of the query results is not 0.","public List < Object > initiateLinkSearch ( JdbcTemplate conn , Object link ) { List < Object > links = conn . query ( "" select book from tableh where linkValue = ? "" , new Object [ ] { link } , new BeanPropertyRowMapper ( List . class ) ) ; if ( links . size ( ) != 0 ) { return links ; } else { return null ; } }"
"Set SQL ( query the lastname column in the User table based on $firstname$ ) , use $conn$ to execute SQL and get all the query results. Set assertion to determine whether the query results are empty, and return the query results.","public List < Object > testBulk ( JdbcTemplate conn , String firstname ) { String sql = "" select lastname from User where firstname = ? "" ; List < Object > results = conn . query ( sql , new Object [ ] { firstname } , new BeanPropertyRowMapper ( List . class ) ) ; assert results != null ; return results ; }"
"Set the SQL statement: ( Query all the columns in the data table according to $date$ ) , use $conn$ to execute SQL to get all the data, and return the 0th element of the execution result.","public Object getCodeByDate ( JdbcTemplate conn , Object date ) { String sql_data = "" select * from data where date = ? "" ; List < Object > records = conn . query ( sql_data , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; return records . get ( 0 ) ; }"
"If use $conn$ to execute SQL ( get all the columns in users based on $username$ ) and the result of the number of rows is 0, return rendered ""message_layout.html"" and pass ""Not Registered"" into the message parameter. Otherwise return rendered ""message_layout.html"", and pass ""Succesfuly Logged In!"" into the message parameter.","public Object login ( JdbcTemplate conn , String username , Model model ) { List < Object > results = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . size ( ) == 0 ) { model . addAttribute ( "" message "" , "" Not Registered! "" ) ; } else { model . addAttribute ( "" message "" , "" Succesfuly Logged In! "" ) ; } return "" message_layout.html "" ; }"
"Set the SQL with the following content: ( Get the salary data in the jobs table based on $company$ ) , execute the SQL to get all the data via $conn$, and return all the obtained data.","public List < Object > processItem ( JdbcTemplate conn , Object company ) { String sql = "" select salary from jobs where company = ? "" ; List < Object > data = conn . query ( sql , new Object [ ] { company } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }"
"Execute the SQL ( get all the columns in the test_frame3_legacy where id is $id$ ) with $conn$, get all the data, then close the $conn$ connection, and return the query results.","public List < Object > testSqlOpenClose ( JdbcTemplate conn , Object id ) { String sql = "" select * from test_frame3_legacy where id = ? "" ; List < Object > res = conn . query ( sql , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Set up SQL ( get all columns in 'drinkers' based on $rawdata$ ) , try to execute with $conn$ and get all the data. Return the query result, and if an exception occurs during execution, return False.","public Object writeLocalDb ( JdbcTemplate conn , Object rawdata ) { try { String query = "" select * from drinkers where rawdata = ? "" ; List < Object > rs = conn . query ( query , new Object [ ] { rawdata } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; } catch ( Exception e ) { return false ; } }"
"Step 1: Use $db$ to execute SQL ( query all columns in userss based on $id$ ) and get the first piece of data. Setp 2: Use $db$ to execute SQL ( query all columns in userss ) and get all the data. Pass the query result of step 1 to the user parameter, and the query result of step 2 to the users parameter, return and render the ""profile.html"" page.","public Object profile ( JdbcTemplate conn , String id , Model model ) { Object user = conn . query ( "" select * from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; List < Object > users = conn . query ( "" select * from users "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" user "" , user ) ; model . addAttribute ( "" users "" , users ) ; return "" profile.html "" ; }"
"Get the database engine by $DB_DOMAIN$ with 'echo' parameter as False and establish a connection. Set SQL statement ( query all columns in test0 table based on $value$ ) , execute sql, get all the data, and return the query result.","public List < Object > test0Db ( DataSource DB_DOMAIN , String value ) { JdbcTemplate conn = new JdbcTemplate ( DB_DOMAIN ) ; String sql = "" select * from test0 where value = ? "" ; List < Object > results = conn . query ( sql , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Execute the SQL ( get the type column in the table where engine is $engine$ ) using $db$, get all the data, and return the query results.","public List < Object > testToSql ( JdbcTemplate db , Object engine ) { List < Object > rows = db . query ( "" select type from table where engine = ? "" , new Object [ ] { engine } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }"
"Set up SQL ( query all the information in the flights table based on $id$ ) , use $conn$ to execute SQL and get the first piece of data. If the query result is empty, return the rendered ""error.html"" page with 'message' as ""No such flight. Otherwise, return the rendered ""flight.html"", and the flight parameter is the query result.","public Object flight ( JdbcTemplate conn , Object id , Model model ) { String flight_sql = "" select * from flights where id = ? "" ; Object flight = conn . query ( flight_sql , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; if ( flight == null ) { model . addAttribute ( "" message "" , "" No such flight. "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" flight "" , flight ) ; return "" flight.html "" ; } }"
connect to the database according to $engine$. Execute the SQL statement ( query all customer_name and customer_des information in the customer table ) and return the query result.,"public List < Object > queryCaching ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < Object > results = conn . query ( "" select customer_name, customer_des from customer "" , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Try to use $conn$ to execute SQL ( get the ID and DNI columns in the users where id is $dni$ ) and get the first data, then return the query results and finally make sure the $conn$ connection is closed.","public Object users ( JdbcTemplate conn , Object dni ) { Object cur = conn . query ( "" select id, dni from users where id = ? "" , new Object [ ] { dni } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; return cur ; }"
"Execute the SQL with $conn$ ( get the id column in the name where staff_position.id is $id$ and name.id is $id $ ) and get the first data, then return the query results.","public Object whereClauseFn ( JdbcTemplate conn , Object id ) { String stmt = "" select id from name where staff_position.id = ? and name.id = ? "" ; Object res = conn . query ( stmt , new Object [ ] { id , id } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; return res ; }"
"Use $conn$ to execute SQL ( get the 'the_class' column in the context table according to $id$ ) and get the first piece of data. If the query result is true, return the query result; otherwise, return None.","public Object getClass ( JdbcTemplate conn , Object id ) { Object row = conn . query ( "" select the_class from context where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; if ( row == null ) { return null ; } else { return row ; } }"
"If the request module sends request as post, use $conn$ to create cursor object, execute SQL statement by cursor: ( Query the first piece of owner data in the houses table based on $id$ ) . Close the cursor, render and return ""house.html"", where the owner parameter is the query result; otherwise use redirect to return the 'homepage' spliced by url_for.","public Object house ( HttpRequest request , JdbcTemplate conn , Object id , Model model ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { return "" house.html "" ; } if ( request . getMethod ( ) . equals ( "" POST "" ) ) { Object rs = conn . query ( "" select owner from houses where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) . get ( 0 ) ; model . addAttribute ( "" owner "" , rs ) ; } return "" house.html "" ; }"
"Use $conn$ to execute the SQL statement ( query all the columns in the flights table based on $id$ ) , get all the data, render and return ""index.html"", where the flights parameter is the query result.","public Object index ( JdbcTemplate conn , Object id , Model model ) { Object info = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , info ) ; return "" index.html "" ; }"
Establish database engine based on $db_address$ and set echo parameter to False. Get a connection based on engine. Execute SQL ( query all columns in winlotto table based on $win_id$ ) and get query results. Close the link and return the query results.,"public List < Object > winlottoSel ( DataSource db_address , Object win_id ) { JdbcTemplate conn = new JdbcTemplate ( db_address ) ; List < Object > winlotto = conn . query ( "" select * from winlotto where win_id = ? "" , new Object [ ] { win_id } , new BeanPropertyRowMapper ( List . class ) ) ; return winlotto ; }"
Connect to the database with $db$. Execute the SQL statement ( query the inf in the users where based on $id_tu$ ) and return all query results.,"public Object testFlush ( DataSource db , Object id_tu ) { JdbcTemplate c = new JdbcTemplate ( db ) ; List < Object > flush = c . query ( "" select inf from users where id_tu = ? "" , new Object [ ] { id_tu } , new BeanPropertyRowMapper ( List . class ) ) ; return flush ; }"
