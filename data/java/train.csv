nl,code
"connect to the database with $engine$, execute the SQL ( get the version column in the POSTGRES_SCHEMA_NAME where version is $version$ ) , get the first data, and finally return the query results.","public Object testCreatesUserVersionPostgresqlTable ( DataSource engine , String version ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < Object > res = conn . query ( "" select version from POSTGRES_SCHEMA_NAME where version = ? "" , new Object [ ] { version } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }"
"Execute SQL through $conn$ ( query all columns in the pos_incidents table according to $time$ ) , get all the query results, print the length of the query results, and return the query results.","public List < Object > selectPosIncidents ( JdbcTemplate conn , String time ) { List < Object > res = conn . query ( "" select * from pos_incidents where time = ? "" , new Object [ ] { time } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res . size ( ) ) ; return res ; }"
"Connect to the database with $engine$ and execute SQL ( query all columns in cdcTweet where tweet is $tweet$ ) , use the for loop to store the second element of each item in the query result into a list. Use jsonify to handle the list content and return.","public JSONObject cdcTweet ( JdbcTemplate engine , String tweet ) { JSONObject json = null ; List < List > result = engine . query ( "" select * from cdcTweet where tweet = ? "" , new Object [ ] { tweet } , new BeanPropertyRowMapper ( List . class ) ) ; for ( final List row : result ) { json = new JSONObject ( new HashMap ( ) { { put ( "" row[2] "" , row . get ( 1 ) ) ; } } ) ; } return json ; }"
"Use $conn$ to execute SQL ( query the city information in the geojson table based on $latitude$ and $longitude$ ) . Use for loop to add the execution result to the list. Take the list data as the corresponding value of ""res"" in the mapionary and return.","public List detectCity ( JdbcTemplate conn , String latitude , String longitude ) { List < Object > res = conn . query ( "" select city from geojson where longitude = ? and latitude = ? "" , new Object [ ] { longitude , latitude } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $engine$ to connect to the database. Execute the SQL statement ( query the first piece of name data in the database based on $ident$ ) . If the query result exists, return the query result.","public List getNameDatabase ( DataSource engine , String ident ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < List > res = conn . query ( "" select name from database where ident = ? "" , new Object [ ] { ident } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . get ( 0 ) . isEmpty ( ) ) { return res . get ( 0 ) ; } else { return new ArrayList ( ) ; } }"
"Establish a connection through $engine$. Execute the SQL statement ( query all the columns in the tochka_insider table according to $trader_name$ ) , get all the data, close the connection, and return the result of the execution statement.","public List insiderNameApi ( DataSource engine , String trader_name ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List < Object > result = connection . query ( "" select * from tochka_insider where trader_name = ? "" , new Object [ ] { trader_name } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
Get the database engine via $postgresql$. Execute SQL statement ( query all columns in stock_data table based on $id$ and $date$ ) and get all the data. Use for loop to iterate through query result and store in list. Convert list to json and return.,"public Object stockData ( DataSource postgresql , String id , String date ) { JdbcTemplate engine = new JdbcTemplate ( postgresql ) ; List < Object > stock = engine . query ( "" select * from stock_data where id = ? and date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; JSONArray json = new JSONArray ( stock ) ; return json ; }"
"Execute the SQL using $db$ ( get the name column in the users where id is $id$ ) and get all the data, then print the query results, make sure the $db$ connection is closed, and finally return the rendered ""viewallusers.html"" with the data parameter as the result of the query.","public String doTransfer ( Model model , JdbcTemplate db , String id ) { List < Object > data = db . query ( "" select name from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( data . toString ( ) ) ; model . addAttribute ( "" data "" , data ) ; return "" viewallusers.html "" ; }"
Execute the SQL ( query all columns in the passengers table where passenger_name is $passenger_name$ ) using $db$ and get all the data. Print each piece of data using a for loop.,"public void main ( JdbcTemplate db , String passenger_name ) { List < Object > passengers = db . query ( "" select * from passenegers where passenger_name = ? "" , new Object [ ] { passenger_name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object p : passengers ) { System . out . println ( p . toString ( ) ) ; } }"
"Set up SQL ( query all the information in the db_name table based on $db_uri$ ) , execute SQL with $conn$ and get all query results. Close the connection, use for loop to iterate through all query results, insert each piece of data into a list, and return the list.","public List selectValue ( JdbcTemplate conn , String db_uri ) { String query_sql = "" select * from db_name where db_uri = ? "" ; List < Object > db_names = conn . query ( query_sql , new Object [ ] { db_uri } , new BeanPropertyRowMapper ( List . class ) ) ; return db_names ; }"
"Execute the SQL ( get the name column in the databases table ) through $conn$ and get all the data. If the length of the query result is 0, return False, otherwise return the query result.","public Object processInput ( JdbcTemplate conn ) { List < Object > names = conn . query ( "" select * from databases "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( names . size ( ) == 0 ) { return Boolean . FALSE ; } else { return names ; } }"
"Get the database engine via $host$ and establish the connection, where the parameter of isolation_level is set to 'AUTOCOMMIT'. Execute the SQL statement ( query all columns in the postgresql table based on $name$ ) and get all data, return the results of all queries.","public List queryPostgresql ( DataSource host , String name ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; List < Object > out1 = conn . query ( "" select * from postgresql where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return out1 ; }"
"Try to execute SQL by $conn$ ( get all columns in user_info table based on $name$ ) to get all the data and return the execution result. If an Exception occurs, returnthe query result as a string.","public Object query ( JdbcTemplate conn , String name ) { try { List < Object > res = conn . query ( "" select * from user_info where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return e . toString ( ) ; } }"
"Set sql ( query all the information in the books table according to $isbn$, $author$ and $title$ ) , use $conn$ to execute SQL and get all the query results. If the query result is not empty, return the rendered ""result.html"" page, where the books parameter is set to the query result; otherwise, return the rendered ""index.html"" page.","public String search ( Model model , JdbcTemplate conn , String isbn , String author , String title ) { String sql_q = "" select * from books where isbn = ? and author = ? and title = ? "" ; List < Object > res = conn . query ( sql_q , new Object [ ] { isbn , author , title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return "" index.html "" ; } else { model . addAttribute ( "" books "" , res ) ; return "" result.html "" ; } }"
"Use $conn$ to execute SQL ( query all columns in the reviews_query table based on $book_id$ ) and get the first piece of data. Return ""Error"" if the query result is None, otherwise, return the query result.","public Object api ( JdbcTemplate conn , String book_id ) { List < Object > review_inf = conn . query ( "" select * from reviews_query where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( review_inf . isEmpty ( ) ) { return "" Error "" ; } else { return review_inf ; } }"
"Try to use $conn$ to execute SQL ( query password in database based on $user$ ) and get the first piece of data. Close the connection and return the result. If Exception appears, print ""Failed"" directly.","public List setDatabase ( JdbcTemplate conn , String user ) { try { List < List > datapass = conn . query ( "" select password from database where user = ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; return datapass ; } catch ( Exception e ) { System . out . println ( "" Failed "" ) ; return new ArrayList ( ) ; } }"
"Use the $localhost$ to get the database engine and execute SQL ( get all the columns in the DATABASE table according to $db_name$ ) , get the first piece of data, and finally return the query result.","public Object findDatabase ( DataSource localhost , String db_name ) { JdbcTemplate connection = new JdbcTemplate ( localhost ) ; String stm = "" select * from DATABASE where db_name = ? "" ; List < Object > res = connection . query ( stm , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }"
"Get database engine by $db_url$ with echo parameter being False, set SQL statement ( query all columns in 'table' table based on $bind$ ) , execute SQL and get all the data. Return the query result.","public List selectValue ( DataSource db_url , String bind ) { JdbcTemplate engine = new JdbcTemplate ( db_url ) ; String query_sql = "" select * from table where bind = ? "" ; List < Object > data = engine . query ( query_sql , new Object [ ] { bind } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }"
"If the request module sends the request in a post method, use $con$ to execute SQL ( query all the message in the books through $author$ ) , and return all the query results.","public List index ( HttpRequest request , JdbcTemplate con , String author ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List < Object > data = con . query ( "" select message from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; } else { return new ArrayList ( ) ; } }"
"Get the database engine through $connection_string$ and establish a connection. Execute the SQL statement ( query all the columns in the pg_tables table according to $schemaname$ ) and get all the data. Return True, if the result is queried; otherwise, return False.","public Boolean checkIfTableExists ( DataSource connection_string , String schemaname ) { JdbcTemplate conn = new JdbcTemplate ( connection_string ) ; List < Object > t = conn . query ( "" select * from pg_tables where schemaname = ? "" , new Object [ ] { schemaname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( t . isEmpty ( ) ) { return Boolean . FALSE ; } else { return Boolean . TRUE ; } }"
"Try to use $conn$ to execute the SQL statement ( query all columns in the users table based on $name$ and $id$ ) to get the first piece of data and return the execution result. If an exception occurs, pass.","public List populateDb ( JdbcTemplate conn , String name , String id ) { try { List < Object > user = conn . query ( "" select * from users where name = ? and id = ? "" , new Object [ ] { name , id } , new BeanPropertyRowMapper ( List . class ) ) ; return user ; } catch ( Exception e ) { e . printStackTrace ( ) ; return new ArrayList ( ) ; } }"
connect to the database with $engine$. Execute the SQL ( query all city in bars_table where barsid is $barsid$ ) . Store the 0th element of each item in the query result as a list and return.,"public List getBarCities ( DataSource engine , String barsid ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < List > infor = conn . query ( "" select * from bars_table where barsid = ? "" , new Object [ ] { barsid } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( List city : infor ) { result . add ( city . get ( 0 ) ) ; } return result ; }"
"Execute the SQL with $conn$ ( get all the columns in the books where the id of book is $book_id$ ) and get all the data, print ""No book found"" and return ( ""No Book found"" ) if the length of the query is 0, and finally print the query results.","public String main ( JdbcTemplate conn , String book_id ) { List book = conn . queryForObject ( "" select * from books where book_id = ? "" , new Object [ ] { book_id } , List . class ) ; if ( book . size ( ) == 0 ) { System . out . println ( "" NO book found "" ) ; return "" No Book found "" ; } return null ; }"
"If the request module sends the request as post, then use $con$ to execute SQL ( query all columns in the users through $username$ ) , get all the data, and return False. If the query result does not exist, return False; otherwise, return the query result.","public Object register ( HttpRequest request , JdbcTemplate con , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List < Object > rows = con . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return Boolean . FALSE ; } else { return rows ; } } else { return null ; } }"
"Use $conn$ to execute SQL ( query all columns in the schema_migrations table based on $version$ ) , get the first row of data, and return True if the query data is not empty.","public Boolean handleSchemaMigrations ( JdbcTemplate conn , String version ) { List data_exists = conn . queryForObject ( "" select * from schema_migrations where version = ? "" , new Object [ ] { version } , List . class ) ; if ( data_exists . size ( ) > 0 ) { return Boolean . TRUE ; } else { return Boolean . FALSE ; } }"
"Try to use $conn$ to execute the SQL ( query all the emails in the address where user_id is $user_id$ ) and return the query results. If an Exception Exception occurs, the Exception information is printed.","public Object queryEmail ( JdbcTemplate conn , Integer user_id ) { try { List < Object > email = conn . query ( "" select email from address where user_id = ? "" , new Integer [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return email ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }"
"Execute the SQL statement via $conn$ ( get 'name' in the phone table based on $manufacturer$ ) and get the first piece of data. Print the obtained data and close the $conn$ connection, and finally return the obtained result.","public List main ( JdbcTemplate conn , Object manufacturer ) { List account = conn . query ( "" select name from phone where manufacturer = ? "" , new Object [ ] { manufacturer } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( account ) ; return account ; }"
"Get the connection via $engine$. Execute the SQL ( query the nome information in the dados table based on $nome_normalizado$ and $bolsa$ ) and get all the data. Return False if the query results in an empty list, otherwise return the query results.","public Object nomeSelect ( DataSource engine , Object nome_normalizado , Object bolsa ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List nomes = conn . query ( "" select nome from dados where nome_normalizado = ? and bolsa = ? "" , new Object [ ] { nome_normalizado , bolsa } , new BeanPropertyRowMapper ( List . class ) ) ; if ( nomes . size ( ) == 0 ) { return false ; } return nomes ; }"
"Execute the SQL ( get the color column in the listname where id is $id$ ) with $conn$ and get all the data, then close the $conn$ connection and return the query results if they are longer than 0.","public List deleteSingle ( JdbcTemplate conn , Integer id ) { String sql = "" select color from listname where id = ? "" ; List result = conn . query ( sql , new Integer [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . size ( ) > 0 ) { return result ; } else { return null ; } }"
"Get the database engine through $host$, execute SQL ( get all the columns in the db table according to $db_name$ ) , get all the data, and finally return the query result.","public List initSession ( DataSource host , Object db_name ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; List res = engine . query ( "" select * from db where db_name = ? "" , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Get the database engine through $connection_string$ and further get the Session object. Execute the SQL statement ( query all the columns in the Session table according to $token$ ) , get all the data, and return the query result.","public List makeSession ( DataSource connection_string , Object token ) { JdbcTemplate engine = new JdbcTemplate ( connection_string ) ; List ns = engine . query ( "" select * from Session where token = ? "" , new Object [ ] { token } , new BeanPropertyRowMapper ( List . class ) ) ; return ns ; }"
"If $user_id$ has a value, use $conn$ to execute SQL ( query the color column in the users table based on $user_id$ ) , get the first row of data, and return the rendered ""index.html"" page, where the parameter user is the query result.","public String main ( Model model , JdbcTemplate conn , Integer user_id ) { List < Object > user = conn . query ( "" select color from users where user_id = ? "" , new Integer [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" user "" , user ) ; return "" index.html "" ; }"
"connect the database according to $engine$. Execute SQL ( query all the data in the 'columns' column of the table_name table according to $language$ ) , convert each item of the query result to dict, store it as list, and return.","public List < Object > maybeInTheTable ( DataSource engine , Object language ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List < Object > data = connection . query ( "" select columns from table_name where language = ? "" , new Object [ ] { language } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > results = new ArrayList < Object > ( ) ; for ( Object row : data ) { results . add ( new HashMap ( ) { { put ( "" columns "" , row ) ; } } ) ; } return results ; }"
"Set SQL ( Format the output string using the format ( ) function, query the index in the 'name_table' with the string $others$ ) , and execute the SQL statement over the $conn$ connection. Return True if the query result exists. Otherwise, return False.","public Boolean getIndex ( JdbcTemplate conn , Object others ) { String query = "" select index from name_table where others = ? "" ; List res = conn . query ( query , new Object [ ] { others } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . size ( ) > 0 ) { return true ; } else { return false ; } }"
"Try to use $engine$ to get the database engine, set up SQL ( query the title column in the test table according to $name$ ) , execute sql, get all the data, and return the query data. If an exception occurs during execution, return False.","public List getIndex ( DataSource engine , Object name ) { try { JdbcTemplate connection = new JdbcTemplate ( engine ) ; String query = "" select title from test where name = ? "" ; List result = connection . query ( query , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return null ; } }"
"Use $localhost$ to get the database engine and execute SQL ( get all the columns in the Flie table according to $id$ ) , get the first piece of data, and finally return the rendered 'file.html', where the article parameter is the query result.","public String main ( Model model , DataSource localhost , Integer id ) { JdbcTemplate engine = new JdbcTemplate ( localhost ) ; List < Object > file = engine . query ( "" select * from Flie where id = ? "" , new Integer [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" article "" , file ) ; return "" file.html "" ; }"
"Use $connection$ to create a cursor object, and use the cursor object to execute SQL ( get 'id' in the customer table based on $name$ ) to get the first piece of data and return the obtained data.","public List querySqlite3 ( DataSource connection , Object name ) { JdbcTemplate c = new JdbcTemplate ( connection ) ; List ns = c . query ( "" select id from customer where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return ns ; }"
"Set the SQL ( query the date information in the runs where user_id is $user_id$ ) . Execute the SQL using $db$ and get the first data. Use A for loop to store the query results in a list. Finally, return rendered 'all_runs.html' and pass the query results to the runs parameter.","public String allRuns ( Model model , JdbcTemplate db , Integer user_id ) { String sql = "" select date from runs where user_id = ? "" ; List result = db . query ( sql , new Integer [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; List runs = new ArrayList ( ) ; for ( Object row : result ) { runs . add ( row ) ; } model . addAttribute ( "" runs "" , runs ) ; return "" all_runs.html "" ; }"
"Set up SQL ( query all columns in the app table based on $date$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all query results, insert each piece of data into a list, and return the list.","public List selectValue ( JdbcTemplate connection , Object date ) { String query_sql = "" select * from app where date = ? "" ; List results = connection . query ( query_sql , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; List apps = new ArrayList ( ) ; for ( Object i : results ) { apps . add ( i ) ; } return apps ; }"
"Get the database engine and establish a connection through $BASE$. Execute the SQL statement ( query all the query results of all the information in the Offre table based on $prix_offre$ ) , use for loop to insert the data one by one into a list, close the connection, and return the list.","public List getBd ( DataSource BASE , Object prix_offre ) { JdbcTemplate engine = new JdbcTemplate ( BASE ) ; List query = engine . query ( "" select * from Offre where prix_offre = ? "" , new Object [ ] { prix_offre } , new BeanPropertyRowMapper ( List . class ) ) ; List data = new ArrayList ( ) ; for ( Object i : query ) { data . add ( i ) ; } return data ; }"
"Try the following code: set the SQL ( where username is $username$, password is $password$ and por is $port$ in users query ) . Execute the SQL with $conn$ and get the first data. Print each data in the query results using the for loop. If an exception occurs, the 'failed' information is printed.","public void pymysqlConnect ( JdbcTemplate conn , Object username , Object password , Integer port ) { try { String sql = "" select * from users where username = ? and password = ? and port = ? "" ; List res = conn . query ( sql , new Object [ ] { username , password , port } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object k : res ) { System . out . println ( k ) ; } } catch ( Exception e ) { System . out . println ( "" failed "" ) ; } }"
"Experiment with executing SQL statements over a $conn$ connection ( by querying all columns in the flightsAgain where the id of flight is $flightID$ ) and get all the data, turn each query result into a dict and store it as a list and return. If a ValueError exception occurs, render and return ""error.html"".","public Object book ( Model model , JdbcTemplate conn , Integer flightID ) { try { List flight_data = conn . query ( "" select * from flightsAgain where flightID = ? "" , new Integer [ ] { flightID } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object i : flight_data ) { results . add ( i ) ; } return results ; } catch ( Exception e ) { return "" error.html "" ; } }"
"Use $host$ to get the database engine and execute SQL ( get the abstrID column in the tblGW table processed by the counting method where abstrName is $name$ ) , get all the data, and finally return the 0th element of the oth row of the query result.","public char getNum ( DataSource host , Object name ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; String sql = "" select count(abstrID) from tblGW where abstrName = ? "" ; List < String > row = engine . query ( sql , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return row . get ( 0 ) . charAt ( 0 ) ; }"
"Execute the SQL ( get the stars column in the movies where title is $title$ ) using $engine$ and get all the data, then print out the query result.","public List titleCall ( JdbcTemplate engine , Object title ) { List resultData = engine . query ( "" select stars from movies where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( resultData ) ; return resultData ; }"
Execute SQL through $conn$ ( get NAME column in sqlite_master table based on $TYPE$ ) and get all the data. Then use for loop to store each item of the query results as list and finally return the contents of the list.,"public List testSqlaSanitisesDataOnInput ( JdbcTemplate conn , Object TYPE ) { String NAME_sql = "" select NAME from sqlite_master where TYPE = ? "" ; List results = conn . query ( NAME_sql , new Object [ ] { TYPE } , new BeanPropertyRowMapper ( List . class ) ) ; List NAMES = new ArrayList ( ) ; for ( Object i : results ) { NAMES . add ( i ) ; } return NAMES ; }"
"Get the database connection from $engine$ , execute the SQL statement by the connection ( query all columns in the players when the player_id is $pid$ ) and return after getting all the data.","public List selectValue ( DataSource engine , Integer pid ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; String sql = "" select * from players where player_id = ? "" ; List results = conn . query ( sql , new Object [ ] { pid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
Use $conn$ to execute SQL ( query all columns in the metadata table based on $id$ ) and get the first piece of data. Print the query results and return.,"public Object setupClass ( JdbcTemplate conn , String id ) { List foo = conn . query ( "" select * from metadata where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( foo . get ( 0 ) ) ; return foo . get ( 0 ) ; }"
Use $conn$ to execute SQL ( get 'column' column in the 'table' table based on $type$ ) and get all the data. Then use information method to process the query results and finally return the query results.,"public List selectCols ( JdbcTemplate con , String type ) { List results = con . query ( "" select column from table where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; return results ; }"
"Get the database engine through $db_file$, set the parameter echo to True, and establish a connection. Execute the SQL statement ( query all the columns in the Directions table according to $directionID$ ) , get all the data, close the connection, take the query result as the value of the parameter steps and return in json format.","public JSONArray getDirectionsForDestination ( DataSource db_file , String directionID ) { JdbcTemplate connection = new JdbcTemplate ( db_file ) ; List steps = connection . query ( "" select * from Directions where directionID = ? "" , new Object [ ] { directionID } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( steps . toString ( ) ) ; }"
"If $type$ is not None, use $conn$ to execute SQL ( query the name in the master_table table based on $type$ ) and return the execution result. Otherwise, retutn None.","public List getTableNames ( JdbcTemplate conn , String type ) { if ( type != "" "" && type != null ) { List names = conn . query ( "" select name from master_table where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; return names ; } else { return null ; } }"
"Set up sql ( query all the information in the db_table table based on $wildcards$ ) ,execute SQL with $conn$, get all the query results, print and return the execution results.","public List mysqlSelect ( JdbcTemplate conn , String wildcards ) { List rslt = conn . query ( "" select * from db_table where wildcards = ? "" , new Object [ ] { wildcards } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( rslt ) ; return rslt ; }"
"connect the database according to $db$.Execute SQL ( query the user_id column in the users table with the condition that $user_id$ and age is less than $age$ ) , get all the query results,use for loop to print each query result and each query result converted to dict.","public void textSql ( DataSource db , String user_id , String age ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List s = conn . query ( "" select user_id from users where user_id = ? and age < ? "" , new Object [ ] { user_id , age } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object x : s ) { System . out . println ( x ) ; } }"
"If $schema_name$ is reversed, return False; otherwise use $conn$ to execute SQL ( get table_name column in all_tables table with table_name as $name$ and owner as $schema_name$ ) , get all the data and return query result.","public List selectValue ( JdbcTemplate conn , String schema_name , String name ) { if ( schema_name != "" "" && schema_name != null ) { List rs = conn . query ( "" select table_name from all_tables where table_name = ? and owner = ? "" , new Object [ ] { name , schema_name } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; } else { return null ; } }"
"Try to execute the SQL statement ( get all the columns in the pg_stat_activity table ) through $conn$,get all the data and return the query results. Print exception information when Exception appears.","public List test ( JdbcTemplate conn ) { List records = null ; try { records = conn . query ( "" select * from pg_stat_activity "" , new BeanPropertyRowMapper ( List . class ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return records ; }"
"Set the SQL statement ( Format the output string with the format ( ) function, query the otu_id in the samples where the id of input is $input_id$）,execute the SQL statement with the $conn$ connection to get all the data and use jsonify to return the retrieved data.","public JSONArray queryPage ( JdbcTemplate conn , String input_id ) { List infor = conn . query ( "" select otu_id from samples where input_id = ? "" , new Object [ ] { input_id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( infor . toString ( ) ) ; }"
Execute SQL through $conn$ ( get all columns in the books table based on $isbn$ ) and get the first piece of data. Then convert the query results into list and return the contents of the list.,"public List getBookByIsbn ( JdbcTemplate conn , String isbn ) { List book = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return book ; }"
"If the content of $database_name$ is ""sqlite"", then use $conn$ to execute SQL ( query the paper information in database based on $database_uri$ ) ,get all the data, and return the query result. Return False if $database_name$ is something else.","public List createEngine ( JdbcTemplate conn , String database_uri , String database_name ) { if ( "" sqlite "" . equals ( database_name ) ) { List papers = conn . query ( "" select paper from database_name where database_uri = ? "" , new Object [ ] { database_uri } , new BeanPropertyRowMapper ( List . class ) ) ; return papers ; } else { return null ; } }"
"Creating a database engine with $db_string$. Try to set up SQL ( query all columns in tb_user where senha is $senha$ ) ,execute SQL to get all the data and return it. If an Exception error occurs, the specific Exception information is printed and the query result is assigned to False. Finally, the query results are returned.","public List selectValue ( DataSource db_string , String senha ) { JdbcTemplate conn = new JdbcTemplate ( db_string ) ; try { List res = conn . query ( "" select * from tb_user where senha = ? "" , new Object [ ] { senha } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
Use $e$ to connect to the database and execute the SQL ( get all the columns in the ontime_data table processed by the counting method based on $Origin$ ) and get all the data. Finally return the query results.,"public List selectCount ( DataSource e , String Origin ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List result = conn . query ( "" select count(*) from ontime_data where Origin = ? "" , new Object [ ] { Origin } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
Use $conn$ to execute the SQL ( get the name column in the tb1 table based on $value$ ) and get all the data. Then set the assertion that the length of the query result is greater than 0. Finally return the 0th element of the query result.,"public List testAsyncCursorServerSide ( JdbcTemplate conn , String value ) { List names = conn . query ( "" select name from tb1 where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; assert names . size ( ) > 0 ; if ( names . isEmpty ( ) ) { return null ; } else { return names ; } }"
"Use the $conn$ connection to execute the SQL ( query all columns in the reviews table based on $isbn$ ) and get all the data. If the query result is empty, use jsonify to return ""Erro, reviews not found""; otherwise, use jsonify to return all the results of the query.","public JSONArray isbnApi ( JdbcTemplate conn , String isbn ) { List values = conn . query ( "" select * from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( values . isEmpty ( ) ) { JSONArray jsonArray = new JSONArray ( ) ; Object put = new JSONObject ( ) . put ( "" Erro "" , "" reviews not found "" ) ; jsonArray . add ( put ) ; return jsonArray ; } else { return JSONObject . parseArray ( values . toString ( ) ) ; } }"
"Execute SQL with $conn$ ( query all columns in the user table according to $name$ ) ,get all the query results, use for loop to traverse all obtained query results, print the format string, that is the id and name fields of each piece of data, and separate them with '|'.","public void selectDb ( JdbcTemplate conn , String name ) { List users = conn . query ( "" select * from user where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object user : users ) { JSONObject jsonObject = JSONObject . parseObject ( user . toString ( ) ) ; System . out . println ( jsonObject . getString ( "" id "" ) + "" | "" + jsonObject . getString ( "" name "" ) ) ; } }"
"connect the database according to $engine$. Execute SQL ( query the manufacturer column in the items table according to $name$ ) and get all the query results. If the query results are empty, return None; otherwise, convert the query results to dict and return.","public List findBeers ( JdbcTemplate engine , String name ) { List result = engine . query ( "" select manufacturer from items where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }"
"Execute SQL with $db$ ( get the name column in the contact_mode table according to $id$ ) , and use for loop to print every item f all data.","public void getModes ( JdbcTemplate conn , String id ) { List modes = conn . query ( "" select name from contact_mode where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object mode : modes ) { System . out . println ( mode ) ; } }"
"Set SQL ( query all columns in the assignments table where course_id is $classid$ and student_id is $studentid$ ) . Execute SQL with $conn$ and get all the data. Convert each item in the query results to the dic type and store the results as values for the records in the dictionary. Finally, return the serialized dictionary.","public JSONArray getRecords ( JdbcTemplate conn , String classid , String studentid ) { List data = conn . query ( "" select * from assignments where course_id = ? and student_id = ? "" , new Object [ ] { classid , studentid } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( data . toString ( ) ) ; }"
"If the request method is ""GET"",return the rendered 'index.html' page.If the request method is ""POST"",set the SQL ( query the isbn column in the booktable table based on $bookname$ ) , use $conn$ to execute the SQL and get all the query results. Return the rendered'index.html' page with the books parameter as the query result.","public String index ( HttpRequest request , JdbcTemplate conn , String bookname , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books = conn . query ( "" select isbn from booktable where bookname = ? "" , new Object [ ] { bookname } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , books ) ; return "" index.html "" ; } else { return "" index.html "" ; } }"
"Use $conn$ to execute SQL ( get all the columns in users based on $image_url$ ) , get all the data, and finally return the obtained result data.","public List insertImageUrl ( JdbcTemplate conn , String image_url ) { List result = conn . query ( "" select * from users where image_url = ? "" , new Object [ ] { image_url } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Get the database engine via $db_conn_uri_default$ and establish a connection. Execute the SQL statement ( get the first uri in the database based on $name$ ) , close the database connection, and return all the obtained data.","public List getdata ( DataSource db_conn_uri_default , String name ) { JdbcTemplate conn = new JdbcTemplate ( db_conn_uri_default ) ; List rec = conn . query ( "" select uri from database where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return rec ; }"
"Get the database engine through $call_center$, where the echo parameter is set to True, and a connection is established. Execute the SQL statement ( query all the columns in the companies table according to $name_company$ ) , get all the data, use for loop to traverse all obtained query results, insert the 0th element of each piece of data into a list, and return the 0th element of the list.","public List getCompanyIdByName ( DataSource db_conn_uri_default , String name ) { JdbcTemplate conn = new JdbcTemplate ( db_conn_uri_default ) ; List result = conn . query ( "" select * from companies where name_company = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List ids = new ArrayList ( ) ; for ( Object i : result ) { ids . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return ids ; }"
"Execute SQL with $conn$ ( get the id column in the POLYNOME_CORRECTION table according to $name$ ) , get all the data, then use fr loop to convert the 0th element of each item of the qu ery result into list, and finally return the list content.","public List getIndetify ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select id from polynome_correction where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List instruments = new ArrayList ( ) ; for ( Object ele : result ) { instruments . add ( JSONObject . parseObject ( ele . toString ( ) ) . get ( 0 ) ) ; } return instruments ; }"
"Use $conn$ to execute SQL ( query all columns in the flights table based on $id$ ) ,get all the query results, use for loop to traverse all the obtained query results, insert the 0th element of each piece of data into a list, and output the list.","public List index ( JdbcTemplate conn , String id ) { List flights = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List st = new ArrayList ( ) ; for ( Object i : flights ) { st . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } System . out . println ( st ) ; return st ; }"
"Get the database engine using $email_settings$, execute the SQL ( get the INDEX column in the akamaiCache where number is $number$ ) ,get all the data, and return the query results.","public List dropDb ( DataSource email_settings , String number ) { JdbcTemplate engine = new JdbcTemplate ( email_settings ) ; List res = engine . query ( "" select INDEX from akamaiCache where number = ? "" , new Object [ ] { number } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"If the request method of request is ""POST"" , execute the following code: Use $conn$ to get the cursor; use the cursor to execute SQL ( query all columns in the book table based on $title$ ) and get all the data; close the cursor; if the list type of the query result is not None, return the rendered 'search_results.html',and pass the query result to the books parameter.","public String resultTitle ( HttpRequest request , JdbcTemplate conn , String title , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books = conn . query ( "" select * from book where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! books . isEmpty ( ) ) { model . addAttribute ( "" books "" , books ) ; return "" search_results.html "" ; } else { return null ; } } else { return null ; } }"
"Connect to the database using $db$,execute the SQL statement ( query all columns in query_users ) ,and get all the data. Set the assertion that the length ofthe return result is not equal to 0. Close the databaseconnection and finally return all data.","public List getUser ( DataSource db ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List user_results = engine . query ( "" select * from query_users "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( user_results . isEmpty ( ) ) { return null ; } else { return user_results ; } }"
"If label is not empty, use $conn$ to execute SQL ( query all columns in the 'data_table' table based on $label$ ) , get all the query results, print them and return.","public List getPage ( JdbcTemplate conn , String label ) { List comment = conn . query ( "" select * from data_table where label = ? "" , new Object [ ] { label } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( comment ) ; return comment ; }"
"Set SQL ( query the password column in the manager table based on $username$ ) , execute SQL based on $conn$ and get all the query results. if the length of the query result is greater than 0,return the data. Otherwise print 'Username does not exists, please signup' and return '/signup'.","public Object loginC ( JdbcTemplate conn , String username ) { List passwords = conn . query ( "" select password from manager where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passwords . isEmpty ( ) ) { System . out . println ( "" Username does not exists, please sign up "" ) ; return "" /signup "" ; } else { return passwords ; } }"
"If the request method is ""POST"", use $db$ to execute SQL ( query all columns in the usuarios table based on $usuario$ and $password$ ) , get the first row of data, close the connection, and return the query results.","public Object login ( HttpRequest request , JdbcTemplate db , String usuario , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List cuenta = db . query ( "" select * from usuarios where usuario = ? and password = ? "" , new Object [ ] { usuario , password } , new BeanPropertyRowMapper ( List . class ) ) ; return cuenta . get ( 0 ) ; } else { return null ; } }"
"If the request module sends the request in a GET method,return the rendered ""login.html"". If the request module sends the request in a POST method, use $conn$ to execute SQL ( query all columns in the users table through $username$ ) andget the first piece of data. If the execution result is empty, render and return ""error.html""; otherwise, use redirect to return ""/ search"".","public Object search ( HttpRequest request , JdbcTemplate conn , String username , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( user . isEmpty ( ) ) { return "" /search "" ; } else { return "" error.html "" ; } } else { return "" login.html "" ; } }"
"Use the method of the string format to set SQL ( query all columns in the teams table when rownum is $limit$ ) . Use $conn$ to execute SQL and get all the data. Finally, return the query result.","public Object getTeams ( JdbcTemplate conn , String limit ) { List result = conn . query ( "" select * from teams where rownum < ? "" , new Object [ ] { limit } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Execute SQL ( query the email_id in the sent_backfill where the id of template is $template_id$ and the address of email is $email_address$ ) with $conn$ and get all the data. Finally, the query results are returned.","public Object queryRecord ( JdbcTemplate conn , String template_id , String email_address ) { List record = conn . query ( "" select email_id from sent_backfill where template_id = ? and email_address = ? "" , new Object [ ] { template_id , email_address } , new BeanPropertyRowMapper ( List . class ) ) ; return record ; }"
"Create a database engine based on $uri$.Execute SQL ( query all columns in 'table' table based on $date$, $market$ and $schema$ ) ,get all the data, and finally return the query results.","public Object queryRecord ( DataSource uri , String date , String market , String schema ) { JdbcTemplate conn = new JdbcTemplate ( uri ) ; List result = conn . query ( "" select * from table where date = ? and market = ? and schema = ? "" , new Object [ ] { date , market , schema } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
Execute the SQL through $conn$ ( get the isbn column in the 'books_table'table based on $title$ ) and get all the data. Use for loop to store each item of the query results as list and finally return the contents of the list.,"public List selectIsbn ( JdbcTemplate conn , String title ) { List results = conn . query ( "" select isbn from books_table where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; List isbns = new ArrayList ( ) ; for ( Object isbn : results ) { isbns . add ( isbn ) ; } return isbns ; }"
"If the request module sends a request by post,use the $conn$ connection to execute the SQL ( query the columns in users through $email$ and $psd$ and get the first piece of data. If the query result is empty,return False; otherwise return the query result.","public Object login ( HttpRequest request , JdbcTemplate conn , String email , String psd ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List result = conn . query ( "" select * from users where email = ? and psd = ? "" , new Object [ ] { email , psd } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return false ; } else { return result . get ( 0 ) ; } } else { return false ; } }"
Get the database engine and establish a connection through $TimeTable$. Execute the SQL statement ( query the first piece of data in the time column of the Comments table based on $summary$ ) and return the query results.,"public List dbConnect ( DataSource TimeTable , String summary ) { JdbcTemplate engine = new JdbcTemplate ( TimeTable ) ; List laten = engine . query ( "" select time from comments where summary = ? "" , new Object [ ] { summary } , new BeanPropertyRowMapper ( List . class ) ) ; return laten ; }"
"If the requested method is ""GET"", return ""search.html"" after rendering, otherwise execute SQL with $conn$ ( to GET all the information in the books where isbn is $isbn$ ) and GET all the data, return ""search-results.html"" after rendering,where the results parameter is the result of the query.","public String index ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { return "" search.html "" ; } else { List results = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; return "" search-results.html "" ; } }"
"Print $conn_string$, and then use $conn_string$ to get the database engine, execute SQL ( get all the columns in the flowbot_requests table based on $id$ and $name$ ) and get all the data. If the query result is not empty, return the query result.","public List getTarget ( DataSource conn_string , String id , String name ) { System . out . println ( conn_string ) ; JdbcTemplate engine = new JdbcTemplate ( conn_string ) ; List target = engine . query ( "" select * from flowbot_requests where id = ? and name = ? "" , new Object [ ] { id , name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! target . isEmpty ( ) ) { return target ; } else { return null ; } }"
Connect to the database through $engine$ and execute the SQL ( get the fullname column in the users table based on $id$ ) and get all the data.,"public void selectFullname ( DataSource engine , String id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select fullname from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; }"
"If $aid$ is None, then return None. Try to set up the SQL statement ( query all columns in the tattributes when id equals $aid$ ) .Execute the SQL statement with $conn$, get all the data and return.If an exception occurs, return None.","public Object selectValue ( JdbcTemplate conn , String aid ) { if ( aid == "" "" ) { return null ; } try { List results = conn . query ( "" select * from tattributes where id = ? "" , new Object [ ] { aid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { return null ; } }"
"Get the database engine through $host$, execute SQL ( get all the columns in the availability2 table when stationNUM is $num$ ) , get all the data, and finally print the query result.","public void getModels ( DataSource host , String num ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; List models = engine . query ( "" select * from availability2 where stationNUM = ? "" , new Object [ ] { num } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( models ) ; }"
"Use $mssql$ to create the database engine and get the connection. Set up SQL ( query all columns in the mytable table based on $PageNo$ and $PageSize$ ) and get all the data. Use the database connection to perform the SQL and get all the data. Finally, close the connection and return the query results.","public List getAbstract ( DataSource mssql , String PageNo , String PageSize ) { JdbcTemplate engine = new JdbcTemplate ( mssql ) ; List rows = engine . query ( "" select * from mytable where pageno = ? and pagesize = ? "" , new Object [ ] { PageNo , PageSize } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }"
"Use $conn$ to execute SQL ( query the average of rate in the reviews table based on $isbn$ ) and get the first piece of data. If the result of the query is None, return {""error"": ""Invalid ISBN""} information with jsonify. Otherwise, directly return the query result.","public JSONObject bookApi ( JdbcTemplate conn , String isbn ) { List results = conn . query ( "" select AVG(rate) from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = new JSONObject ( ) ; if ( results . isEmpty ( ) ) { json . put ( "" error "" , "" Invalid ISBN "" ) ; } else { json = JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) ; } return json ; }"
Use $connection$ to execute SQL ( query the item information in the item_property table based on $property$ ) and get all the data.,"public void testRowOverload ( JdbcTemplate connection , String property ) { List res_item = connection . query ( "" select item from item_property where property = ? "" , new Object [ ] { property } , new BeanPropertyRowMapper ( List . class ) ) ; assert res_item . size ( ) > 0 ; for ( Object row : res_item ) { System . out . println ( row ) ; } }"
Use $conn$ to execute SQL ( query the statecode in the cities table based on $city$ ) and get all the data.,"public JSONArray getStateCode ( JdbcTemplate conn , String city ) { List rows = conn . query ( "" select statecode from cities where city = ? "" , new Object [ ] { city } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object row : rows ) { results . add ( row ) ; } return JSONObject . parseArray ( results . toString ( ) ) ; }"
"Execute SQL through $conn$ ( get all columns in the student table with name as $x$ ) . If the number of rows of the query results is greater than 0, then get the first piece of data and return it; otherwise return None.","public Object getStudent ( JdbcTemplate conn , String x ) { List result = conn . query ( "" select * from student where name = ? "" , new Object [ ] { x } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! result . isEmpty ( ) ) { Object row = result . get ( 0 ) ; return row ; } else { return null ; } }"
Create the database engine from $postgres$ and execute the SQL ( query the year information in the stock_data where date is $date$ ) from that engine and get all the data. Return the result of a serialized query.,"public JSONArray getYears ( DataSource postgres , String date ) { JdbcTemplate engine = new JdbcTemplate ( postgres ) ; List years = engine . query ( "" select year from stock_data where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( years . toString ( ) ) ; }"
"Use $engine$ to get the connection. Execute SQL ( query all the db_uri information in the DATABASE_NAME table based on $heat$ ) . Close the connection, separate the query results with list, store the 0th element of each item and return.","public List tearDown ( DataSource engine , String heat ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List heats = conn . query ( "" select db_uri from database_name where heat = ? "" , new Object [ ] { heat } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object o : heats ) { Object o1 = JSONObject . parseObject ( o . toString ( ) ) . get ( 0 ) ; list . add ( o1 ) ; } return list ; }"
"Execute SQL ( get all columns in the FRC_ORDERS where kwargs is $kwargs$ ) with $conn$ and get all the data, and return the query results if they are true.","public List getOrders ( JdbcTemplate conn , String kwargs ) { List result_orders = conn . query ( "" select * from frc_orders where kwargs = ? "" , new Object [ ] { kwargs } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result_orders . isEmpty ( ) ) { return null ; } else { return result_orders ; } }"
"Use $conn$ to execute SQL ( query all information in the users table when id is $iduser$ ) and get all the data. Finally, use jsonify to return the query result.","public JSONArray bookGet ( JdbcTemplate conn , String iduser ) { List again_res = conn . query ( "" select * from users where id = ? "" , new Object [ ] { iduser } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( again_res . toString ( ) ) ; }"
"Get the database engine and establish a connection through $db_root_url$. Execute the SQL statement ( query all the columns in the SCHEMA table according to $sms$ ) , get all the data, close the connection, and return the query results.","public List teardownDb ( DataSource db_root_url , String sms ) { JdbcTemplate connection = new JdbcTemplate ( db_root_url ) ; List res = connection . query ( "" select * from SCHEMA where sms = ? "" , new Object [ ] { sms } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Set up SQL statement ( use format ( ) function to format the output string, query all columns in the posts table by string $classid$ ) and use $conn$ connection to execute SQL statement to get all the data. Convert each item of query results into dict and store it as list. Use jsonify to return the contents of the list.","public JSONArray getPostsByid ( JdbcTemplate conn , String classid ) { List res = conn . query ( "" select * from posts where classid = ? "" , new Object [ ] { classid } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( res . toString ( ) ) ; }"
Use $conn$ to execute SQL ( query test in test_table ) and get all of data. Convert each item in the query result to dict and return.,"public List createDb ( JdbcTemplate conn ) { List texts = conn . query ( "" select test from test_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return texts ; }"
"Try to set up SQL ( query all columns in the stockdata table based on $name$ ) , use $conn$ to execute sql, get all the data, and return the query data. If an exception occurs during execution, print ""fail"".","public List selectValue ( JdbcTemplate conn , String name ) { try { List results = conn . query ( "" select * from stockdata where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Use $db$ to execute SQL ( get the duration column in the flights table where origin is $origin$ and destination is $dest$ ) , get the first piece of data, and finally return the query result.","public List getDuration ( JdbcTemplate db , String origin , String dest ) { List dur = db . query ( "" select duration from flights where origin = ? and destination = ? "" , new Object [ ] { origin , dest } , new BeanPropertyRowMapper ( List . class ) ) ; return dur ; }"
"Try to execute the following code: Set up SQL ( query the DISH_DESCRIPTION information in the dish table when DISH_ID is $dishid$ ) ; use $conn$ to execute SQL and get the first piece of data; and finally return the query result. If an exception occurs, the 'failed' information is printed.","public List queryDish ( JdbcTemplate conn , String dishid ) { try { List description = conn . query ( "" select dish_description from dish where dish_id = ? "" , new Object [ ] { dishid } , new BeanPropertyRowMapper ( List . class ) ) ; return description ; } catch ( Exception e ) { System . out . println ( "" failed "" ) ; return null ; } }"
"Use the $conn$ connection to execute SQL ( query all columns in the Category table through $username$ ) and get all the data. If the query result is not empty, render and return 'home.html', where the categories parameter is the query result.","public String showHome ( JdbcTemplate conn , String username , Model model ) { List categories = conn . query ( "" select * from category where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( categories . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" categories "" , categories ) ; return "" home.thtml "" ; } }"
"Execute SQL with $conn$ ( query the name column in the sqlite_master table based on $type$ and $posts$ ) , get all the query results, use for loop to traverse all the obtained query results, print the 0th element of each piece of data and return the query results.","public List index ( JdbcTemplate conn , String type , String posts ) { List sql = conn . query ( "" select name from sqlite_master where type = ? and posts = ? "" , new Object [ ] { type , posts } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : sql ) { System . out . println ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return sql ; }"
"Use $engine$ to connect the database and execute SQL ( get the id column in the test_users table where firstname is $fname$ and lastname is $lname$ ) , get all the data, and finally return the query result.","public List index ( JdbcTemplate engine , String fname , String lname ) { List regs = engine . query ( "" select id from test_users where firstname = ? and lastname = ? "" , new Object [ ] { fname , lname } , new BeanPropertyRowMapper ( List . class ) ) ; return regs ; }"
"Use $conn$ to execute SQL ( query all columns in the lace_texts table based on $textsid$ ) , use for loop to traverse all obtained query results, and output them.","public void selectValue ( JdbcTemplate conn , String textsid ) { List c = conn . query ( "" select * from lace_texts where textsid = ? "" , new Object [ ] { textsid } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : c ) { System . out . println ( i ) ; } }"
"Set SQL ( query the maximum value of the orderid column in the orders table ) , use $conn$ to execute the SQL and get all the query results, and return the 0th element of the query results which is converted to list format.","public Object search ( JdbcTemplate conn ) { List db_result = conn . query ( "" select max(orderid) from orders "" , new BeanPropertyRowMapper ( List . class ) ) ; return db_result . get ( 0 ) ; }"
"Execute the SQL with $conn$ ( get the id column in the show where link is $link$ ) and get the first piece of data, then return the tenth element of the query result and list it as ""id"".","public String selecgetShowIdtRes ( JdbcTemplate conn , String link ) { List rows = conn . query ( "" select id from show where link = ? "" , new Object [ ] { link } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( rows . get ( 0 ) . toString ( ) ) . getString ( "" id "" ) ; }"
Execute the SQL ( query all columns in the professors table where id is $id$ ) using $db$ and get all the data. Use the for loop to print each item of data in the query results.,"public void selectProfessors ( JdbcTemplate db , String id ) { List professors = db . query ( "" select * from professors where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object p : professors ) { System . out . println ( p ) ; } }"
Execute the SQL ( get the origin column in the TABLE where destination is $destination$ ) with $conn$ to get all the data printed and return.,"public List selectOrigin ( JdbcTemplate conn , String destination ) { List origin_results = conn . query ( "" select origin from table where destination = ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( origin_results ) ; return origin_results ; }"
"Use $conn$ to execute the SQL ( get all columns in the happiness table based on $id$ ) and get all the data. Finally return the rendered ""index.html"", where the data parameter is the query result.","public String index ( JdbcTemplate conn , String id , Model model ) { List data = conn . query ( "" select * from happiness where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" data "" , data ) ; return "" index.thtml "" ; }"
"Use $db$ to execute SQL ( get all the columns in the users table whose username is $uname$ and password is $pwd$ ) . If the number of row of the query result is 0, return the rendered ""error.html"", the input message parameter is ""No such user., and finally return the rendered ""personal_page.html"", where the users parameter is the query result.","public String personalPage ( JdbcTemplate conn , String uname , String pwd , Model model ) { List users = conn . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { uname , pwd } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such user. "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" users "" , users ) ; return "" personal_page.thtml "" ; } }"
"Execute SQL with $conn$ ( get the consumer_id column in the allocation table where id is $id$ and provider_id is $pid$ ) and get all the data. If the query result is not true, print ""no allocation records""; otherwise, return the query result.","public List personalPage ( JdbcTemplate conn , String id , String pid ) { List cids = conn . query ( "" select consumer_id from allocation where id = ? and provider_id = ? "" , new Object [ ] { id , pid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( cids . isEmpty ( ) ) { System . out . println ( "" no allocation records "" ) ; return null ; } else { return cids ; } }"
Use $conn$ to execute the SQL statement ( query all columns in the flights table based on $id$ ) and get all the data. Use for loop iterate through all the query results and prints the 0th element of each row of the query results.,"public void seleselectFlightsctValue ( JdbcTemplate conn , String id ) { List flights = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( JSONObject . parseObject ( flight . toString ( ) ) . get ( 0 ) ) ; } }"
Use $db_uri$ to create the database engine and get the connection according to the engine. Use the connection to execute SQL ( query cande in drop_DATABASE ) and get all the data. Return the query results directly.,"public List tearDown ( DataSource db_uri ) { JdbcTemplate engine = new JdbcTemplate ( db_uri ) ; List informa = engine . query ( "" select cande from drop_DATABASE "" , new BeanPropertyRowMapper ( List . class ) ) ; return informa ; }"
"Connect the database with $testing$, execute SQL ( query all columns in the insert_foo table according to $moredata$ ) , get all the query results, close the connection, and return the query results.","public List testExplicittext ( DataSource testing , String moredata ) { JdbcTemplate conn = new JdbcTemplate ( testing ) ; List res = conn . query ( "" select * from insert_foo where moredata = ? "" , new Object [ ] { moredata } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Execute the SQL using $db$ ( query information about otu_id in samples where sample is $sample$ ) and get all the data. Use for loop to put the 0th element of each item in the query result into a list, and finally return a list that is handled with jsonify.","public JSONArray samplesIdValues ( JdbcTemplate conn , String sample ) { List values = conn . query ( "" select otu_id from samples where sample = ? "" , new Object [ ] { sample } , new BeanPropertyRowMapper ( List . class ) ) ; List sample_list = new ArrayList ( ) ; for ( Object i : values ) { sample_list . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return JSONObject . parseArray ( sample_list . toString ( ) ) ; }"
"Use $conn$ to execute SQL ( get all the columns in the iris table according to $id$ ) , get the first piece of data, and finally return the query result.","public Object getIris ( JdbcTemplate conn , String id ) { List iris_results = conn . query ( "" select * from iris where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = iris_results . get ( 0 ) ; return row ; }"
"Use $conn$ to execute SQL ( get all the columns in 'books' based on $book_isbn$ ) and get the first piece of data. If the query result is not empty, use jsonify to process'No book with that isbn exists' content and return, and finally return query result after being processed by jsonify.","public JSONObject apiRes ( JdbcTemplate conn , String book_isbn ) { List books = conn . query ( "" select * from books where book_isbn = ? "" , new Object [ ] { book_isbn } , new BeanPropertyRowMapper ( List . class ) ) ; Object book = books . get ( 0 ) ; if ( books . isEmpty ( ) ) { return JSONObject . parseObject ( "" No book with that isbn exists "" ) ; } else { return JSONObject . parseObject ( book . toString ( ) ) ; } }"
"Use $conn$ to execute SQL ( query all columns in mytable when rownum is less than $nrows$ ) and get all the data. Finally, return the query result.","public List randomSample ( JdbcTemplate conn , String nrows ) { List nrow = conn . query ( "" select * from mytable where rownum < ? "" , new Object [ ] { nrows } , new BeanPropertyRowMapper ( List . class ) ) ; return nrow ; }"
"Use $conn$ to execute SQL ( get all columns in the flights table with id as $flight_id$ ) and get the first piece of data. If the query result is None, then return None; otherwise return the rendered ""flight.html"", where the flight parameter is the query result.","public String select ( JdbcTemplate conn , String flight_id , Model model ) { List flights = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; Object flight = flights . get ( 0 ) ; if ( flights . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" flight "" , flight ) ; return "" flight.html "" ; } }"
make the connection using $engine$. Execute the SQL statement ( select the itemId column in the sells where barId is $barId$ ) to get all the data. Finally each item in the query result is converted to a dictionary type and returned as a list.,"public List selectValue ( DataSource engine , String barId ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select itemid from sells where barid = ? "" , new Object [ ] { barId } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }"
Use $conn$ connection to execute SQL ( query all columns in uploads_content table through $filename$ ) and get all the data. Use for loop iterate through query results and print them. Convert each item of query results into dict and store as list and return it.,"public List upload ( JdbcTemplate conn , String filename ) { List rows = conn . query ( "" select * from uploads_content where filename = ? "" , new Object [ ] { filename } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object e : rows ) { System . out . println ( e ) ; } return rows ; }"
"Set SQL ( get all columns in table_name based on $goods$ ) , try to execute with $conn$, get all the data and finally return true, otherwise return false.","public boolean dbuDoesTablExist ( JdbcTemplate conn , String goods ) { try { List rows = conn . query ( "" select * from table_name where goods = ? "" , new Object [ ] { goods } , new BeanPropertyRowMapper ( List . class ) ) ; return true ; } catch ( Exception e ) { return false ; } }"
"Use $conn$ to execute SQL ( query all the columns in the flights table with the condition that flights_id is $id$ ) and get all the query results, use for loop to insert each of the query results into a list and return the rendered 'flights.html' page, where the parameter flights is the list where the query results are stored.","public String queryFlights ( JdbcTemplate conn , String goods , Model model ) { List res_list = conn . query ( "" select * from table_name where goods = ? "" , new Object [ ] { goods } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , res_list ) ; return "" flights.html "" ; }"
Execute the SQL through $conn$ ( get the parent column in the relationship table based on $student$ )  * and get all the data. Then use for loop to print each item of the query results.,"public void getRelation ( JdbcTemplate conn , String student ) { List parents = conn . query ( "" select parent from relationship where student = ? "" , new Object [ ] { student } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object parent : parents ) { System . out . println ( parent ) ; } }"
"Execute SQL based on $conn$ ( query all columns of types_test_data in the $DateCol$ table based on $conn$ ) , get all the data, and set the assertion to determine whether the query result is empty.","public void testDateParsing ( JdbcTemplate conn , String DateCol ) { List ery = conn . query ( "" select from types_test_data where datecol = ? "" , new Object [ ] { DateCol } , new BeanPropertyRowMapper ( List . class ) ) ; assert ery . size ( ) > 0 ; }"
"Execute the SQL ( querying all game data in the flights where destination is $destination$ ) using the $conn$ connection, and use the for loop to traverse the query results and print.","public void flightPage ( JdbcTemplate conn , String destination ) { List texts = conn . query ( "" select game from flights where destination = ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object t : texts ) { System . out . println ( t ) ; } }"
"Try to use $conn$ to execute SQL ( query the bookpage column in the books table according to $isbn$ ) and get the first query result. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' book.html' page, where the book parameter is the queried result. If an exception is caught, return the rendered 'error.html' page.","public String book ( JdbcTemplate conn , String isbn , Model model ) { List books = conn . query ( "" select bookpage from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { Object book = books . get ( 0 ) ; model . addAttribute ( "" book "" , book ) ; return "" book.html "" ; } }"
"Use $conn$ cursor method to execute SQL ( get the name column in the USER table ) and get all the data. Close the cursor connection, then close the database connection and finally return the query results.","public void selectUser ( JdbcTemplate conn ) { List names = conn . query ( "" select name from user "" , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( names ) ; }"
"Create and return a cursor using $conn$. Execute SQL ( select all columns in the $users$ ) and get all the data. Close the cursor and database connection, and finally return the result of the query.","public List searchUsers ( JdbcTemplate conn ) { List users = conn . query ( "" select * from user "" , new BeanPropertyRowMapper ( List . class ) ) ; return users ; }"
"Use $conn$ to execute the SQL ( get all the columns in the reviews where token is $token$ ) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the rendered ""index.html"", where the review_words parameter is the list content.","public String cleanReview ( JdbcTemplate conn , String token , Model model ) { List review_words = conn . query ( "" select * from reviews where token = ? "" , new Object [ ] { token } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" review_words "" , review_words ) ; return "" index.html "" ; }"
"Set SQL ( query the username column in the users table based on $password$ ) , execute SQL based on $conn$ and get all the query results. Return the rendered ""regsuccess.html"" page with the username parameter being the query results.","public String getPass ( JdbcTemplate conn , String password , Model model ) { List usernames = conn . query ( "" select username from users where password = ? "" , new Object [ ] { password } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" username "" , usernames ) ; return "" regsuccess.html "" ; }"
"Set SQL ( query all the information in the users table based on the value of 'name': $user_name$ ) , use $conn$ to execute SQL and get all the query results. Set assertion to determine whether the length of the query results is not equal to 0, and finally return the query results.","public List testHeavyNesting ( JdbcTemplate conn , String user_name ) { List re_user = conn . query ( "" select * from users where name = ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; assert re_user . size ( ) != 0 ; return re_user ; }"
"Use $tlengine$ to get the connection. Try to use a database connection to execute SQL ( query all data in the query_users table ) and get all the query results. Return the query results. Finally, make sure that the database connection is closed.","public List testCommit ( DataSource TimeTable ) { JdbcTemplate engine = new JdbcTemplate ( TimeTable ) ; List userinf = engine . query ( "" select * from query_users "" , new BeanPropertyRowMapper ( List . class ) ) ; return userinf ; }"
"Get the database engine through $DB_CONNECT_STRING$ where a parameter max_overflow is 5, set the SQL statement ( query the topics column in the spider_jam_comment table based on $id$ ) , get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list, and return the list.","public List getTotalRequestUrls ( DataSource DB_CONNECT_STRING , String id ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List results = engine . query ( "" select topics from spider_jam_comment where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List list_request_urls = new ArrayList ( ) ; for ( Object result : results ) { list_request_urls . add ( result ) ; } return list_request_urls ; }"
Use $conn$ to execute SQL ( query all data in the id column of the bypass table based on $machinary$ and $transaction$ ) and return the query results.,"public List testCommit ( JdbcTemplate conn , String machinary , String transaction ) { List results = conn . query ( "" select id from bypass where machinary = ? and transaction = ? "" , new Object [ ] { machinary , transaction } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Execute SQL through $conn$ ( query the oppose column in the show table according to $link$ ) , and get the first row of data. If the query result is not empty, print the query result, and finally return it.","public Object getShows ( JdbcTemplate conn , String link ) { List rows = conn . query ( "" select oppose from show where link = ? "" , new Object [ ] { link } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = rows . get ( 0 ) ; if ( ! rows . isEmpty ( ) ) { System . out . println ( row ) ; } return row ; }"
"Use $engine$ to get the connection, execute the SQL connection ( querying the contents of players when player_id is $pid$ ) and get all the data. If the query result is not None, each element in the query result is converted to dict and return. Otherwise, return None.","public List getPlayerInfo ( DataSource engine , String pid ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select * from players where player_id = ? "" , new Object [ ] { pid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { return res ; } else { return null ; } }"
"Try to use $conn$ to execute SQL ( query all columns in the session table based on $deployment_id$ ) , get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection.","public List deploy ( JdbcTemplate conn , String deployment_id ) { try { List res = conn . query ( "" select * from session where deployment_id = ? "" , new Object [ ] { deployment_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Get the database engine and establish a connection through $DB_CONNECT_STRING$. Execute the SQL statement ( query all the columns in the spider_table according to $body$ ) , get all the data, use for loop to store each item of the query result in list, and return the list.","public List startRequests ( DataSource DB_CONNECT_STRING , String body ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List results = engine . query ( "" select * from spider_table where body = ? "" , new Object [ ] { body } , new BeanPropertyRowMapper ( List . class ) ) ; List res_list = new ArrayList ( ) ; for ( Object item : results ) { res_list . add ( item ) ; } return res_list ; }"
"Use $conn$ to execute SQL ( query all columns in the cars table based on $ID$ ) , get all the data, and set the assertion to determine that the query result is not empty list.","public void cars ( JdbcTemplate conn , String ID ) { List df = conn . query ( "" select * from cars where id = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; assert df . size ( ) != 0 ; }"
"If the request method is GET, return ""register.html"" after rendering directly. Otherwise, try to execute the SQL using $db$ ( querying all columns in the users table where the usernameis $uname$ and password is $pwd$ ) and get the first data. Finally, return the data. If an exception occurs, return the rendered ""error.html"".","public Object register ( HttpRequest request , JdbcTemplate db , String uname , String pwd ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { List users = db . query ( "" select * from users where username = :uname? and password = ? "" , new Object [ ] { uname , pwd } , new BeanPropertyRowMapper ( List . class ) ) ; return users . get ( 0 ) ; } catch ( Exception e ) { return "" error.html "" ; } } else { return "" register.html "" ; } }"
Use $conn$ to execute SQL ( query the tbname in the dbname table based on $colname$ ) and get all the data. Convert each item in the query result to dict and return.,"public List getDataset ( JdbcTemplate conn , String colname ) { List res = conn . query ( "" select tbname from dbname where colname = ? "" , new Object [ ] { colname } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Set SQL ( query where Creator is $creator$ in T_Treasure_EvalCustomItem ) . Execute SQL with $conn$ and get all the data. Return query result if the query result length is greater than 0. Otherwise, return False.","public Object getAllData ( JdbcTemplate conn , String creator ) { List res = conn . query ( "" select * from T_Treasure_EvalCustomItem where Creator = ? "" , new Object [ ] { creator } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { return res ; } else { return false ; } }"
"Use $pymysql_db$ to set up cursors, execute SQL ( query all columns in the reply table based on $user_id$ and $post_id$ ) , get all query results, close the database connection, and return the rendered 'reply.html' page, where the input argument is the obtained data.","public String replyFunc ( DataSource pymysql_db , String user_id , String post_id , Model model ) { JdbcTemplate cursor = new JdbcTemplate ( pymysql_db ) ; List sqlData = cursor . query ( "" select * from reply where user_id = ? and post_id = ? "" , new Object [ ] { user_id , post_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" sqlData "" , sqlData ) ; return "" reply.html "" ; }"
"Use $conn$ to execute SQL ( query all columns in the players table according to $playersid$ ) , get all the query results, and set the assertion to determine whether the length of the query result is not 0. ""","public void testOpentracing ( JdbcTemplate conn , String playersid ) { List res = conn . query ( "" select * from players where playersid = ? "" , new Object [ ] { playersid } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) != 0 ; }"
"Execute SQL with $conn$ ( query the title column in the books table based on $author$ and $year$ ) and get all the query results. If no data is obtained, print'No such title', otherwise print the query results.","public void main ( JdbcTemplate conn , String author , String year ) { List item = conn . query ( "" select title from books where author = ? and year = ? "" , new Object [ ] { author , year } , new BeanPropertyRowMapper ( List . class ) ) ; if ( item . isEmpty ( ) ) { System . out . println ( "" No such title "" ) ; } else { System . out . println ( item ) ; } }"
"Execute SQL via $conn$ ( query the strategy_name in 'strategy' based on $strategy_id$ ) get all the data, and finally return the obtained result.","public List checkPreviousStrategyName ( JdbcTemplate conn , String strategy_id ) { List res = conn . query ( "" select strategy_name from strategy where strategy_id = ? "" , new Object [ ] { strategy_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Execute SQL with $conn$ ( query the Lat column in the Incidents table according to $lab$ ) , get all the query results, convert the query results to json and return.","public JSONArray incidentMapData ( JdbcTemplate conn , String lab ) { List results = conn . query ( "" select lat from incidents where lab = ? "" , new Object [ ] { lab } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( results . toString ( ) ) ; }"
"Use $conn$ to execute SQL ( get all columns in imdb_movies based on $movietitle$ ) and get all data, finally store the result as list and return.","public List todas ( JdbcTemplate conn , String movietitle ) { List db_result = conn . query ( "" select * from imdb_movies where movietitle = ? "" , new Object [ ] { movietitle } , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }"
"Execute the SQL statement using $connection$ ( query all columns in the Images where the Id of image is $imageId$ ) , get all the data, and return.","public List selectImg ( JdbcTemplate connection , String imageId ) { List results = connection . query ( "" select * from images where imageid = ? "" , new Object [ ] { imageId } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use $conn$ to execute SQL ( query the year column in the books table based on $isbn$, $title$ and $author$ ) , get the first row of data, and return the query results.","public Object main ( JdbcTemplate conn , String isbn , String title , String author ) { List years = conn . query ( "" select * from images where imageid = ? "" , new Object [ ] { isbn , title , author } , new BeanPropertyRowMapper ( List . class ) ) ; Object year = years . get ( 0 ) ; return year ; }"
Execute SQL with $conn$ ( query the sequenceno column in the operation_step table according to $id$ ) and return the obtained first row of data.,"public Object getName ( JdbcTemplate conn , String id ) { List list = conn . query ( "" select sequenceno from operation_step where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return list . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( get all columns in 'noodles' based on $firstname$ ) , get all the data, finally return the query result.","public List testfour ( JdbcTemplate conn , String firstname ) { List result = conn . query ( "" select * from noodles where firstname = ? "" , new Object [ ] { firstname } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"If $distance$ is not empty, use $db_connection$ to execute SQL ( query all columns in the user table based on $distance$ ) , get all the query results, and return the query results.","public List createUser ( JdbcTemplate db_connection , String distance ) { if ( distance != null ) { return null ; } else { List query = db_connection . query ( "" select * from user where distance = ? "" , new Object [ ] { distance } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; } }"
Execute SQL through $conn$ ( get meta column in the user table based on $name$ ) and get all the data. Then use for loop to store each item of query results as list and finally return the 0th element of the list contents.,"public List testNullIsDecodedAsEmptyDict ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select meta from user where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object row : result ) { list . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return list ; }"
"Set the SQL statement ( query all columns in the 'tables' table whose name is $name$ ) , use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result and print it. If the length of the execution result is 0, print ""No data"".","public void showTable ( JdbcTemplate conn , String name ) { List table = conn . query ( "" select * from tables where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! table . isEmpty ( ) ) { for ( Object data : table ) { System . out . println ( data ) ; } } else { System . out . println ( "" No data "" ) ; } }"
"Execute SQL with $session$ ( query all columns in the 'table' table based on $table_name$ and $destination$ ) , get all the data, close the connection, and return the query result.","public List updateDestdb ( JdbcTemplate session , String table_name , String destination ) { List sets = session . query ( "" select * from table where table_name = ? and destination = ? "" , new Object [ ] { table_name , destination } , new BeanPropertyRowMapper ( List . class ) ) ; return sets ; }"
"Use $conn$ to execute SQL ( query all columns in the sqlite_master table based on $type$ and $name$ ) , get the first row of data, and use for loop to traverse and print the 0th element of each article in the query result.","public void printTables ( JdbcTemplate conn , String type , String name ) { List rows = conn . query ( "" select * from sqlite_master where type = ? and name = ? "" , new Object [ ] { type , name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object item : rows ) { System . out . println ( item ) ; } }"
"Set up the SQL statement（Format the output string using the format ( ) function. Query all columns in the ratings where the id of rate is $id_rate$ ) . Execute the SQL statement with the $conn$ connection to get all the data, and return all the data.","public List updatePage ( JdbcTemplate conn , String id_rate ) { List texts = conn . query ( "" select * from ratings where id_rate = ? "" , new Object [ ] { id_rate } , new BeanPropertyRowMapper ( List . class ) ) ; return texts ; }"
Execute the SQL statement with $connection$ ( query all content in the books_again where isbn is $isbn$ ) and return the query result using jsonify.,"public JSONArray isbnSelect ( JdbcTemplate connection , String isbn ) { List texts = connection . query ( "" select content from books_again where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( texts . toString ( ) ) ; }"
Create the database engine from $db_uri$ and get the connection. Execute the SQL using the join ( querying the blog information in the DATABASE table where blog_name is $blog_name$ ) and fetch all the data. Close the connection and return the query results.,"public List tearDown ( DataSource db_uri , String blog_name ) { JdbcTemplate engine = new JdbcTemplate ( db_uri ) ; List database = engine . query ( "" select blog from database where blog_name = ? "" , new Object [ ] { blog_name } , new BeanPropertyRowMapper ( List . class ) ) ; return database ; }"
"Set up SQL statement ( query all columns in the 'table' table through $r_id$ and $raw_d$ ) . Use $conn$ connection to execute SQL to get all the data. If the query result is empty, return 1; otherwise return 0.","public int getInsertEx ( JdbcTemplate conn , String r_id , String raw_id ) { List ans = conn . query ( "" select * from table where r_id = ? and raw_d = ? "" , new Object [ ] { r_id , raw_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ans . isEmpty ( ) ) { return 1 ; } else { return 0 ; } }"
"Get the index using $conn$ and execute the SQL based on the index ( query the number of ids in the CAPTURE table where lastid is $lastid$ ) , then get the first data. Finally,return the query results.","public Object count ( JdbcTemplate conn , String lastid ) { List ress = conn . query ( "" select count(id) from CAPTURE where lastid = ? "" , new Object [ ] { lastid } , new BeanPropertyRowMapper ( List . class ) ) ; Object res = ress . get ( 0 ) ; return res ; }"
Execute the SQL through $conn$ ( get all the columns in the review table based on $book_id$ ) and get all the data. Use for loop to print each item of the query results.,"public void selectValue ( JdbcTemplate conn , String book_id ) { List reviews = conn . query ( "" select * from review where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object review : reviews ) { System . out . println ( review ) ; } }"
"Set up sql ( query all the information in the stock_data table based on $adj_open$ and $end_val$ ) , use $conn$ to execute SQL and get all the query results, and return the query results that converted to json format.","public JSONArray stockData ( JdbcTemplate conn , String adj_open , String end_val ) { List data = conn . query ( "" select * from stock_data where adj_open = ? and end_val = ? "" , new Object [ ] { adj_open , end_val } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( data . toString ( ) ) ; }"
Get the database engine through $url$. Execute SQL statement ( query the first piece of SCHEMA with $SCHEMA_NAME$ in the INFORMATION table ) and return the query result.,"public List queryDatabase ( DataSource url , String SCHEMA_NAME ) { JdbcTemplate engine = new JdbcTemplate ( url ) ; List res = engine . query ( "" select schema from information where schema_name = ? "" , new Object [ ] { SCHEMA_NAME } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $conn$ to execute the SQL ( get the maximum ID column in the documents where the id of domain is $domain_id$ ) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the list content.","public List run ( JdbcTemplate conn , String domain_id ) { List ret = new ArrayList ( ) ; List list = conn . query ( "" select max(id) from documents where domain_id = ? "" , new Object [ ] { domain_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : list ) { ret . add ( JSONObject . parseObject ( i . toString ( ) ) . getString ( "" id "" ) ) ; } return ret ; }"
"Use $conn$ to execute SQL ( query all columns in the dataSST table based on $testDB$ ) , get all the query results, use for loop to traverse all the obtained query results, and print each piece of data.","public void testDB ( JdbcTemplate conn , String testDB ) { List result = conn . query ( "" select * from datasst where testdb = ? "" , new Object [ ] { testDB } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : result ) { System . out . println ( r ) ; } }"
"Set up SQL ( query all the information in the app_default_class table based on $app_eui$ ) , execute SQL with $conn$ and get all the query result. Use for loop to iterate through and print all the query result, and hang the process for 6 seconds.","public void freshCache ( JdbcTemplate conn , String app_eui ) { while ( true ) { List result = conn . query ( "" select * from app_default_class where app_eui = ? "" , new Object [ ] { app_eui } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } } }"
"Use $data$ to get the database engine and connect the database, execute SQL ( get all the columns in the Codes table where codes_name is $cname$ ) , get all the data, and finally return the query result.","public List getCodes ( DataSource data , String cname ) { JdbcTemplate connection = new JdbcTemplate ( data ) ; List codes = connection . query ( "" select * from Codes where codes_name = ? "" , new Object [ ] { cname } , new BeanPropertyRowMapper ( List . class ) ) ; return codes ; }"
Use $conn$ connection to execute SQL statement ( query all columns in test_frame_roundtrip table based on $id$ ) and get all the data. Set assertion to determine that the returned result is not empty list.,"public void testRoundtrip ( JdbcTemplate conn , String id ) { List result = conn . query ( "" select * from test_frame_roundtrip where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; }"
"Use $db$ to connect to the database, execute SQL ( get all the columns in the users based on $call$ ) , get all the data, and finally return the obtained result data.","public List testInvalidateTrans ( JdbcTemplate conn , String call ) { List kueridb = conn . query ( "" select * from users where call = ? "" , new Object [ ] { call } , new BeanPropertyRowMapper ( List . class ) ) ; return kueridb ; }"
"If the request module sends the request as GET, set the SQL statement ( format the output string with the format ( ) function. Query all the columns in the shoe table with the string $shoeid$ ) , and execute SQL statement with $conn$ connection to GET all the data, make sure the database connection is closed and return the data obtained as jsonify.","public Object register ( HttpRequest request , JdbcTemplate conn , String shoeid ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { List rows = conn . query ( "" select * from shoe where shoeid = ? "" , new Object [ ] { shoeid } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( rows . toString ( ) ) ; } else { return null ; } }"
"Use $sqlite$ to create the database engine and obtain the database connection according to the engine. Use the connection to perform SQL ( query the image information in the imagesAbout table based on $imageId$ ) and get the first piece of data. Finally, return the query result.","public List deleteid ( DataSource sqlite , String imageId ) { JdbcTemplate connection = new JdbcTemplate ( sqlite ) ; List delid = connection . query ( "" select image from imagesabout where imageid = ? "" , new Object [ ] { imageId } , new BeanPropertyRowMapper ( List . class ) ) ; return delid ; }"
"Execute the SQL ( get the date column in the StockDB where days is $days$ ) with $conn$ and get all the data, then use the for loop to store the tenth element of each item of the query result as a list and return the list content.","public List GetDates ( JdbcTemplate conn , String days ) { List ft = conn . query ( "" select date from stockdb where days = ? "" , new Object [ ] { days } , new BeanPropertyRowMapper ( List . class ) ) ; List date = new ArrayList ( ) ; for ( Object elt : ft ) { date . add ( JSONObject . parseObject ( elt . toString ( ) ) . get ( 0 ) ) ; } return date ; }"
"If the request method is POST, try to use $conn$ to execute SQL ( query the user column in the logs table based on $username$ ) , get the first piece of data, return the query data. Return False if an Exception occurs during execution.","public Object log ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { List ans = conn . query ( "" select user from logs where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return ans ; } catch ( Exception e ) { return false ; } } else { return false ; } }"
"Set up the SQL using the text method ( get the col_string in one_row_complex where cat is $cat$ ) , then execute the SQL statement using $conn$ to get all the data and return the query results.","public List testParameter ( JdbcTemplate conn , String cat ) { List result = conn . query ( "" select col_string from one_row_complex where cat = ? "" , new Object [ ] { cat } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
Get the database engine and establish a connection through $sqlite$. Execute the SQL statement ( get all the us_county data in the tblByCountyAndYear table where us_state is $state$ ) and close the database connection. Use for loop to store each element in the query result into list and return the list content.,"public List counties ( DataSource sqlite , String state ) { JdbcTemplate connection = new JdbcTemplate ( sqlite ) ; List result = connection . query ( "" select us_county from tblbycountyandyear where us_state = ? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; List counties = new ArrayList ( ) ; for ( Object row : result ) { counties . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return counties ; }"
"Use $db_uri$ to get the database engine and establish a connection. Set the SQL statement ( query all columns in the database table based on $value$ ) . Execute SQL, get all the information, make sure that the database connection is closed and return all the obtained data.","public List tearDown ( DataSource db_uri , String value ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List data = conn . query ( "" select * from database where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }"
"If $group$ does not exist, print ""group is None"". Otherwise, use $conn$ to execute SQL ( query all columns in the address table based on $group$ ) and get all the data. Convert each item in the query result to a dict type and return.","public List addressShowdb ( JdbcTemplate conn , String group ) { if ( group == null ) { System . out . println ( "" group is None "" ) ; return null ; } else { List groupres = conn . query ( "" select * from address where group = ? "" , new Object [ ] { group } , new BeanPropertyRowMapper ( List . class ) ) ; return groupres ; } }"
"Get the database engine and establish a connection through $url$. Set up a cursor and set the SQL statement ( query all columns in the full_path table according to $tbl$ ) , execute sql, get all the data, and return the query results.","public List testCsvPostgresLoad ( DataSource url , String tbl ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; List res = conn . query ( "" select * from full_path where tbl = ? "" , new Object [ ] { tbl } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $engine$ to execute SQL ( query the fake_stuff column in the fake_table table according to $dialect$ ) , get all the query results, set assertions to determine whether the length of the query results is greater than 0, and return the query results.","public List testExplodeInInitializerDisconnect ( JdbcTemplate engine , String dialect ) { List res = engine . query ( "" select fake_stuff from fake_table where dialect = ? "" , new Object [ ] { dialect } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) > 0 ; return res ; }"
"Set up the SQL ( query the updatetime column in the obj table based on $name$ ) , use $conn$ to execute the SQL and get all the query results. Use for loop to iterate through the cursor of the obtained results, convert 'keys' and 'values' of each piece of data into tuple, zip and dict, and store in a list. Finally return the list.","public List selectValue ( JdbcTemplate conn , String name ) { List results = conn . query ( "" select updatetime from obj where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use $db$ to connect the database, then set the assertion not to close the connection, execute SQL ( get the counted connections column in the DBAPI table according to $is_disconnect$ ) and get all the data, further close the connection, and finally return the query result.","public List testReconnect ( DataSource db , String summary ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List res = conn . query ( "" select time from comments where summary = ? "" , new Object [ ] { summary } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Initialize the log module, if $name$ has a value, set sql ( query the value column in the version table based on $name$ ) , use $connection$ to execute SQL and get the 0th element of the first piece of data. Output the info log that gets the result.","public void connect ( JdbcTemplate connection , String name ) { List cursor = connection . query ( "" select value from version where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; Object schema_version = cursor . get ( 0 ) ; System . out . println ( JSONObject . parseObject ( schema_version . toString ( ) ) . get ( 0 ) ) ; }"
"Create a database engine based on $host$ and use sessionmaker to create session instantiated objects. Execute SQL through the instantiated object ( query the grades information in the tbl_epstrade table based on $row$ ) and get all the data. Finally, return the query result.","public List initTest ( DataSource host , String row ) { JdbcTemplate session = new JdbcTemplate ( host ) ; List grades = session . query ( "" select grades from tbl_epstrade where row < ? "" , new Object [ ] { row } , new BeanPropertyRowMapper ( List . class ) ) ; return grades ; }"
"Use $db_engine$ to execute SQL ( query the sample column in the raw_data table based on $test$ ) , get all the query results, and use for loop to print the query results one by one.","public void createAndPopulateRawTable ( JdbcTemplate db_engine , String test ) { List query = db_engine . query ( "" select sample from raw_data where test = ? "" , new Object [ ] { test } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : query ) { System . out . println ( i ) ; } }"
"Execute SQL ( get all columns in the users where the name is $name$, email is $email$, city is $city$, and phone is $phone$ ) with $conn$ and get all the data, and print the query results.","public void getUser ( JdbcTemplate conn , String name , String email , String city , String phone ) { List exc = conn . query ( "" select * from users where name = ? and email = ? and city = ? and phone = ? "" , new Object [ ] { name , email , city , phone } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( exc ) ; }"
"Use $conn$ to execute SQL ( query all columns in the imdb_movies table based on $movietitle$ ) and get all the data, then convert the result to list type and return.","public List buscarPeli ( JdbcTemplate conn , String movietitle ) { List db_result = conn . query ( "" select * from imdb_movies where movietitle = ? "" , new Object [ ] { movietitle } , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }"
"Use $conn$ to execute SQL ( query the id column in the targets table according to $name$ ) ,get the first row of data, and return the 0th element of the query result.","public Object getPwidByName ( JdbcTemplate conn , String name ) { List slf = conn . query ( "" select id from targets where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return slf . get ( 0 ) ; }"
"Execute SQL through $session$ ( query all columns in the Users table based on $id$ ) , get all the data, close the connection, and return the query result.","public List getUser ( JdbcTemplate session , String id ) { List imp = session . query ( "" select * from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return imp ; }"
Try to execute the following statements: set the SQL ( query for all columns in the USER table where username is $root_username$ and password is $root_password$ ) ; execute the SQL using $connection$ and get the first data. Close the connection and return the result of the query. Return False if exception occurs.,"public Object testDb ( JdbcTemplate connection , String root_username , String root_password ) { try { List res = connection . query ( "" select * from USER where username = ? and password = ? "" , new Object [ ] { root_username , root_password } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }"
"Use $conn$ to execute SQL ( query all columns in the my_entities table ) and get all the data. Set the assertion to determine that the query result length is not 0. Finally, return the query results in list form.","public List testSave ( JdbcTemplate conn ) { List centities = conn . query ( "" select * from my_entities "" , new BeanPropertyRowMapper ( List . class ) ) ; assert centities . size ( ) != 0 ; return centities ; }"
Use $conn$ to execute SQL ( query the amount of data in the ratings table according to $countid$ ) and return the [0] [0] element in the first query result.,"public Object getFlowData ( JdbcTemplate conn , String countid ) { List num = conn . query ( "" select count(*) from ratings where countid = ? "" , new Object [ ] { countid } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( num . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }"
"Connect to the database with $db$, try to execute the SQL ( get all columns in users based on $user_id$ ) , get all the data, return the query result, and finally make sure the connection is closed.","public List testRawjava ( DataSource db , String user_id ) { try { JdbcTemplate conn = new JdbcTemplate ( db ) ; List res = conn . query ( "" select * from users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } finally { return null ; } }"
"Use $conn$ to execute SQL ( query all columns in the uploads_content table based on $content_id$ ) , get all the query results, and use for loop to output each query result.","public void getMetadata ( JdbcTemplate conn , String content_id ) { List rows = conn . query ( "" select * from uploads_content where content_id = ? "" , new Object [ ] { content_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object e : rows ) { System . out . println ( e ) ; } }"
"Get the database engine through $connection_str$ ( set the encoding parameter to 'utf-8' ) , execute the SQL statement ( query all columns in the db_name ) , get all the data and return.","public List searchTable ( DataSource connection_str , String summary ) { JdbcTemplate enj = new JdbcTemplate ( connection_str ) ; List db_result = enj . query ( "" select * from db_name "" , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }"
"Execute SQL with $engine$ ( get the bike_stands column in the stations1 table according to $name$ ) , get all the data, then use for loop to convert each item of the query result into a dictionary type, store it as list, and finally return list content.","public List getBikestands ( JdbcTemplate engine , String name ) { List rows = engine . query ( "" select bike_stands from stations1 where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }"
"Use $db_url$ to get the database engine and connect to the database, try to execute SQL ( get the table_name column in the information_schema where table_schema is $table_schema$ ) and get the first data, then return the query results, and throw an exception if an exception occurs during execution.","public Object setOwner ( DataSource db_url , String table_schema ) { try { JdbcTemplate conn = new JdbcTemplate ( db_url ) ; List res = conn . query ( "" select table_name from information_schema where table_schema = ? "" , new Object [ ] { table_schema } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return e ; } }"
Try to execute the following code: Set up SQL ( query all columns in the pg_database table when datname is $database$ ) ; use $conn$ to execute SQL to get the first piece of data and return the query results. Returns False if an exception occurs.,"public Object databaseExists ( JdbcTemplate conn , String database ) { try { List values = conn . query ( "" select * from pg_database where datname = ? "" , new Object [ ] { database } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; } catch ( Exception e ) { return false ; } }"
"Set up SQL ( query all information in tbl table based on $doc$ ) , use $conn$ to execute SQL and get all query results. Use for loop to iterate through all query results, insert each data into a list, and return the list.","public List selectValue ( JdbcTemplate conn , String doc ) { List results = conn . query ( "" select * from tbl where doc = ? "" , new Object [ ] { doc } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Set the SQL statement ( query the isbn data in the books table according to $average_rating$ ) , use the $conn$ connection to execute SQL and get all the data. Use for loop to store each element in the query result into list and return the list content.","public List review ( JdbcTemplate conn , String average_rating ) { List isbns = conn . query ( "" select isbn from books where average_rating = ? "" , new Object [ ] { average_rating } , new BeanPropertyRowMapper ( List . class ) ) ; return isbns ; }"
"Execute SQL with $connection$ ( query the linkValue column in the tableHtml table according to $metadata$ ) and get all records, use for loop to store the value of the linkValue field of each query result in list and return.","public List getEnteredHtmlSet ( JdbcTemplate connection , String metadata ) { List links = connection . query ( "" select linkValue from tableHtml where metadata = ? "" , new Object [ ] { metadata } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object link : links ) { list . add ( JSONObject . parseObject ( link . toString ( ) ) . getString ( "" linkValue "" ) ) ; } return list ; }"
"If the request request method is GET, the rendered ""pw_change.html"" is returned. Otherwise, set SQL ( query password information in the users table where username is $username$ ) , execute SQL with $conn$, get all the data, and return the query results.","public Object getPw ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List pw = conn . query ( "" select password from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return pw ; } else { return "" pw_change.html "" ; } }"
Use $connection$ to execute SQL ( query the test_logging in the ratings table based on $id$ ) and get all the data. Print all query results and store the 0th element of each item in the query result into list and return.,"public List testLogging ( JdbcTemplate connection , String id ) { List log = connection . query ( "" select test_logging from ratings where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( log ) ; List list = new ArrayList ( ) ; for ( Object test : log ) { list . add ( JSONObject . parseObject ( test . toString ( ) ) . get ( 0 ) ) ; } return list ; }"
"Set SQL ( get the sql_id_column column in sql_table based on $sqlschema$ ) , try to use $conn$ to execute the SQL statement, get all the data and return the query result.","public Object getItems ( JdbcTemplate conn , String sqlschema ) { try { List res = conn . query ( "" select sql_id_column from sql_table where sqlschema = ? "" , new Object [ ] { sqlschema } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }"
"Execute the SQL ( get the key column in the clothes where category is $category$ ) with $conn$, get all the data, and return the query results.","public List main ( JdbcTemplate conn , String category ) { List res = conn . query ( "" select key from clothes where category = ? "" , new Object [ ] { category } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $db_engine$ to execute SQL ( get abstract column in paperabstracts table based on format-processed $paperid$ ) , get all the data, return null if the length of the obtained result is 0, and finally return the 0th element of the query result.","public Object getAbstract ( JdbcTemplate db_engine , String paperid ) { List tuples = db_engine . query ( "" select abstract from paperabstracts where paperid = ? "" , new Object [ ] { paperid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( tuples . isEmpty ( ) ) { return null ; } else { return tuples . get ( 0 ) ; } }"
"Execute SQL using $conn$ ( to get the columns trained_model and metadata in the models where id is $model_id$ ) and get the first data, and finally return the 0th element of the query results.","public Object getId ( JdbcTemplate conn , String model_id ) { List result = conn . query ( "" select trained_model, metadata from models where id = ? "" , new Object [ ] { model_id } , new BeanPropertyRowMapper ( List . class ) ) ; return result . get ( 0 ) ; }"
"If $noofdays$ exists, set SQL ( query all columns in eod_data when nse_date is $noofdays$ ) . Execute SQL with $conn$ to get all the data and return the query results.","public Object getEoddata ( JdbcTemplate conn , String noofdays ) { if ( noofdays != null ) { List data = conn . query ( "" select * from eod_data where nse_date = ? "" , new Object [ ] { noofdays } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; } else { return null ; } }"
Use $conn$ to execute the SQL statement ( get all the usersname in the users table according to $email$ ) and return all the query results.,"public List getdata ( JdbcTemplate conn , String email ) { List res = conn . query ( "" select usersname from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
Try to set SQL ( query all the information in the Neighbors table where the value of DistrictAId is $districtA$ )  use $conn$ to execute sql and get all the data and return the query data.,"public Object importNeighbor ( JdbcTemplate conn , String districtA ) { try { List res = conn . query ( "" select * from Neighbors where DistrictAId = ? "" , new Object [ ] { districtA } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }"
"Set up the SQL statement ( Format the output string with the format ( ) function; Query all columns in finance by $con$. ) , querying all the columns in the finance with the $conn$. ""","public void migrateFinance ( JdbcTemplate conn , String con ) { List texts = conn . query ( "" select * from finance where con = ? "" , new Object [ ] { con } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( texts ) ; }"
"Try to use $host$ to get the database engine and establish a connection, execute SQL ( get all the columns of AffiliationID in the ReferenceData table that have been processed by the counting method based on $token$ ) , get all the data, close the connection and return the obtained data, otherwise close the connection and hang.","public Object updateAffiliationIdfValue ( DataSource host , String token ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; try { List result = conn . query ( "" select count(AffiliationID) from ReferenceData where token = ? "" , new Object [ ] { token } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return e ; } }"
"Set up SQL ( query all columns in the atable table based on $value$ ) , execute SQL based on $conn$ and get all the query results. Return the data.","public List selectValue ( JdbcTemplate conn , String value ) { List results = conn . query ( "" select * from atable where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Set SQL ( query load_extension in Table where $hamming_load$ is load_extension ) . Execute the SQL using $db$ and get the first data. Finally, return the query results.","public List begin ( JdbcTemplate db , String hamming_load ) { List txn = db . query ( "" select load_extension from table where hamming_load = ? "" , new Object [ ] { hamming_load } , new BeanPropertyRowMapper ( List . class ) ) ; return txn ; }"
"Use $conn$ to execute SQL ( query all columns in the operation table based on $operationcode$ ) , get all the query results, and use for loop to traverse and output all the obtained query results.","public void operationFunction ( JdbcTemplate conn , String operationcode ) { List operationRes = conn . query ( "" select * from operation where operationcode = ? "" , new Object [ ] { operationcode } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : operationRes ) { System . out . println ( row ) ; } }"
"Use $conn$ to connect to the database and create a cursor object through the cursor ( ) method. Execute the SQL statement ( use the format ( ) function to output string in a format way and query all the columns in the 'table' table with the string $table_name$ ) , get all the data, ensure that $conn$ is closed and return the query results.","public List clear ( JdbcTemplate conn , String table_name ) { List result = conn . query ( "" select * from table where table_name = ? "" , new Object [ ] { table_name } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"If $password$ is empty, return the rendered ""register.html"" page; otherwise, use $conn$ to execute SQL ( query all columns in the request table based on $email$ and $password$ ) , get all the data, and return the redirect operation ""/"".","public String register ( JdbcTemplate conn , String email , String password , Model model ) { if ( password == null ) { List data = conn . query ( "" select * from request where email = ? and password = ? "" , new Object [ ] { email , password } , new BeanPropertyRowMapper ( List . class ) ) ; return "" / "" ; } else { return "" register.html "" ; } }"
"Get the database engine using $oracle$, then execute the SQL using the start method ( get the number column in the team where name is $name$ ) and get all the data and return the query results.","public List getTeam ( DataSource oracle , String name ) { JdbcTemplate engine = new JdbcTemplate ( oracle ) ; List res = engine . query ( "" select number from team where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Execute the SQL statement ( query all columns in the measurement when the DATE is less than the value in $DATE$ ) with $conn$ and get all the data, and return all the query results by jsonify.","public JSONArray tobs ( JdbcTemplate conn , String DATE ) { List tobs_totals = conn . query ( "" select * from measurement where date < ? "" , new Object [ ] { DATE } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( tobs_totals . toString ( ) ) ; }"
"Initialize the log module and try to connect the database according to $engine$. Execute SQL ( query the bugid column in the bugs table according to $metaData$ ) , get all the query results and return, and output the debug log if an Exception is caught.","public List fetchAllIssues ( DataSource engine , String metaData ) { try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List rows = conn . query ( "" select bugid from bugs where metaData = ? "" , new Object [ ] { metaData } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Execute SQL based on $conn$ ( get the flight column in the flights table based on $id$ ) and get all the data. If the length of the query result is 0, then return the rendered ""error.html"", and finally return the rendered ""flights.html"" directly, where the flights parameter is the query result.","public String flights ( JdbcTemplate conn , String id , Model model ) { List flights = conn . query ( "" select flight from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" flights "" , flights ) ; return "" flights.html "" ; } }"
"Use $conn$ to execute SQL ( query the rating in the ratings table based on $isbn$ ) and get all the data. If the length of the obtained result is 1, return the rendered ""searhConfirm.html"", where the num_results parameter is the length of the query result.","public String reviewPage ( JdbcTemplate conn , String isbn , Model model ) { List value = conn . query ( "" select rating from ratings where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( value . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" num_results "" , value . size ( ) ) ; return "" searhConfirm.html "" ; } }"
"Try to use $conn$ to execute SQL ( query all columns in the flight_gan table when id is $gan_id$ ) . Return and render ""success.html"" if the number of rows fetched by execution is not zero. If an exception occurs, return and render ""error.html"", pass in the message parameter as ""Invalid flight number..","public String bookPage ( JdbcTemplate conn , String gan_id , Model model ) { List myExecute = conn . query ( "" select * from flight_gan where id = ? "" , new Object [ ] { gan_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( myExecute . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" Invalid flight number. "" ) ; return "" error.html "" ; } else { return "" flights.html "" ; } }"
"Set SQL ( query all the information in the treview table based on book_id $isbn$ ) , use $conn$ to execute SQL and get all the query results. If the length of the query data is 0, return the rendered 'error.html' page. Otherwise, return the rendered ""books.html"" page and the 'reviews parameter is the query result.","public String searchBook ( JdbcTemplate conn , String isbn , Model model ) { List results = conn . query ( "" select * from treview where book_id = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" reviews "" , results ) ; return "" books.html "" ; } }"
"If $Cid$ has a value of 0, set SQL ( query all columns of Commands ) , otherwise set SQL ( query all columns of Commands where cid is $Cid$ ) . Execute the SQL statement with $conn$, get all the data and return.","public List selectCommand ( JdbcTemplate conn , Integer Cid ) { String sql_Command = null ; if ( Cid == 0 ) { sql_Command = "" select * from commands "" ; } else { sql_Command = "" select * from commands where cid = ? "" ; } List result = conn . query ( sql_Command , new Object [ ] { Cid } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Get the database engine through $mysql_url$, where the echo parameter is set to False, further get the Session object and establish a connection. Execute the SQL statement ( query all the columns in the t1 table according to $id$ ) , get all the data, and print the query results.","public void execute ( DataSource mysql_url , String id ) { JdbcTemplate ss = new JdbcTemplate ( mysql_url ) ; List result = ss . query ( "" select time from comments where summary = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; }"
"create a connection based on $engine$, execute SQL ( query the username in the users table based on $email$ ) and get all the data. Store 0th element of each item of the query result in list. Return False if the length of list is not 0. Otherwise, return True.","public boolean getUser ( DataSource engine , String email ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List username = conn . query ( "" select username from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; List l = new ArrayList ( ) ; for ( Object i : username ) { l . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } if ( l . isEmpty ( ) ) { return false ; } else { return true ; } }"
"Use $conn$ to execute SQL ( get the pointer column of pointer_table based on $ptr$ ) and get all the data. If the number of rows of the query result is not zero, return the query result.","public List updatePointer ( JdbcTemplate conn , String ptr ) { List res = conn . query ( "" select pointer from pointer_table where ptr = ? "" , new Object [ ] { ptr } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }"
"If $password$ is not empty, use $db$ to execute SQL ( query all columns in the users table based on $password$ ) and get the first row of data. If the query result is empty, return the rendered ""error.html"" page; otherwise, return the rendered ""search.html"" page, where the parameter user is the query result.","public String selectRes ( JdbcTemplate conn , String flight_id , Model model ) { List values = conn . query ( "" select * from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( values . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such flights "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" passengers "" , values ) ; return "" fligh.thtml "" ; } }"
"Execute SQL through $conn$ ( get the date column in the data_hist table based on $code$ ) and get all the data. Then get the length of the query results. If the length is greater than 0, then return the query results.","public List identifyDataHistPriceWave ( JdbcTemplate conn , String code ) { List rs = conn . query ( "" select date from data_hist where code = ? "" , new Object [ ] { code } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rs . isEmpty ( ) ) { return null ; } else { return rs ; } }"
"Set up SQL ( query all the information in the recommendations table based on $date$ ) , use $conn$ to execute SQL. Use for loop to iterate through to get the cursor of execution result, and convert 'keys' and 'value' of each piece of data into tuple, zip and dict. Then store in a list and return the list.","public List selectValue ( JdbcTemplate conn , String date ) { List results = conn . query ( "" select * from recommendations where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Create the database engine through $postgresql$ and get the connection. Use the connection to execute the SQL ( query all the columns in the articles based on $id$ ) and get the first piece of data. Return the rendered ""article.html"" and pass the query result to the article parameter.","public String article ( DataSource postgresql , String id , Model model ) { JdbcTemplate engine = new JdbcTemplate ( postgresql ) ; List article = engine . query ( "" select * from articles where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" article "" , article . get ( 0 ) ) ; return "" article.html "" ; }"
"Use $db$ to execute SQL ( get the column_name column in the 'Table' table when column_type is $c_type$ ) , get the first piece of data, print the query result, and finally return the query result.","public List selectValue ( JdbcTemplate db , String c_type ) { List coltype = db . query ( "" select column_name from Table where column_type = ? "" , new Object [ ] { c_type } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( coltype ) ; return coltype ; }"
"Set up the SQL ( query the nspname in the pg_namespace table based on $nspname$ ) , execute the SQL with $conn$ and get all the query results. Store each item of the query results as 'list' and return.","public List getSchemaNames ( JdbcTemplate conn , String nspname ) { List schema_names = conn . query ( "" select nspname from pg_namespace where nspname = ? "" , new Object [ ] { nspname } , new BeanPropertyRowMapper ( List . class ) ) ; return schema_names ; }"
"Use $conn$ to execute SQL ( query the email column in the customers table according to $name$ ) , get all the query results, and convert the data to list. If the result of the query is queried, return True; otherwise, return False.","public boolean isUser ( JdbcTemplate conn , String name ) { List res = conn . query ( "" select email from customers where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { return true ; } else { return false ; } }"
"Execute the SQL statement using the $db$ connection ( query all autoload in the 'table_name' where the metadata is $metadata$ ) , iterate through the query results through the for loop and print.","public void displayTable ( JdbcTemplate db , String metadata ) { List rs = db . query ( "" select autoload from table_name where metadata = ? "" , new Object [ ] { metadata } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rs ) { System . out . println ( row ) ; } }"
"If the request module sends the request as GET, render and return ""buy.html"". Otherwise, use $conn$ connection to execute SQL statement ( get the cash in the users table based on $uid$ ) and get the first records. If there is no query result, return None, otherwise use redirect to return the query results.","public Object buy ( HttpRequest request , JdbcTemplate conn , String uid ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select cash from users where uid = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return null ; } else { return rows . get ( 0 ) ; } } else { return "" buy.html "" ; } }"
"If the request method is ""GET"", use $conn$ to execute SQL ( query the rating column in the reviews table based on $book_id$ ) and get all the query results. If the execution statement result is empty, return ""fail""; otherwise, return the query result.","public Object bookpage ( HttpRequest request , JdbcTemplate conn , String book_id ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { List review_obj = conn . query ( "" select rating from reviews where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( review_obj . isEmpty ( ) ) { return "" fail "" ; } else { return review_obj ; } } else { return null ; } }"
"If the requested method is ""POST"", execute SQL ( get the username column in the users where the book_id is $book$ ) with $conn$ and get all the data, then return the rendered ""book.html"" where the reviews parameter is the result of the query, otherwise ""/book/"" and $book$ handled by redirect are returned.","public Object book ( HttpRequest request , JdbcTemplate conn , String book , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List reviews = conn . query ( "" select username from users where book_id = ? "" , new Object [ ] { book } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" reviews "" , reviews ) ; return reviews ; } else { return "" /book/ "" + book ; } }"
"Try to execute the following code: Get the database engine and make the connection via $config_uri$. Execute SQL ( query all columns in the database_name ) and get all the data. Close the database connection and return the result of the query. If an Exception Exception occurs, the specific Exception information is printed and False is returned.","public Object searchRecord ( DataSource config_uri ) { try { JdbcTemplate engine = new JdbcTemplate ( config_uri ) ; List records = engine . query ( "" select * from database_name "" , new BeanPropertyRowMapper ( List . class ) ) ; return records ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }"
"Execute the SQL with $conn$ ( get the rank column in the testtable where ider is $ider$ ) and get all the data, convert the query results to the dictionary type, set the assertion dictionary length to 2, and return the query results.","public List testKeys ( JdbcTemplate conn , String ider ) { List keys = conn . query ( "" select rank from testtable where ider = ? "" , new Object [ ] { ider } , new BeanPropertyRowMapper ( List . class ) ) ; assert keys . size ( ) == 2 ; return keys ; }"
Use $conn$ to get the cursor. Execute SQL with cursors ( get the acres information in the tablename table based on $perc$ and $series$ ) and get all the data. Use for loop to store the 0th element of each item of the query result in list.,"public List getAcresField ( JdbcTemplate conn , String perc , String series ) { List acres = conn . query ( "" select acres from tablename where perc = ? and series = ? "" , new Object [ ] { perc , series } , new BeanPropertyRowMapper ( List . class ) ) ; List acres_rec = new ArrayList ( ) ; for ( Object i : acres ) { acres_rec . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return acres_rec ; }"
"Get the database engine via $CKAN_DATASTORE_WRITE_URL$ and establish a connection. Set up SQL ( query all columns in USER table based on $PASSWORD$ ) and get all the data. Close the connection, use for loop to convert each query result into dict, store as list, and finally return the list.","public List selectUser ( DataSource CKAN_DATASTORE_WRITE_URL , String PASSWORD ) { JdbcTemplate engine = new JdbcTemplate ( CKAN_DATASTORE_WRITE_URL ) ; List users = engine . query ( "" select * from user where PASSWORD = ? "" , new Object [ ] { PASSWORD } , new BeanPropertyRowMapper ( List . class ) ) ; return users ; }"
"Set up SQL ( query the temperatura information in the sensor table based on $humedad$ and $clima$ ) , and use $conn$ to execute SQL. Store all query results obtained after execution into the DataFrame of pandas and set the column name as the keys of the query results. Finally, return DataFrame.","public List getDataFrame ( JdbcTemplate conn , String humedad , String clima ) { List result = conn . query ( "" select temperatura from sensor where humedad = ? and clima = ? "" , new Object [ ] { humedad , clima } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Use $conn$ to execute SQL ( get all the columns in the TABLE1 table according to $label$ ) , get all the data, and finally return the query result.","public List getData ( JdbcTemplate conn , String label ) { List datas = conn . query ( "" select * from TABLE1 where label = ? "" , new Object [ ] { label } , new BeanPropertyRowMapper ( List . class ) ) ; return datas ; }"
"Use $conn$ to execute SQL ( query all columns in the base_table based on $table_id$ ) , get the first row of data, close the connection, and return the query results.","public List queryPage ( JdbcTemplate conn , String table_id ) { List query_table = conn . query ( "" select * from base_table where table_id = ? "" , new Object [ ] { table_id } , new BeanPropertyRowMapper ( List . class ) ) ; return query_table ; }"
"Set up the SQL statement ( format the output string with the format ( ) function, query all columns in the INVESTORS table with the string $stock$ ) . Use the $conn$ connection to execute the SQL and get all the data. Store the query result as list and return it.","public List CompareDB ( JdbcTemplate conn , String stock ) { List info = conn . query ( "" select * from investors where stock = ? "" , new Object [ ] { stock } , new BeanPropertyRowMapper ( List . class ) ) ; return info ; }"
"Return False directly if insert_key is None. Otherwise, use $conn$ to execute SQL ( query the insert_val in the table table based on $insert_key$ ) and get all the data. Finally, return the query results.","public Object queryRow ( JdbcTemplate conn , String insert_key ) { if ( insert_key == null ) { return false ; } else { List values = conn . query ( "" select insert_val from table where insert_key = ? "" , new Object [ ] { insert_key } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; } }"
"If the request module sends the request as a POST, then the SQL is executed using the $conn$ connection ( query the first favorite_stock in the login_info where the name of user is $user_name$ ) . Use $base$ to process the query results with the % operator. Return the processed result using redirect.","public Object addfav ( HttpRequest request , JdbcTemplate conn , String user_name , Integer base ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List texts = conn . query ( "" select favorite_stock from login_info where user_name = ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; int uri = base % Integer . parseInt ( texts . get ( 0 ) . toString ( ) ) ; return uri ; } else { return null ; } }"
execute the SQL through the cursor method of $connection$ ( get all the columns in the milks table based on $location$ ) and get all the data. Close the connection and finally return the query results.,"public List testConnectMethod ( JdbcTemplate connection , String location ) { List results = connection . query ( "" select * from milks where location = ? "" , new Object [ ] { location } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use $engine$ to execute SQL ( get all the columns in the RowProxy table according to $id$ ) , get all the data, and finally return the query result.","public List searchRowproxy ( JdbcTemplate engine , String id ) { List d = engine . query ( "" select * from RowProxy where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return d ; }"
Use $conn$ to execute the SQL ( get the origin column in the flights table ) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.,"public List main ( JdbcTemplate conn ) { List flights = conn . query ( "" select origin from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; List origins = new ArrayList ( ) ; for ( Object row : flights ) { origins . add ( row ) ; } return origins ; }"
"Try to use $conn$ to execute SQL ( query the number of all columns in the product table based on $uuid$ ) , get the first piece of data, and return the query results. If an exception occurs during execution, throw the exception directly, and finally ensure that the database is closed.","public List persistBundle ( JdbcTemplate conn , String uuid ) { try { List res = conn . query ( "" select count(*) from product where uuid = ? "" , new Object [ ] { uuid } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
Use $db$ to connect to the database and execute the SQL ( get the name column in the users table based on $id$ ) and get all the data. Finally return the query results.,"public List testAutoflush2 ( DataSource db , String id ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List names = engine . query ( "" select name from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return names ; }"
"Set SQL ( query the users table sur_name column based on $uuid$ ) , execute SQL based on $conn$ and get all the query results. Return the rendered ""dashboard.html"" page with results parameter being query result.","public String dashboard ( JdbcTemplate conn , String uuid , Model model ) { List results = conn . query ( "" select sur_name from users where uuid = ? "" , new Object [ ] { uuid } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; return "" dashboard.html "" ; }"
"Use $DATABASEURI$ to get the data engine, where the convert_unicode parameter is True. Connect to the database and execute SQL ( get the mname column in teams based on 'tname' is $tname$ ) and get all the data. Finally return the query result.","public List searchTeam ( DataSource DATABASEURI , String tname ) { JdbcTemplate conn = new JdbcTemplate ( DATABASEURI ) ; List res = conn . query ( "" select mname from teams where tname = ? "" , new Object [ ] { tname } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $engine$ to connect to the database, execute SQL ( get all the columns in the tickets based on $metadata$ ) and get all the data, and finally return the query result.","public List getConnectTickets ( DataSource engine , String metadata ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List res = connection . query ( "" select * from tickets where metadata = ? "" , new Object [ ] { metadata } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"If the request method of request is ""POST"", use $conn$ to execute SQL ( query all columns in the bookreviews table based on $username$ and $isbn$ ) , get the first piece of data, and finally return the query result.","public Object bookQuery ( HttpRequest request , JdbcTemplate conn , String username , String isbn ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List items = conn . query ( "" select * from bookreviews where username = ? and isbn = ? "" , new Object [ ] { username , isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return items . get ( 0 ) ; } else { return null ; } }"
"Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement ( query the curso column in the trab table according to $id$ ) , get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list and return. If an Exception is caught, print the exception and return False.","public Object listarMaterias ( DataSource db_string , String id ) { try { JdbcTemplate db = new JdbcTemplate ( db_string ) ; List result = db . query ( "" select curso from trab where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List res = new ArrayList ( ) ; for ( Object part : result ) { res . add ( part ) ; } return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }"
"Get the database engine and establish a connection through $host$. Execute the SQL statement ( query all the columns in the database table based on $customers$ and $mock$ ) , get all the data, and return the query results.","public List sqlImport ( DataSource host , String customers , String mock ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; List query = conn . query ( "" select * from database where customers = ? and mock = ? "" , new Object [ ] { customers , mock } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }"
"Use $conn$ to execute SQL ( query all columns in the users table based on $username$ and $password$ ) and get all the data. If the query result exists, return the rendered ""success.html"" page.","public String register ( JdbcTemplate conn , String username , String password ) { List users = conn . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return null ; } else { return "" success.html "" ; } }"
Use the $conn$ connection to execute the SQL statement ( query all the tobs data in measurement based on $date$ ) . Use for loop iterate through the query results and print the 0th element of each item. Use jsonify to return the query results.,"public JSONArray tobs ( JdbcTemplate conn , String date ) { List temps = conn . query ( "" select tobs from measurement where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : temps ) { System . out . println ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return JSONObject . parseArray ( temps . toString ( ) ) ; }"
"Execute SQL ( get all the columns in the test_index_label ) with $conn$,get all the data, set assertion to determine that the query result is not 0, and return the query result.","public List searchLabel ( JdbcTemplate conn ) { List labels = conn . query ( "" select * from test_index_label "" , new BeanPropertyRowMapper ( List . class ) ) ; assert labels . size ( ) != 0 ; return labels ; }"
"Set SQL ( query the number of id in the titanic table whose age is less than $num$ ) , use $conn$ to execute SQL to get all the data, print the query results and return.","public List unitTest ( JdbcTemplate conn , String num ) { List results = conn . query ( "" select count(id) from titanic where age < ? "" , new Object [ ] { num } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; return results ; }"
"If the request module sends the request in a post method, use $con$ to execute SQL ( query all the year in the books through $author$ ) and return all the query results.","public List books ( HttpRequest request , JdbcTemplate con , String author ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List years = con . query ( "" select year from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; return years ; } else { return null ; } }"
"Use $conn$ to execute SQL ( query all data in the count column of the resources table based on $type_id$ ) , store the data back as list and return.","public List getUserMenu ( JdbcTemplate conn , String type_id ) { List entries = conn . query ( "" select count from resources where type_id = ? "" , new Object [ ] { type_id } , new BeanPropertyRowMapper ( List . class ) ) ; List json_row = new ArrayList ( ) ; for ( Object en : entries ) { json_row . add ( en ) ; } return json_row ; }"
"If the request method is ""POST"", set the SQL ( query the book_id column in the reviews table based on $user_id$ ) , use $conn$ to execute the SQL and get all the query results. Return the query results.","public List selectValue ( HttpRequest request , JdbcTemplate conn , String user_id ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List book_id = conn . query ( "" select book_id from reviews where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return book_id ; } else { return null ; } }"
Use $conn$ to execute the SQL ( get all columns in the files table based on $boxID$ ) and get all the data. Then use for loop to print each item of the query results.,"public void copyContentData ( JdbcTemplate conn , String boxID ) { List rows = conn . query ( "" select * from files where boxid = ? "" , new Object [ ] { boxID } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rows ) { System . out . println ( row ) ; } }"
get the connection via the start method of $engine$ and then execute SQL ( get the player_headshot in 'players' based on $name$ ) and get all the data. Use for loop to iterate through the query result and return the result of each item if the 0th element of the query is not empty.,"public Object getPlayerImage ( DataSource engine , String name ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select player_headshot from players where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : res ) { if ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) != "" "" ) { return row ; } else { return null ; } } return null ; }"
Execute the SQL ( query all the columns in the one_row where number_of_rows is $cname$ ) using $conn$ and get the first data. Set the assertion determination query result length to 1 and return the query result.,"public Object searchDottedName ( JdbcTemplate conn , String cname ) { List rows = conn . query ( "" select * from one_row where number_of_rows = ? "" , new Object [ ] { cname } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = rows . get ( 0 ) ; assert rows . size ( ) == 1 ; return row ; }"
"If the request module sends the request as post, connect to the database via $dbe$. Set the SQL ( query the loginpassword in Member via $uid$ ) , execute the SQL to get all the data, and return all the obtained data.","public List login ( HttpRequest request , DataSource dbe , String uid ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { JdbcTemplate connection = new JdbcTemplate ( dbe ) ; List actualpwd = connection . query ( "" select loginpassword from member where uid = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; return actualpwd ; } else { return null ; } }"
"Use $tlengine$ to get the connection. Use the connection to execute SQL ( query all columns in the users_table table ) . Use the keys in the execution result as the key in the dictionary, each item in the execution result cursor as the value, and store the obtained dictionary into list. Close the connection and return the processed list.","public List testCommit ( DataSource tlengine , String summary ) { JdbcTemplate external_connection = new JdbcTemplate ( tlengine ) ; List inf_dic = external_connection . query ( "" select * from users_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return inf_dic ; }"
"Execute SQL ( get all the columns in the users where the id of user is $user_id$ ) with $conn$, and finally return whether the function that return the result of the query is true or false for 1.","public boolean clearResetCode ( JdbcTemplate conn , String user_id ) { List res = conn . query ( "" select * from users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res . size ( ) == 1 ; }"
"Use $conn$ to execute SQL ( query all columns in the RIDERS table based on $rider$ ) , get all the data, store the 0th element of each item of the query result as tuple and return it.","public List testMultipleRowsOneCommit ( JdbcTemplate conn , String rider ) { List result = conn . query ( "" select * from riders where rider = ? "" , new Object [ ] { rider } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object r : result ) { list . add ( JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ) ; } return list ; }"
"If the requested method is 'POST', SQL is executed using $db$ ( to get the users column in the zips where zipcode is $zipcode$ ) and the first data is returned to the rendered ""location.html"", where the Zips parameter is the result of the query.","public Object location ( HttpRequest request , JdbcTemplate db , String zipcode , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = db . query ( "" select users from zips where zipcode = ? "" , new Object [ ] { zipcode } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" zips "" , res ) ; return "" location.html "" ; } else { return null ; } }"
"Get the database engine and establish a connection through $postgresql$. Execute the SQL statement ( query the first piece of data in the taxonomyresults table according to $taxonomysampleinfo$ ) , close the connection, and return the query results.","public List clear ( DataSource postgresql , String taxonomysampleinfo ) { JdbcTemplate eng = new JdbcTemplate ( postgresql ) ; List statement = eng . query ( "" select * from taxonomyresults where taxonomysampleinfo = ? "" , new Object [ ] { taxonomysampleinfo } , new BeanPropertyRowMapper ( List . class ) ) ; return statement ; }"
"If $time_now$ exists, create the database engine and get the connection through $postgres_dbapi$; execute SQL ( query the num in the database_name table based on $time_now$ ) and get all the data; close the connection and return the query results. Otherwise ( $time_now$ does not exist ) , return False.","public Object createDatabase ( DataSource postgres_dbapi , String time_now ) { if ( time_now != null ) { JdbcTemplate conn = new JdbcTemplate ( postgres_dbapi ) ; List nums = conn . query ( "" select num from database_name where time_now = ? "" , new Object [ ] { time_now } , new BeanPropertyRowMapper ( List . class ) ) ; return nums ; } else { return false ; } }"
Set SQL ( query the 'password' data in the player_master table through $username$ ) . Use the $conn$ connection to execute SQL to get all the data. For loop iterates the execution result and prints.,"public void selectValue ( JdbcTemplate conn , String username ) { List result = conn . query ( "" select password from player_master where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } }"
"connect the database according to $engine$, set SQL ( query all columns in the outcome_vw table based on $model_name$ and $pct_correct$ ) , execute SQL, get all the query results, return the rendered project_outcomes.html page, and set the parameter rsOutcome to the query result.","public String admin ( DataSource engine , String model_name , String pct_correct , Model model ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rsOutcome = con . query ( "" select * from outcome_vw where model_name = ? and pct_correct = ? "" , new Object [ ] { model_name , pct_correct } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rsOutcome "" , rsOutcome ) ; return "" project_outcomes.html "" ; }"
"Try to use $conn$ to execute SQL ( get all columns in the pets table based on $name$ ) and get all data, then return the query results. If not try, then pass.","public List testRollback ( JdbcTemplate conn , String name ) { try { List results = conn . query ( "" select * from pets where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { return null ; } }"
Use $conn$ to execute SQL ( use the method of format string to query the id in the ratings table based on $genre$ ) and get all the data. Convert the query result to a list type and return the 0th data.,"public Object lookupGenreId ( JdbcTemplate conn , String genre ) { List genre_id = conn . query ( "" select id from ratings where genre = ? "" , new Object [ ] { genre } , new BeanPropertyRowMapper ( List . class ) ) ; return genre_id . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( query the pokemon_id column in the sightings table according to $order_by$ ) , get all the data, use for loop to convert each item of the query result into dict, and store it in list, and then return the list.","public List getTopPokemon ( JdbcTemplate conn , String order_by ) { List list = conn . query ( "" select pokemon_id from sightings where order_by = ? "" , new Object [ ] { order_by } , new BeanPropertyRowMapper ( List . class ) ) ; List pokemons = new ArrayList ( ) ; for ( Object r : list ) { pokemons . add ( r ) ; } return pokemons ; }"
"Try to get the database enginevia $host$ and establish a connection, where the echo parameter is True, execute the SQL statement ( get all columns in datas based on $date$ ) and get all the data and return the obtained result. Print the exception if an exception occurs during execution, and finally make sure the connection is closed.","public List addBatchOperInfos ( DataSource host , String date ) { try { JdbcTemplate connection = new JdbcTemplate ( host ) ; List res = connection . query ( "" select * from datas where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
Use $conn$ to execute SQL ( query all query results for the dest column in the flights table based on $minutes$ ) and use for loop to print the data one by one.,"public void main ( JdbcTemplate conn , String minutes ) { List query = conn . query ( "" select dest from flights where minutes = ? "" , new Object [ ] { minutes } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : query ) { System . out . println ( i ) ; } }"
"Execute the SQL with $conn$ ( get all the columns in the transactions where the name of list is $listname$ ) , get all the data, and finally return the rendered ""transactions.html"" with the list parameter as the result of the query.","public String transactionsList ( JdbcTemplate conn , String listname , Model model ) { List list = conn . query ( "" select * from transactions where listname = ? "" , new Object [ ] { listname } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" list "" , list ) ; return "" transactions.html "" ; }"
"If $data$ is not None, then use $conn$ to execute the SQL ( get the queue column in the Task table based on $data$ ) and get all the data. Use for loop to store each item of the query results as list and return it.","public List selectQueue ( JdbcTemplate conn , String data ) { if ( data != null ) { List Tasks = conn . query ( "" select queue from task where data = ? "" , new Object [ ] { data } , new BeanPropertyRowMapper ( List . class ) ) ; return Tasks ; } else { return null ; } }"
Use the $conn$ connection to execute the SQL statement ( query the first piece of isbn data in reviews based on $userid$ ) . Return the query result.,"public List revBook ( JdbcTemplate conn , String userid ) { List bookrs = conn . query ( "" select isbn from reviews where userid = ? "" , new Object [ ] { userid } , new BeanPropertyRowMapper ( List . class ) ) ; return bookrs ; }"
Use $conn$ to execute SQL ( query all columns in the CHECKIN table based on $humidity$ )  get the first row of data and return the data.,"public Object main ( JdbcTemplate conn , String humidity ) { List adder = conn . query ( "" select * from checkin where humidity = ? "" , new Object [ ] { humidity } , new BeanPropertyRowMapper ( List . class ) ) ; return adder . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( query all columns in the get_users table based on $full_name$ ) , get the first row of data, and return the query results.","public List insertData ( JdbcTemplate conn , String full_name ) { List users = conn . query ( "" select * from get_users where full_name = ? "" , new Object [ ] { full_name } , new BeanPropertyRowMapper ( List . class ) ) ; return users ; }"
"Try to set up sql ( query all the information in the database table based on $engine$ and $session$ ) , use $conn$ to execute SQL and get all the query results. If the query results are not empty, use for loop to convert each of the query results to dict, store in list and return. If an Exception is caught, print the exception. Finally, close the connection.","public List getSubsetData ( JdbcTemplate conn , String engine , String session ) { try { List rows = conn . query ( "" select * from database where engine = ? and session = ? "" , new Object [ ] { engine , session } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! rows . isEmpty ( ) ) { return rows ; } else { return null ; } } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Execute SQL via $conn$ ( get all the columns in the events_entity_id based on $entity_id$ ) and get all the data, convert the 0th element of each item of the query result into list, further set the assertion list content length to 2, and finally return the list content.","public List testInputMinDate ( JdbcTemplate conn , String entity_id ) { List r = conn . query ( "" select * from events_entity_id where entity_id = ? "" , new Object [ ] { entity_id } , new BeanPropertyRowMapper ( List . class ) ) ; List rows = new ArrayList ( ) ; for ( Object x : r ) { rows . add ( JSONObject . parseObject ( x . toString ( ) ) . get ( 0 ) ) ; } assert rows . size ( ) == 2 ; return rows ; }"
"If the request method is ""POST"" and $session$ does not get the data 'logged_in', use $conn$ to execute SQL ( query the longitude column in the ZIPCODE table according to $zip$ ) , get the first row of data and return. Otherwise, return the rendered 'checked.html' page.","public Object weather ( HttpRequest request , JdbcTemplate conn , String zip , HttpSession session ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { if ( session . getAttribute ( "" logged_in "" ) != null ) { List lat = conn . query ( "" select longitude from zipcode where zip = ? "" , new Object [ ] { zip } , new BeanPropertyRowMapper ( List . class ) ) ; return lat ; } else { return "" checked.html "" ; } } else { return "" checked.html "" ; } }"
"Set up SQL ( query all the information in the flights table based on $date$ ) , execute SQL with $conn$ and get all the query results. Return the rendered ""index.html"" page with the flights parameter as the query results.","public String selectRes ( JdbcTemplate conn , String date , Model model ) { List flights = conn . query ( "" select * from flights where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights ) ; return "" index.html "" ; }"
"Set the SQL statement ( query all columns in the customers table where email is $email$ ) , use $db_conn$ to execute the query statement ( where the email parameter is email ) , get all the data, convert the query results to list form and return.","public List existeEmail ( JdbcTemplate db_conn , String email ) { List query = db_conn . query ( "" select * from customers where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }"
"Get the database engine through $DB_CONNECT_STRING$, where the parameter max_overflow is set to 5. Execute the SQL statement ( query the profileurl column in the people_profile table according to $username$ ) , get all the data, and use for loop to print each piece of the query result.","public void initialProfiles ( DataSource DB_CONNECT_STRING , String username ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List results = engine . query ( "" select profileurl from people_profile where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : results ) { System . out . println ( r ) ; } }"
Use $connection$ to execute SQL ( query the title in the books table based on $isbn$ ) and get the first piece of data. Return the query results after being processed by jsonify.,"public JSONArray isbnApi ( JdbcTemplate connection , String isbn ) { List api_response = connection . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( api_response . toString ( ) ) ; }"
Use $conn$ to execute SQL ( query fake_stuff in the _fake_table table ) and get all the data. Return the query results.,"public List testExplode ( JdbcTemplate conn ) { List values = conn . query ( "" select fake_stuff from _fake_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }"
make the connection using $engine$. Execute the SQL statement ( select the drinkerID column in the drinkers where name is $name$ ) and fetch all the data. Return None if the result set is None and return None if the result set is dictionary type.,"public List findDrinker ( DataSource engine , String name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select drinkerid from drinkers where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }"
"If $field$ has a value, use $conn$ to execute SQL ( query all columns in the books table based on $field$ ) , get all the query results, and return the rendered 'search.html', where parameter books is the query result.","public String search ( JdbcTemplate conn , String field , Model model ) { List resultBooks = conn . query ( "" select * from books where field = ? "" , new Object [ ] { field } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , resultBooks ) ; return "" search.html "" ; }"
"Execute SQL with $conn$ ( query title in file according to where id is $id$ ) and get all the data. Render and return to 'index.html', where the titles parameter is the result of the query.","public String index ( JdbcTemplate conn , String id , Model model ) { List infor_title = conn . query ( "" select title from file where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" titles "" , infor_title ) ; return "" index.html "" ; }"
"Execute the SQL ( get all the columns in the users where the name of user is $username$ and password is $password$ ) with $conn$ and get all the data, then print each item of the query results using the for loop.","public void checkLogin ( JdbcTemplate conn , String username , String password ) { List results = conn . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object item : results ) { System . out . println ( item ) ; } }"
"Use the format string matching method to set SQL ( query all columns in the home_list table based on $id$ ) , and execute SQL according to $conn$. If the data is queried, return all the obtained data.","public List selectAllData ( JdbcTemplate conn , String id ) { List res = conn . query ( "" select * from home_list where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }"
"Use $conn$ to execute SQL ( query all columns in the flights table based on $id$ ) , get all the query results, and return the rendered flights.html page, where the flights parameter is assigned to the queried data.","public String flights ( JdbcTemplate conn , String id , Model model ) { List flights = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights ) ; return "" flights.html "" ; }"
"If the request module sends a request by post, execute SQL via $conn$ ( query all columns in books by $author$ and use the % operator to match the conditions in the SQL string ) and get all the data. For loop iterates through all the obtained data, prints, and returns all the obtained data.","public List search ( HttpRequest request , JdbcTemplate conn , String author ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List data = conn . query ( "" select * from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object x : data ) { System . out . println ( x ) ; } return data ; } else { return null ; } }"
"Execute SQL through $conn$ ( query the review column in the reviewtable table according to $isbn$ ) and get all the query results. If the query result length is 1, return True; otherwise, return False.","public boolean bookreviewFunc ( JdbcTemplate conn , String isbn ) { List review_return = conn . query ( "" select review from reviewtable where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( review_return . size ( ) == 1 ) { return true ; } else { return false ; } }"
"Set up sql ( query all the information in the passengers table based on $flight_id$ ) , use $conn$ to execute SQL and get all the query results. Return the rendered ""flights.html"", where the parameter passenger_detail is the query result.","public String flights ( JdbcTemplate conn , String flight_id , Model model ) { List passenger_detail = conn . query ( "" select * from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passenger_detail . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" passenger_detail "" , passenger_detail ) ; return "" flights.thtml "" ; } }"
Use $conn$ to execute SQL ( query the schema information in the DataFrame table based on $options$ ) and get all the data. Store the 0th element of each item in the query result into list and return.,"public List chunksize ( JdbcTemplate conn , String options ) { List schemas = conn . query ( "" select schema from dataframe where options = ? "" , new Object [ ] { options } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object alpha : schemas ) { list . add ( JSONObject . parseObject ( alpha . toString ( ) ) . get ( 0 ) ) ; } return list ; }"
"If $id$ is not None, use $conn$ to execute SQL ( query the username in the jam_people table based on $id$ ) and get all the data. If the query result is not an empty string, return the query result.","public List fillUsernamePeople ( JdbcTemplate conn , String id ) { if ( id != null ) { List username = conn . query ( "" select username from jam_people where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! username . isEmpty ( ) ) { return username ; } else { return null ; } } else { return null ; } }"
"connect to the database by $create_db_engine$, execute SQL ( get all the columns in DATABASE based on $db_name$ ) , get all the data, and finally return the query result.","public List getDb ( DataSource create_db_engine , String db_name ) { JdbcTemplate conn = new JdbcTemplate ( create_db_engine ) ; List res = conn . query ( "" select * from DATABASE where db_name = ? "" , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Execute the SQL ( get the pg_relation_size in the pg where name is $name$ ) with $conn$ and get all the data, return None if the query result is false, and finally return the result of the SQL statement.","public List getTableSize ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select pg_relation_size from pg where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }"
"Get the database engine through $db_string$. Execute the SQL statement ( query all thecolumns in the sistema table according to $vendas$ ) , get all the data, and return the query results.","public List getVendas ( DataSource db_string , String vendas ) { JdbcTemplate engine = new JdbcTemplate ( db_string ) ; List ven = engine . query ( "" select * from sistema where vendas = ? "" , new Object [ ] { vendas } , new BeanPropertyRowMapper ( List . class ) ) ; return ven ; }"
Use $engine$ to connect to the database and then execute the SQL ( get all the columns in the mark table with id as $video_id$ ) and get all the data. Then use for loop to print each item of the query results and finally close the connection.,"public void getExperienceVideoId ( DataSource engine , String video_id ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List result = con . query ( "" select time from comments where summary = ? "" , new Object [ ] { video_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } }"
"Set the SQL statement ( use the format ( ) function format string to get all the columns in a volcano_data by $full_db$ ) , execute the SQL statement with $conn$ to get all the data, render and return 'raw_data.html', where the data parameter is the result of the query.","public String dbPush ( JdbcTemplate conn , String full_db , Model model ) { List full_dbs = conn . query ( "" select * from volcano_data where data = ? "" , new Object [ ] { full_db } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" data "" , full_dbs ) ; return "" raw_data.html "" ; }"
"Execute SQL with $db$ ( get the lokaatioID column in the havainto table according to $id$ ) , get the first piece of data, and then use for loop to print each item of the query result.","public void taydenna ( JdbcTemplate db , String id ) { List testi = db . query ( "" select lokaatioID from havainto where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object t : testi ) { System . out . println ( t ) ; } }"
"Use $url$ to get the database engine and connect to the database, then execute the SQL ( get all columns in the schools table based on $name$ ) and get all the data. Then close the connection and finally return the query results.","public List testDialectInitUsesOptions ( DataSource url , String name ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; List schools = conn . query ( "" select * from schools where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return schools ; }"
"Get the database engine and establish a connection through $sqlite$. Set up the SQL statement ( query all the columns in the Alltypes table according to $parm$ ) , execute sql, get all the data, close the connection, and return the query result converted to json.","public JSONArray getState ( DataSource sqlite , String parm ) { JdbcTemplate conn = new JdbcTemplate ( sqlite ) ; List data = conn . query ( "" select * from Alltypes where parm = ? "" , new Object [ ] { parm } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( data . toString ( ) ) ; }"
"Use $db_uri$ to get the database engine and connect to the database, then execute SQL ( get all columns in the lights table based on $i_id$ ) and get all the data. Then close the connection and finally return the query results.","public List setUp ( DataSource db_uri , String i_id ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List results = conn . query ( "" select * from lights where i_id = ? "" , new Object [ ] { i_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use $db$ to execute SQL ( get 'a' column in the anon_1 table according to $label$ ) and get all the data. If the query result is not None, return the query result.","public List deprecated ( JdbcTemplate db , String label ) { List deps = db . query ( "" select a from anon_1 where label = ? "" , new Object [ ] { label } , new BeanPropertyRowMapper ( List . class ) ) ; if ( deps . isEmpty ( ) ) { return null ; } else { return deps ; } }"
Use $conn$ to execute SQL statement ( get the first piece of year_occur in traffic_tbl table ) . Use for loop iterate the query result and print it. Use jsonify to return the query result.,"public JSONArray queryInfo ( JdbcTemplate conn ) { List results = conn . query ( "" select year_occur from traffic_tbl "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : results ) { System . out . println ( row ) ; } return JSONObject . parseArray ( results . toString ( ) ) ; }"
"Get the database engine through $url$, and the echo parameter is True, get a connection. Execute the SQL statement ( query all the columns in the DATABASE table according to $mtime$ ) , get all the data, and return the query results.","public List resetDatabase ( DataSource url , String mtime ) { JdbcTemplate c = new JdbcTemplate ( url ) ; List res = c . query ( "" select * from DATABASE where mtime = ? "" , new Object [ ] { mtime } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $conn$ to execute SQL ( query all columns in the users_tl table based on $username$ and $password$ ) . If the number of rows in the query result is 0, return the rendered ""loginfail.html"". Otherwise, return the rendered ""index.html"".","public String login ( JdbcTemplate conn , String username , String password ) { List result_u = conn . query ( "" select * from users_tl where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result_u . isEmpty ( ) ) { return "" index.html "" ; } else { return "" loginfail.html "" ; } }"
Use $url$ to get the database and use raw_connection method to connect to the data and execute SQL through cursor method ( get column 'a' in the travisci_mysql table based on $c$ ) and get all the data. Finally print the query results.,"public void testCsvMysqlLoad ( DataSource url , String c ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; List res = conn . query ( "" select a from travisci_mysql where c = ? "" , new Object [ ] { c } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; }"
"Use $conn$ to execute SQL ( query the ball column in the users table according to $username$ ) and get all the query results. If the result is empty, return the rendered result.html page; otherwise, return the rendered result.html page, where the parameter result is 'Error!'.","public String register ( JdbcTemplate conn , String username , Model model ) { List check = conn . query ( "" select ball from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( check . isEmpty ( ) ) { return "" result.html "" ; } else { model . addAttribute ( "" result "" , "" Error! "" ) ; return "" result.html "" ; } }"
"Execute SQL with $conn$ ( get the Bar column in the Bar_table where Bar is $b$ ) and get all the data, return None if the query result is None, and finally convert each item of the query result to a dictionary type using a for loop and return the dictionary content.","public List findBarHelper ( JdbcTemplate conn , String b ) { List rs = conn . query ( "" select bar from bar_table where bar = ? "" , new Object [ ] { b } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rs . isEmpty ( ) ) { return null ; } else { return rs ; } }"
Execute the SQL ( based on all columns in the flights where flight_id is $flight_id$ ) using $db$ and get all the data. Convert each item in the query result to dict and return.,"public List flights ( JdbcTemplate conn , String flight_id ) { List fs = conn . query ( "" select * from flights where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( fs . isEmpty ( ) ) { return null ; } else { return fs ; } }"
"Use $conn$ to execute SQL ( query the timestamp_id in the calibration_original table based on $calibration_value$ ) and get all the data. If the query result is None, the ""Error"" information is printed. Otherwise, return the query result.","public List calibrationCore ( JdbcTemplate conn , String calibration_value ) { List timestamp = conn . query ( "" select timestamp_id from calibration_original where calibration_value = ? "" , new Object [ ] { calibration_value } , new BeanPropertyRowMapper ( List . class ) ) ; if ( timestamp . isEmpty ( ) ) { System . out . println ( "" Error "" ) ; return null ; } else { return timestamp ; } }"
"Use $connection$ to execute the SQL statement ( query all id, origin, destination, duration in the flights table ) , return None if the length of the query result is 0; otherwise, return the query result.","public List main ( JdbcTemplate conn ) { List flights = conn . query ( "" select id, origin, destination, duration from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { return null ; } else { return flights ; } }"
Use $con$ to connect to the database and execute the SQL ( get all the columns in a tableParam where tableParam is $tableParam$ ) to get the first data and return the result of the query.,"public List insert ( DataSource con , String tableParam ) { JdbcTemplate conn = new JdbcTemplate ( con ) ; List res = conn . query ( "" select * from tableParam where tableParam = ? "" , new Object [ ] { tableParam } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Set up SQL ( query the password column in the users table based on $username$ ) , execute SQL with $conn$ and get all the query results. Usw for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List getUser ( JdbcTemplate conn , String username ) { List results = conn . query ( "" select password from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; List passwords = new ArrayList ( ) ; for ( Object i : results ) { passwords . add ( i ) ; } return passwords ; }"
"Use string splicing to set up SQL ( query the income column in the customers table based on $customerid$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","public List selectUserSaldo ( JdbcTemplate conn , String customerid ) { List results = conn . query ( "" select income from customers where customerid = ? "" , new Object [ ] { customerid } , new BeanPropertyRowMapper ( List . class ) ) ; List incomes = new ArrayList ( ) ; for ( Object i : results ) { incomes . add ( i ) ; } return incomes ; }"
Use $conn$ to execute SQL ( query all columns in realtime_bus based on $stopid$ under the condition that the% operator matches the string ) . Return the results of querying all data after execution.,"public List getLastOrder ( JdbcTemplate conn , String stopid ) { List results = conn . query ( "" select * from realtime_bus where stopid = ? "" , new Object [ ] { stopid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Set SQL ( query all columns in the Pays table where TransactionId is $t$, Name is $drinker$, and Bar is $bar$ ) . Execute SQL with $conn$ and get all the data. Return None if the query result is None. Otherwise, convert each item in the query result to type dict and return.","public List findPays ( JdbcTemplate conn , String t , String drinker , String bar ) { List rs = conn . query ( "" select * from pays where transactionid = ? and name = ? and bar = ? "" , new Object [ ] { t , drinker , bar } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rs . isEmpty ( ) ) { return null ; } else { return rs ; } }"
"Connect to the database using $mysql$ and create the cursor object using the cursor ( ) method. Execute the SQL ( query all columns in the call_list table where articles is $articles$ ) and get all the data. If the query result is greater than 0, then render and return 'articles.html', where the articles parameter is the result of the query. Otherwise, render and return 'articles.html', where the msg parameter with content 'No Articles Found'.","public String articles ( DataSource mysql , String articles , Model model ) { JdbcTemplate cur = new JdbcTemplate ( mysql ) ; List information = cur . query ( "" select * from call_list where articles = ? "" , new Object [ ] { articles } , new BeanPropertyRowMapper ( List . class ) ) ; if ( information . isEmpty ( ) ) { model . addAttribute ( "" msg "" , "" No Articles Found "" ) ; return "" articles.html "" ; } else { model . addAttribute ( "" articles "" , information ) ; return "" articles.html "" ; } }"
"Use $cursor$ to execute SQL ( get all the columns in the tbl table according to $id$ ) , asynchronously use for loop to convert each item of the query result to a list type, and finally return the query result.","public List getTable ( JdbcTemplate cursor , String id ) { List c = cursor . query ( "" select * from tbl where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List ret = new ArrayList ( ) ; for ( Object i : c ) { ret . add ( i ) ; } return ret ; }"
"In the case of async, use $conn$ to get the connection. Use the connection to execute the SQL ( query all columns in the tbl ) and get all the data. Use for loop to store the query data in list and return it.","public List testPool ( JdbcTemplate conn ) { List c = conn . query ( "" select * from tbl "" , new BeanPropertyRowMapper ( List . class ) ) ; List ret = new ArrayList ( ) ; for ( Object i : c ) { ret . add ( i ) ; } return ret ; }"
Use $conn$ to execute SQL ( query the first row of data in the Column table based on $column$ ) and return the data.,"public Object testContainsDoesntCompile ( JdbcTemplate conn , String column ) { List rows = conn . query ( "" select * from column where column = ? "" , new Object [ ] { column } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = rows . get ( 0 ) ; return row ; }"
"Get the database engine and establish a connection through $SQLALCHEMY_TEST_DATABASE_URI$. Execute the SQL statement ( query all the columns in the users table according to $FOREIGN_KEY$ ) , get all the data, and return the query results.","public List manualTest ( DataSource SQLALCHEMY_TEST_DATABASE_URI , String FOREIGN_KEY ) { JdbcTemplate engine = new JdbcTemplate ( SQLALCHEMY_TEST_DATABASE_URI ) ; List values = engine . query ( "" select * from users where foreign_key = ? "" , new Object [ ] { FOREIGN_KEY } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }"
"Get the cursor using $connection$, and use the cursor to execute SQL ( query all the columns in pillar where user is $user$ and pwd is $pwd$ ) and get all the data. Close the cursor and connection and return the result of the query using a serialization method.","public JSONArray get ( DataSource connection , String user , String pwd ) { JdbcTemplate cursor = new JdbcTemplate ( connection ) ; List result = cursor . query ( "" select * from pillar where user = ? and pwd = ? "" , new Object [ ] { user , pwd } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( result . toString ( ) ) ; }"
"connect the database according to $db_engine$. Execute SQL ( query all columns in the DATABASE table based on $db_name$ ) , get the first piece of data, and return the query result.","public List < Object > dropDb ( DataSource db_engine , String db_name ) { JdbcTemplate conn = new JdbcTemplate ( db_engine ) ; List assy = conn . query ( "" select * from database where db_name = ? "" , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return assy ; }"
"Set sql ( query all columns in the ROLLBACK_TEST table according to $session$ ) , use $conn$ to execute SQL and get the first row of data, and return the judgment of whether the query result is 0 or not.","public boolean supportsTransactions ( JdbcTemplate conn , String session ) { List counts = conn . query ( "" select COUNT from ROLLBACK_TEST where session = ? "" , new Object [ ] { session } , new BeanPropertyRowMapper ( List . class ) ) ; return counts . size ( ) == 0 ; }"
"Execute SQL ( get the hair column in the universities where name is $name$ ) with $conn$, get the first data, then print the query results and return the rendered 'courses.html', where the university parameter is the result of the query.","public String supportsTransactions ( JdbcTemplate conn , String name , Model model ) { List university = conn . query ( "" select hair from universities where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( university ) ; model . addAttribute ( "" university "" , university ) ; return "" courses.html "" ; }"
"Execute SQL with $conn$ ( query the destination column in the flights table according to $origin$ ) , get all the data, use for loop to traverse the query results, store the 0th element of each article in list, and return the list.","public List main ( JdbcTemplate conn , String origin ) { List flights = conn . query ( "" select destination from flights where origin = ? "" , new Object [ ] { origin } , new BeanPropertyRowMapper ( List . class ) ) ; List flight_list = new ArrayList ( ) ; for ( Object i : flights ) { flight_list . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return flight_list ; }"
"Try to use $conn$ to execute SQL ( query the day column in the flights table based on $id$ ) , get all the data, and return the query results. If an Exception occurs during execution, the exception is printed.","public List book ( JdbcTemplate conn , String id ) { try { List res = conn . query ( "" select day from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
Execute the SQL statement ( query all the columns in the Restaurant ) with $conn$ and return after getting all the data. Close $conn$ and return the result of executing the SQL statement.,"public List search ( JdbcTemplate conn ) { List results = conn . query ( "" select * from restaurant "" , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Execute SQL through $conn$ ( query the description column in the 'table' table according to $id$ ) , get all the data, use for loop to convert each item of the query result into dict, store it into list, and return the list.","public List getCommonWords ( JdbcTemplate conn , String id ) { List descriptions = conn . query ( "" select description from table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return descriptions ; }"
"Use $conn$ to create the cursor by the cursor ( ) method. If the request module sends the request as post, set the SQL ( query all columns in services through $status$ ) , execute the SQL statement to get all the data. Close the cursor, render and return ""marketplace.html"", where the res parameter is the result of the query.","public Object marketplace ( HttpRequest request , JdbcTemplate conn , String status , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select * from services where status = ? "" , new Object [ ] { status } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , res ) ; return "" marketplace.html "" ; } else { return null ; } }"
connect to the database through $engine$ and execute the SQL ( get the description column in the Customer table based on $id$ ) and get all the data. Finally return the query results.,"public List testCoreFetchmanyWStreaming ( DataSource engine , String id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List results = conn . query ( "" select description from customer where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Connect the database with $db$, set up SQL ( query all columns in the deadlock_users table based on $user_id$ and $name$ ) , execute SQL, get all the data, close the connection, and return the data.","public List testRollbackDeadlock ( DataSource db , String user_id , String name ) { JdbcTemplate conn1 = new JdbcTemplate ( db ) ; List uesrs = conn1 . query ( "" select * from deadlock_users where user_id = ? and name = ? "" , new Object [ ] { user_id , name } , new BeanPropertyRowMapper ( List . class ) ) ; return uesrs ; }"
"Use $db$ to execute SQL ( get the Name column processed by the counting method in the tracks table according to $name$ ) , get all the data, and then use for loop to print each item in the query result.","public void findNameNum ( JdbcTemplate db , String name ) { List result = db . query ( "" select count(Name) from tracks where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : result ) { System . out . println ( i ) ; } }"
"Execute SQL ( query the ratings data in the reviewtable with $isbn$ ) using the $conn$ connection and get the number of rows of data. If the number of rows obtained is not 0, all data is queried and the rendered ""review.html"" is returned with the review parameter as the result of the query.","public String userReview ( JdbcTemplate conn , String isbn , Model model ) { List review = conn . query ( "" select ratings from reviewtable where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; int count = review . size ( ) ; if ( review . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" review "" , review ) ; return "" review.html "" ; } }"
"connect to the database where the engine is $engine$. Execute the SQL statement ( query all columns in the Customer ) using the database connection and get all the data. If no data is obtained, False is returned, otherwise return True .","public boolean getCustomer ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select * from customer "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return false ; } else { return true ; } }"
"Use $conn$ to execute SQL ( query the amount of data in the events table when table_name is $hash_cohort$ ) and get the first piece of data. Set the assertion to determine the number of query results to 1. Finally, return the data.","public Object testEmptyOutput ( JdbcTemplate conn , String hash_cohort ) { List count_ts = conn . query ( "" select count(*) from events where table_name = ? "" , new Object [ ] { hash_cohort } , new BeanPropertyRowMapper ( List . class ) ) ; assert count_ts . size ( ) == 1 ; return count_ts . get ( 0 ) ; }"
"Set up SQL ( query all the information in the books table based on $isbn$ ) , use $conn$ to execute the SQL and get all the query results. Return the query results converted to json format.","public JSONArray selectValue ( JdbcTemplate conn , String isbn ) { List data = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( data . toString ( ) ) ; }"
"Try to use $conn$ to execute SQL ( query all the columns in the 'tables' table where user_id is $id$ ) , get all the data and print. If a SQLAlchemyError exception occurs during execution, print the exception converted to a string and convert the dictionary whose 'status' is 200 and 'message' is ""OK"" to json and return.","public JSONObject adoptPet ( JdbcTemplate conn , String id ) { try { List res = conn . query ( "" select * from tables where user_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" status "" , 200 ) ; jsonObject . put ( "" message "" , "" ok "" ) ; return jsonObject ; }"
"Set up the SQL statement ( get all columns in books based on $isbn$ and $title$ ) , execute the SQL statement through the $conn$ connection. If the number of rows of the query results is 0, render and return ""error.html"". Get all the data, render and return ""results.html"", where the result of the books parameter is all the data obtained.","public String getBooks ( JdbcTemplate conn , String isbn , String title , Model model ) { List books = conn . query ( "" select * from books where isbn = ? and title = ? "" , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" books "" , books ) ; return "" results.html "" ; } }"
"Use $db$ to execute SQL ( get the isbn column in the books table based on $title$ and $author$ ) , get all the data, and return the rendered ""home.html"", where the result parameter is the query result.","public String search ( JdbcTemplate db , String title , String author , Model model ) { List all_isbn = db . query ( "" select isbn from books where title = ? and author = ? "" , new Object [ ] { title , author } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" result "" , all_isbn ) ; return "" home.html "" ; }"
"Set up the SQL ( query the id column in the book table based on $user_id$ ) , execute the SQL based on $conn$ and get all the query result, close the connection, and return the data.","public List selectBook ( JdbcTemplate conn , String user_id ) { List ids = conn . query ( "" select id from book where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return ids ; }"
"Use $conn$ to execute the SQL ( get the book_name column in the books table based on $id$ ) and get all the data. If the obtained result is not None, then return the rendered ""error.html"", and finally return the rendered ""book.html"", where the book_names parameter is the data obtained by executing the SQL.","public String book ( JdbcTemplate conn , String id , Model model ) { List book_names = conn . query ( "" select book_name from books where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book_names . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" book_names "" , book_names ) ; return "" book.html "" ; } }"
"If the data request method is POST, use $conn$ to execute SQL ( query all data in the 'request' column of the POST table based on $check_password_hash$ and $check_password_hash$ ) , store the query result as list and return. Otherwise, return the rendered ""login.html"" page.","public Object login ( HttpRequest request , JdbcTemplate conn , String check_password_hash ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select request from post where check_password_hash = ? "" , new Object [ ] { check_password_hash } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rows ) { return row ; } } else { return "" login.html "" ; } return "" login.html "" ; }"
"Use $conn$ to execute SQL ( query all columns in the detail table based on $host$ ) . Get all query results, print and return.","public List dbhost ( JdbcTemplate conn , String host ) { List rs = conn . query ( "" select * from detail where host = ? "" , new Object [ ] { host } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( rs ) ; return rs ; }"
"Use the cursor method of $connection$ to execute the SQL ( get all columns in the user table based on $id$ ) and get all the data. Then close the cursor method, close the database connection and finally print the query results.","public void databaseForSqliteSelect ( DataSource connection , String id ) { JdbcTemplate cursor = new JdbcTemplate ( connection ) ; List values = cursor . query ( "" select * from user where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( values ) ; }"
"Set SQL ( query the number of eligible rows in the table where name is $name$ ) , execute SQL with $conn$ to get all the data and return the 0th of the query results.","public Object selectCount ( JdbcTemplate conn , String name ) { List results = conn . query ( "" select count(*) from table where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }"
Use the $engine$ to connect the database and execute SQL ( get the name column in the Beers table where id is $bid$ ) and get all the data. Use for loop to convert each item of the query result to a dictionary type and return.,"public List findBeersname ( DataSource engine , String bid ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select name from Beers where id = ? "" , new Object [ ] { bid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Try to connect to the database with $engine$, execut SQL ( get all of the weather_info where temp_min is $temp_min$ and temp_max is $temp_max$ ) to convert each query result into a dict store as a list and return.","public List queryPage ( DataSource engine , String temp_min , String temp_max ) { try { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List res_data = connection . query ( "" select temp from weather_info where temp_min = ? and temp_max = ? "" , new Object [ ] { temp_min , temp_max } , new BeanPropertyRowMapper ( List . class ) ) ; return res_data ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
Create the database engine and connect via $localhost$. Execute the SQL statement ( query the number of all columns in the pg_database table based on $datname$ ) to get the first piece of data and return the obtained data.,"public List sqlImport ( DataSource localhost , String datname ) { JdbcTemplate conn = new JdbcTemplate ( localhost ) ; List value = conn . query ( "" select count(*) from pg_database where datname = ? "" , new Object [ ] { datname } , new BeanPropertyRowMapper ( List . class ) ) ; return value ; }"
"Try to use $conn$ to execute SQL ( get all the columns in the table where message is $message_te$ ) , get all the data, return the query results, and print an exception if an exception occurs during execution.","public List init ( JdbcTemplate conn , String message_te ) { try { List res = conn . query ( "" select * from table where message_te = ? "" , new Object [ ] { message_te } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
Execute the SQL statement through $con$ ( query the first event_name and event_date in the events table where id is $id$ ) and return the query results.,"public List getEventName ( JdbcTemplate conn , String id ) { List ret = conn . query ( "" select event_name, event_date from events where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return ret ; }"
"Use $conn$ to execute SQL ( get all columns in the ic_item table with _id as $item_id$ ) and get all the data. If the query result is true, return True.","public boolean getItem ( JdbcTemplate conn , String item_id ) { List items = conn . query ( "" select * from ic_item where _id = ? "" , new Object [ ] { item_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( items . isEmpty ( ) ) { return false ; } else { return true ; } }"
"Execute SQL ( query all columns in book ) with $conn$ to get all the data. Returns ""display.html"" after rendering, of which the argument books is the result of the query.","public String search ( JdbcTemplate conn , Model model ) { List books = conn . query ( "" select * from book "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , books ) ; return "" display.html "" ; }"
"Set sql ( query the model_id column in the model_metadata table based on $model_group_id$ ) , execute the SQL with $conn$, get all the query results, use for loop to insert each item of the query result into list and return.","public List getModelsIds ( JdbcTemplate conn , String model_group_id ) { List query = conn . query ( "" select model_id from model_metadata where model_group_id = ? "" , new Object [ ] { model_group_id } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }"
Execute SQL via $conn$ ( get all columns in the books table based on $search_criteria$ ) and get all the data. Close $conn$ and finally return the query result.,"public List testListenTargetsScope ( JdbcTemplate conn , String search_criteria ) { List res = conn . query ( "" select * from books where search_criteria = ? "" , new Object [ ] { search_criteria } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $conn$ to execute SQL ( query the first row of data in the Name table based on $NewName$ and $path$ ) , close the connection, and return the data.","public Object renameTable ( JdbcTemplate conn , String NewName , String path ) { List files = conn . query ( "" select * from books where search_criteria = ? "" , new Object [ ] { NewName , path } , new BeanPropertyRowMapper ( List . class ) ) ; return files . get ( 0 ) ; }"
"If the request method is ""POST"", use $db$ to execute SQL ( query the name column in the users table based on $password$ ) , get all the query results, set the assertion to determine the query result length, and return the redirected 'login' page. Otherwise, return the redirected 'signupp' page.","public String signUp ( HttpRequest request , JdbcTemplate db , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List login = db . query ( "" select name from users where password = ? "" , new Object [ ] { password } , new BeanPropertyRowMapper ( List . class ) ) ; assert login . size ( ) > 0 ; return "" login "" ; } else { return "" signupp "" ; } }"
"Set the SQL statement ( get all the columns in the orderState table based on $orderId$ ) , use the $conn$ connection to execute the SQL statement and get all the data. Convert each item of the query result to dict, store as list and return.","public List getOrderState ( JdbcTemplate conn , String orderId ) { List OrderStates = conn . query ( "" select * from orderstate where orderid = ? "" , new Object [ ] { orderId } , new BeanPropertyRowMapper ( List . class ) ) ; return OrderStates ; }"
"Use $conn$ to execute SQL ( query stdin in copy_name ) and get all the data. Finally, return the query results.","public List loaddata ( JdbcTemplate conn ) { List stdin_val = conn . query ( "" select stdin from copy_name "" , new BeanPropertyRowMapper ( List . class ) ) ; return stdin_val ; }"
"If the request module sends the request as post, set the SQL ( query all columns in books with 'title' as $search$ ) and uses $conn$ to execute the SQL to get all the data. If the result is null, return None; otherwise, render and return ""search.html"", where the books parameter is the execution result. If the request module sends the request in a way other than post, render and return ""index.html"".","public String books ( HttpRequest request , JdbcTemplate conn , String search , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books = conn . query ( "" select * from books where title = ? "" , new Object [ ] { search } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" books "" , books ) ; return "" search.html "" ; } } else { return "" index.html "" ; } }"
"connect to the database based on $engine$. Set up the SQL ( query the itemId column in the likes table based on 'drinkerId': $name$ ) and execute the SQL. Use for loop to iterate through all the obtained query results, insert the 'item' field of each piece of data into a list, and return the list.","public List getLikes ( DataSource engine , String name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select itemid from likes where drinkerid = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object row : rs ) { list . add ( JSONObject . parseObject ( row . toString ( ) ) . getString ( "" item "" ) ) ; } return list ; }"
"Set up sql ( query the weather column in the home_list table according to $id$ ) , use $conn$ to execute SQL and get all the query results. If the data is obtained, print and return the query results.","public List selectDataById ( JdbcTemplate conn , String id ) { List res = conn . query ( "" select weather from home_list where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { System . out . println ( res ) ; return res ; } }"
"Use $conn$ to execute SQL ( query all the data in the message column of the username table based on $channel$ ) , output the results of the query, take the data as the value of the dictionary 'message_uid' key and return with json format.","public JSONObject submitMessage ( JdbcTemplate conn , String channel ) { List result = conn . query ( "" select weather from home_list where id = ? "" , new Object [ ] { channel } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; JSONObject json = new JSONObject ( ) ; json . put ( "" message_uid "" , result ) ; return json ; }"
"Try to execute the following code: Set up the SQL ( query the id in users based on $username$ and $password$ ) ; use $conn$ to execute SQL and get the first piece of data and return the query results. If a ValueError exception occurs, return the rendered ""error.html"".","public Object reLogin ( JdbcTemplate conn , String username , String password ) { try { List ids = conn . query ( "" select id from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; return ids . get ( 0 ) ; } catch ( Exception e ) { return "" error.html "" ; } }"
"Use the $engine$ to connect the database and execute SQL ( get the key_word column in the 'table' table according to $key_id$ ) , get the first piece of data, and finally return the query result.","public Object searchKey ( DataSource engine , String key_id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List keys = conn . query ( "" select key_word from table where key_id = ? "" , new Object [ ] { key_id } , new BeanPropertyRowMapper ( List . class ) ) ; return keys . get ( 0 ) ; }"
Use $con$ to execute SQL ( get all columns in 'samples' based on $equation$ ) and get all the data. Close the $con$ connection and finally return the query result.,"public List selectValue ( JdbcTemplate conn , String equation ) { List res = conn . query ( "" select * from samples where equation = ? "" , new Object [ ] { equation } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Connect to the database via $engine$ and execute SQL ( query all columns in the pool table based on $pool_pre_ping$ ) , get all the data, and finally return the obtained result.","public List testPrePingDbStaysShutdown ( DataSource engine , String pool_pre_ping ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select * from pool where pool_pre_ping = ? "" , new Object [ ] { pool_pre_ping } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $conn$ to execute SQL ( query the comments in the ratings table based on $isbn$ ) and get all the data. The default setting is False for the label of existing multiple data, and True for the label of existing multiple data if the query result length is greater than 1. Return the rendered ""bookpage.html"", where the row parameter is the 0th element of the query result, and the get_more parameter is the label of whether there are multiple pieces of data.","public Object bookPage ( JdbcTemplate conn , String isbn , Model model ) { List values = conn . query ( "" select comments from ratings where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; boolean get_more = false ; if ( values . size ( ) > 1 ) { get_more = true ; } model . addAttribute ( "" row "" , values . get ( 0 ) ) ; model . addAttribute ( "" get_more "" , get_more ) ; return "" bookpage.html "" ; }"
"Try to use $conn$ to execute SQL ( query iduser in the exis_table table ) and get all the data. Convert each item of data in the query result to a dict type, store in list and return. If an exception occurs, return False.","public Object testAbort ( JdbcTemplate conn ) { try { List res_information = conn . query ( "" select iduser from exis_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return res_information ; } catch ( Exception e ) { return false ; } }"
"Execute SQL ( get all the columns in the table ) with $conn$, get all the data, and return.","public List searchRecords ( JdbcTemplate conn ) { List records = conn . query ( "" select * from table "" , new BeanPropertyRowMapper ( List . class ) ) ; return records ; }"
"Get the database engine with $elephantsql$ and execute the SQL statement ( query all columns in the Temperature_avg_table ) . Convert all the data obtained to the DataFrame form, where the column name is the keys of the query result. Finally, the processed data is returned.","public List fineTemp ( DataSource elephantsql , String summary ) { JdbcTemplate db = new JdbcTemplate ( elephantsql ) ; List df = db . query ( "" select * from temperature_avg_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return df ; }"
Use $conn$ to execute SQL ( query all columns in table based on $datum$ ) and get all the data. Return the query results.,"public List getOne ( JdbcTemplate conn , String datum ) { List rows = conn . query ( "" select * from table where datum = ? "" , new Object [ ] { datum } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }"
"If $clause$ is not None, use $conn$ to execute SQL ( query all columns in the table_name table when clause_string equals $clause$ ) and get all the data. Use for loop to convert the data to list and return.","public List getAll ( JdbcTemplate conn , String clause ) { if ( clause != null ) { List table_names = conn . query ( "" select * from table_name where clause_string = ? "" , new Object [ ] { clause } , new BeanPropertyRowMapper ( List . class ) ) ; List table_l = new ArrayList ( ) ; for ( Object i : table_names ) { table_l . add ( i ) ; } return table_l ; } else { return null ; } }"
"If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the books table according to $isbn$ ) , and get all the query results. If the query result length is less than 1, return the rendered ""apology.html"" page; otherwise, return the rendered ""results.html"" page and set the res parameter to the query result. If the request method is not ""POST"", return the rendered ""search.html"" page.","public Object search ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return "" apology.html "" ; } else { model . addAttribute ( "" res "" , res ) ; return "" results.html "" ; } } else { return "" search.html "" ; } }"
"Use $conn$ to execute the SQL ( query all columns in the FRC_ALL_TRADES table based on $evdate$ ) and get all the data. Finally, return all the query results.","public List getAllTrades ( JdbcTemplate conn , String evdate ) { List result_all_trades = conn . query ( "" select * from frc_all_trades where evdate = ? "" , new Object [ ] { evdate } , new BeanPropertyRowMapper ( List . class ) ) ; return result_all_trades ; }"
"Try to use $conn$ to execute SQL ( get all the columns in the 'my_table' based on $Date$ ) , get all the data, use for loop to store every item of queried data as list, and then return the list. If an exception occurs, return 500.","public Object postgresqlTrace ( JdbcTemplate conn , String Date ) { try { List res = conn . query ( "" select * from my_table where Date = ? "" , new Object [ ] { Date } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object item : res ) { result . add ( item ) ; } return result ; } catch ( Exception e ) { return 500 ; } }"
"Use $conn$ to execute SQL ( query the maximum value of the latest_date column in the account_latestfetchdate table ) and get all the query results. If the query result is empty, or the 0th element of the query result is empty, return None, otherwise return the query result.","public List execute ( JdbcTemplate conn ) { List max_date = conn . query ( "" select max(latest_date) from account_latestfetchdate "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( max_date . isEmpty ( ) ) { return null ; } else { return max_date ; } }"
"Use $conn$ connection to execute SQL statement ( get all columns in frame_roundtrip based on $name$ ) and get all the data, convert query result into dict, store it as list and return it.","public List testRoundtrip ( JdbcTemplate conn , String name ) { List query = conn . query ( "" select * from frame_roundtrip where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }"
"Set up SQL ( query all columns in the DATABASES table based on $DATABASE_SERVER$ and $DATABASE_URI$ ) , execute SQL based on $conn$ and get the first piece of data, and return the data.","public Object createDatabase ( JdbcTemplate conn , String DATABASE_SERVER , String DATABASE_URI , String id ) { List log_starts = conn . query ( "" select * from DATABASES where DATABASE_SERVER = ? and DATABASE_URI = ? "" , new Object [ ] { DATABASE_SERVER , DATABASE_URI } , new BeanPropertyRowMapper ( List . class ) ) ; return log_starts . get ( 0 ) ; }"
"Get email and password from the page. If the length is 0 when use $db$ to execute SQL ( query the data of id column in the users table based on email and password ) , return ""Incorrect Email or Password"". otherwise, return the jump command ""/ database"".","public Object processLogin ( HttpSession request , JdbcTemplate db ) { Object email = request . getAttribute ( "" email "" ) ; Object password = request . getAttribute ( "" password "" ) ; List result = db . query ( "" select id from users where email = ?, and password = ? "" , new Object [ ] { email , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return "" Incorrect Email or Password. "" ; } else { return "" /database "" ; } }"
"If the ""current_user"" obtained by $session$.get method is an empty list, return 'index' after processing using the url_for and redirect methods. Otherwise, execute SQL ( query all columns in Books ) with $conn$, get all the data and return.","public Object search ( JdbcTemplate conn , HttpSession session ) { if ( session . getAttribute ( "" current_user "" ) == null ) { return "" index "" ; } else { List results = conn . query ( "" select * from books "" , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } }"
Get the connection through $admin_engine$. Execute SQL ( query the val information in the DATABASE table based on $DATAid$ ) and get all data. Close the connection and return the query results.,"public List teardownDb ( DataSource admin_engine , String DATAid ) { JdbcTemplate conn = new JdbcTemplate ( admin_engine ) ; List valsql = conn . query ( "" select val from database where dataid = ? "" , new Object [ ] { DATAid } , new BeanPropertyRowMapper ( List . class ) ) ; return valsql ; }"
Use $conn$ to execute SQL ( query all columns in the books table when title equals $myString$ ) and get all the data. Use for loop to print each item in the query results.,"public void bookQuery ( JdbcTemplate conn , String myString ) { List selections = conn . query ( "" select * from books where title = ? "" , new Object [ ] { myString } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object book : selections ) { System . out . println ( book ) ; } }"
Use the $conn$ connection to execute the SQL statement ( query all columns in the books table based on $isbn$ and $title$ ) and get all the data. Use for loop iterate through the query results and print them.,"public void queryBooks ( JdbcTemplate conn , String isbn , String title ) { List res = conn . query ( "" select * from books where isbn = ? and title = ? "" , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : res ) { System . out . println ( i ) ; } }"
"Execute the SQL statement through $session$ ( query the first piece of title data in the commands table using $id$ ) , make sure $session$ is closed, and return all the query results.","public List countAllCommandsOnHost ( JdbcTemplate session , String id ) { List out = session . query ( "" select title from commands where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return out ; }"
"If the request method to execute request is POST, use $conn$ to execute SQL ( query username in users based on $book_id$ ) , get the first piece of data, and finally return the data. Otherwise, return the rendered book.html.","public Object queryBook ( HttpRequest request , JdbcTemplate conn , String book_id ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List usernames = conn . query ( "" select username from users where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; return usernames . get ( 0 ) ; } else { return "" book.html "" ; } }"
"Use the $conn$ cursor method to execute SQL ( get all the columns in mobile_homes where home is $home$ ) and get the first data, then use the for loop to convert each item of the query result to a list type and return the list content.","public List mobileHomesEndpoint ( JdbcTemplate conn , String home ) { List results = conn . query ( "" select * from mobile_homes where home = ? "" , new Object [ ] { home } , new BeanPropertyRowMapper ( List . class ) ) ; List mh_data = new ArrayList ( ) ; for ( Object result : results ) { mh_data . add ( result ) ; } return mh_data ; }"
"Try to use $conn$ to execute SQL ( query all the query results of all the information in the datasourceId table based on $countTotal$ ) , and use for loop to insert the data one by one into a list, and return this list. If an Exception occurs during execution, return the 'error' that converted to list.","public Object getNA ( JdbcTemplate conn , String countTotal ) { try { List query = conn . query ( "" select * from datasourceid where counttotal = ? "" , new Object [ ] { countTotal } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object i : query ) { result . add ( i ) ; } return result ; } catch ( Exception e ) { return "" error "" ; } }"
"connect to the database via $engine$, try to execute the SQL ( get all the columns in the Table according to $user$ ) and get all the data. Return the obtained result and print an exception if a ValueError exception occurs during execution.","public List updateTable ( DataSource engine , String user ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; try { List rs = con . query ( "" select * from table where user = ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Execute the SQL statement using $conn$ ( query all columns in the nodes where id_node is $id$ ) and get all the data, print the query results, and use jsonify to return the query results.","public JSONArray test ( JdbcTemplate conn , String id ) { List infor_node = conn . query ( "" select * from nodes where id_node = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( infor_node ) ; return JSONObject . parseArray ( infor_node . toString ( ) ) ; }"
"Get the database engine through $uri$. Try to establish a connection, execute the SQL statement ( query the id column in the ROLE table according to $user_name$ ) , get all the data, close the connection, and return the query results. If an Exception is caught, print the exception.","public List droUser ( DataSource uri , String user_name ) { try { JdbcTemplate conn = new JdbcTemplate ( uri ) ; List res = conn . query ( "" select id from role where user_name = ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Use $conn$ to execute SQL ( query the year information in the count_vectors table based on $corpusid$ ) and get all the query results. Use for loop to print each of these elements of the query results. Finally, return the query results.","public List loadSparsVectorDataStructures ( JdbcTemplate conn , String corpusid ) { List texts = conn . query ( "" select year from count_vectors where corpusid = ? "" , new Object [ ] { corpusid } , new BeanPropertyRowMapper ( List . class ) ) ; List years = new ArrayList ( ) ; for ( Object i : texts ) { years . add ( i ) ; } return years ; }"
Use $conn$ to execute SQL ( get the login column in the USER table based on $id$ ) and get all the data. Finally return the query results.,"public List getRecord ( JdbcTemplate conn , String id ) { List results = conn . query ( "" select login from user where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Get the database engine through $db$, where the echo parameter is True, then connect to the database and execute the SQL ( get the webname column in the web table based on $url$ ) . Use for loop to store the 0th element of each item of the query result as list, and finally return the list contents""","public List selectValue ( DataSource db , String url ) { JdbcTemplate c = new JdbcTemplate ( db ) ; List results = c . query ( "" select webname from web where url = ? "" , new Object [ ] { url } , new BeanPropertyRowMapper ( List . class ) ) ; List webnames = new ArrayList ( ) ; for ( Object result : results ) { webnames . add ( JSONObject . parseObject ( result . toString ( ) ) . get ( 0 ) ) ; } return webnames ; }"
"Use $conn$ to execute SQL ( get the origin column of flights based on $destination$ ) , get all the data, use for loop to print the origin column data in f format for each item of the query result, and finally return the query result.","public List main ( JdbcTemplate conn , String destination ) { List flights = conn . query ( "" select origin from flights where destination = ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( JSONObject . parseObject ( flight . toString ( ) ) . getString ( "" origin "" ) ) ; } return flights ; }"
"Use $conn$ to execute SQL ( get all columns in the chapters table based on $quiz_type$ ) and get all the data. If the query result is true, return the query result.","public List preProcess ( JdbcTemplate conn , String quiz_type ) { List results = conn . query ( "" select * from chapters where quiz_type = ? "" , new Object [ ] { quiz_type } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }"
"Get the database engine with $db_string$ and make the connection, execute the SQL statement ( get the id_filme column in the Filme where titulo is $titulo$ ) and get all the data. Return the result of a query after disconnecting the database.","public List verificaIdFilme ( DataSource db_string , String titulo ) { JdbcTemplate connection = new JdbcTemplate ( db_string ) ; List results = connection . query ( "" select id_filme from filme where titulo = ? "" , new Object [ ] { titulo } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Try to set the SQL statement: Query the number of all columns from the table table, use $conn$ to execute the SQL statement to get all the data and return. If an Exception occurs, use logging.error ( ) to return exception information.","public List countTableRows ( JdbcTemplate conn ) { try { List res = conn . query ( "" select count(*) from table "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Execute SQL with $conn$ ( get the TIMESTAMP column in the eq_eod_data table processed by the maximum function according to $id$ ) , get all the data, and finally return the 0th element of the 0th row of the query result.","public Object getLastloadedtime ( JdbcTemplate conn , String id ) { List ts = conn . query ( "" select max(timestamp) from eq_eod_data where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( ts . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }"
"Use $e$ to connect the database and execute SQL ( get the date column in the GBP table according to $id$ ) , get all the data, then use for loop to store each item of the query result as a list type and return.","public List getDates ( DataSource e , String id ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List dates = conn . query ( "" select date from GBP where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return dates ; }"
"Execute the SQL with $conn$ ( get all the columns in the books where isbn is $searchstring$, author is $searchstring$ and title is $searchstring$ ) and get all the data, and finally return the rendered ""search.html"" with the rbboks parameter as the result of the query.","public String search ( JdbcTemplate conn , String searchstring , Model model ) { List rbooks = conn . query ( "" select * from books where isbn = ? and author = ? and title = ? "" , new Object [ ] { searchstring , searchstring , searchstring } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rbooks "" , rbooks ) ; return "" search.html "" ; }"
"Try to use $conn$ to execute SQL ( get the tablename column in the 'table' table according to $table_id$ ) , get the first piece of data and return the query result. If an exception occurs during execution, the exception is printed.","public List searchTable ( JdbcTemplate conn , String table_id ) { try { List tb = conn . query ( "" select tablename from table where table_id = ? "" , new Object [ ] { table_id } , new BeanPropertyRowMapper ( List . class ) ) ; return tb ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Use the $conn$ connection to execute the SQL statement ( based on all columns in the date_parse where the datetime is $datetime$ ) and get all the data, set the assertion that the return result is not an empty list, and then return the data.","public List containPercentsCharacterQuery ( JdbcTemplate conn , String datetime ) { List texts = conn . query ( "" select * from date_parse where datetime = ? "" , new Object [ ] { datetime } , new BeanPropertyRowMapper ( List . class ) ) ; assert texts . size ( ) != 0 ; return texts ; }"
"Use $conn$ to execute SQL ( query all columns in the drop_table according to $name_table$ ) , get all the data, and return the query result.","public List dropTable ( JdbcTemplate conn , String name_table ) { List result = conn . query ( "" select * from drop_table where name_table = ? "" , new Object [ ] { name_table } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Try to use $conn$ to execute SQL ( query all columns in the new_table_name table ) and get the first piece of data. * Return the query results. If the result appears, it will be returned directly.","public Object dropTable ( JdbcTemplate conn ) { try { List values = conn . query ( "" select * from new_table_name "" , new BeanPropertyRowMapper ( List . class ) ) ; return values . get ( 0 ) ; } catch ( Exception e ) { return null ; } }"
"Use $conn$ to execute SQL ( get all the columns in the weburls table where url is $url$ ) and get all the data, then use the for loop to store the list type for each item of the query result, and finally return the length of the list content.","public int urIsInDatabase ( JdbcTemplate conn , String url ) { List results = conn . query ( "" select * from weburls where url = ? "" , new Object [ ] { url } , new BeanPropertyRowMapper ( List . class ) ) ; return results . size ( ) ; }"
"Use $conn$ to execute SQL ( get all the columns of statusCode based on $stateId$ ) , get all the data, and finally return the obtained result.","public List getStateCode ( JdbcTemplate conn , String stateId ) { List res = conn . query ( "" select * from statuscode where stateid = ? "" , new Object [ ] { stateId } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Set the SQL statement ( query the ID in the POST where the id of blog is $BLOG_ID$ ) , execute the SQL statement with $conn$, and query the for loop iterates through all the query results and print them.","public void postIter ( JdbcTemplate conn , String BLOG_ID ) { List results = conn . query ( "" select id from post where blog_id = ? "" , new Object [ ] { BLOG_ID } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : results ) { System . out . println ( row ) ; } }"
"Use $host$ to get the database engine, use orm's sessionmaker to bind $engine$, execute SQL through the Session method ( get all the columns processed by the counting method in the stucco_evolution based on $id$ ) , get all the data, and finally return the query result.","public List testEvolveCompat ( DataSource host , String id ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; List rows = engine . query ( "" select count(*) from stucco_evolution where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }"
Try to use $conn$ to execute the SQL statement ( select all the columns in the books where isbn is $isbn$ ) and return with all the data. Returns False if an exception occurs.,"public Object selectValue ( JdbcTemplate conn , String isbn ) { try { List results = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { return false ; } }"
"Set up the SQL statement（Use the format ( ) function to format the output string and query all columns in the user where the id of user is $user_id$ ) , execute the SQL statement with the $conn$ connection to get all the data and return.","public List getDevtrafficData ( JdbcTemplate conn , String user_id ) { List userexin = conn . query ( "" select * from user where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return userexin ; }"
"Get the database engine and establish a connection. Set the SQL statement ( query all the columns in the cars table based on $value$ ) , execute the SQL and get all the data. Set the assertion to determine whether the query result length is equal to 1.","public void testFetchall ( JdbcTemplate conn , String value ) { List rows = conn . query ( "" select * from cars where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; assert rows . size ( ) == 1 ; }"
Get the database engine and establish a connection through $DB$. Execute the SQL statement ( query the first name data in the sample_table table based on $id$ ) and return the query result.,"public Object main ( DataSource DB , String id ) { JdbcTemplate connection = new JdbcTemplate ( DB ) ; List outs = connection . query ( "" select name from sample_table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return outs . get ( 0 ) ; }"
"Try to use $session$ to connect the database and execute SQL ( get all the columns in the test_users table where user_id is $uid$ ) , get all the data, and return the query results; otherwise, pass it.","public List getUsers ( DataSource session , String uid ) { try { JdbcTemplate engine = new JdbcTemplate ( session ) ; List users = engine . query ( "" select * from test_users where user_id = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; return users ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the books table based on $search$ ) , get the first query result, and return the rendered ""search.html"" page, where the parameter rows is the query result; otherwise, return the rendered ""error.html"" page, where the parameter message is set to ""Sorry"".","public String search ( HttpRequest request , JdbcTemplate conn , String search , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select * from books where search = ? "" , new Object [ ] { search } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rows "" , rows . get ( 0 ) ) ; return "" search.html "" ; } else { return "" error.html "" ; } }"
"Execute SQL with $conn$ ( query all columns in the Bars table according to $style$ ) , get all the query results, use for loop to convert each of the query results into dict, store them in list, and return this list.","public List getBars ( JdbcTemplate conn , String style ) { List rs = conn . query ( "" select * from bars where style = ? "" , new Object [ ] { style } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }"
"Use $conn$ to execute SQL ( get the gamecategorymap_id column in the GameCategoryMap table where game_id is $gid$ and category_id is $cid$ ) and get the first row of data. If the result is true, convert the 0th element of the query result to list and return; otherwise, return None.","public Object gamecategorymapId ( JdbcTemplate conn , String gid , String cid ) { List results = conn . query ( "" select gamecategorymap_id from gamecategorymap where game_id = ? and category_id = ? "" , new Object [ ] { gid , cid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { Object gamecategorymap_id = JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . get ( 0 ) ; return gamecategorymap_id ; } }"
"Use $db$ to get the database engine. Use sessionmaker ( ) to create a configured DBSession class and bind the database engine through 'bind'. Instantiate DBSession, and then execute the SQL statement: Query all NAMES data in the driver table. Return the query results.","public List init ( DataSource db ) { JdbcTemplate session = new JdbcTemplate ( db ) ; List items = session . query ( "" select NAMES from driver "" , new BeanPropertyRowMapper ( List . class ) ) ; return items ; }"
"Create the database engine through $sqlite$. Use the engine to execute SQL ( query all columns in the myengine table based on $activities$ ) and get all the data. Finally, return the query result.","public List testMinimal ( DataSource sqlite , String activities ) { JdbcTemplate e = new JdbcTemplate ( sqlite ) ; List data = e . query ( "" select * from myengine where activities = ? "" , new Object [ ] { activities } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }"
"Execute SQL with $conn$ ( query all columns in the active_stats table according to $value$ ) , get all the query results, use for loop traverse all obtained query results, insert each piece of data into a list, and return the list.","public List getActiveStats ( JdbcTemplate conn , String value ) { List result_proxy = conn . query ( "" select * from active_stats where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List active_stats_df = new ArrayList ( ) ; for ( Object row : result_proxy ) { active_stats_df . add ( row ) ; } return active_stats_df ; }"
"Get database engine by $db_string$, set SQL statement ( query all columns in tb_vendedores table based on $id$ ) , execute SQL and get all the data. Return the query result.","public List selectValue ( DataSource db_string , String id ) { JdbcTemplate db = new JdbcTemplate ( db_string ) ; List vendedores = db . query ( "" select * from tb_vendedores where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return vendedores ; }"
"If the request method is ""POST"", use $conn$ to execute SQL ( query the username column in the users table based on $password$ ) , get all the query results, and return them. Otherwise, return the rendered ""register.html"" page.","public Object register ( HttpRequest request , JdbcTemplate conn , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select username from users where password = ? "" , new Object [ ] { password } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } else { return "" register.html "" ; } }"
"Get the database engine through $url$. Set the SQL statement ( query all columns in the 'testtable' table where id is $id$ ) , execute SQL, get all the data, and return the 0th element of the execution result.","public Object searchDefaultTable ( DataSource url , String id ) { JdbcTemplate engine = new JdbcTemplate ( url ) ; List results = engine . query ( "" select * from testtable where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }"
"Get the database engine and establish a connection through $db$. Execute the SQL statement ( query all the columns in the Alltypes table ) , execute the SQL statement to get the first piece of data, close the database connection, and return the query results after jsonify processing.","public JSONObject getState ( DataSource db ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List res = conn . query ( "" select * from Alltypes "" , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( res . get ( 0 ) . toString ( ) ) ; }"
"Get the database engine and establish a connection through $localhost$. Set the SQL statement ( query the user data in the mysql table according to $value$ ) , execute SQL to get all the data, close the database connection, and return the execution result.","public List index ( DataSource localhost , String value ) { JdbcTemplate connection = new JdbcTemplate ( localhost ) ; List results = connection . query ( "" select user from mysql where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use $conn$ to execute SQL ( query all columns in the user_table according to $dirty$ ) , get all the data, and set the assertion to determine whether the query result length is greater than 0.","public void testIsModified ( JdbcTemplate conn , String dirty ) { List ch = conn . query ( "" select * from user_table where dirty = ? "" , new Object [ ] { dirty } , new BeanPropertyRowMapper ( List . class ) ) ; assert ch . size ( ) > 0 ; }"
"Use $connection_string$ to get the database engine and connect the database, try to execute SQL ( get the data column in the sql table according to $name$ ) , get all the data, return the query results, and finally ensure that the connection is closed.","public List getData ( DataSource connection_string , String name ) { JdbcTemplate conn = new JdbcTemplate ( connection_string ) ; try { List datas = conn . query ( "" select time from comments where summary = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return datas ; } finally { return null ; } }"
"If the request module sends the request as GET, render and return 'login.html'. Otherwise, execute SQL ( query all columns in login where username is $username$ ) using the $conn$ connection and get all the data back to the query.","public Object queryLogin ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List my_login = conn . query ( "" select * from login where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return my_login ; } else { return "" login.html "" ; } }"
"SQL is executed with $conn$ ( obtain isbn, title, author, year where isbn is $isbn$, title is $title$, author is $author$, year is $year$ in books ) and all the data in four columns in the books ) and return the result of the query.","public List main ( JdbcTemplate conn , String isbn , String title , String author , String year ) { List res = conn . query ( "" select isbn, title, author, year from books where isbn = ? and title = ? and author = ? and year = ? "" , new Object [ ] { isbn , title , author , year } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Execute SQL with $conn$ ( query the origin column in the flights table according to $destination$ ) , get all the query results, and use for loop traversal to print all the query results.","public void main ( JdbcTemplate conn , String destination ) { List flights = conn . query ( "" select origin from flights where destination = ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( flight ) ; } }"
Execute the SQL using $db$ ( query tobs in the Measurement table where date is $date$ ) and get all the data. Use A for loop to store each query result in a list and use jsonify to return the processed list.,"public JSONArray getTobs ( JdbcTemplate db , String date ) { List data = db . query ( "" select tobs from measurement where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object record : data ) { list . add ( record ) ; } return JSONObject . parseArray ( list . toString ( ) ) ; }"
Execute the SQL using $db$ ( query token1_id_str in the pde_pool_pairs based on $token_id$ ) and get all the data. Use the for loop to put element 0 for each item in the query result into the list and return.,"public List getToken ( JdbcTemplate db , String token_id ) { List data = db . query ( "" select token1_id_str from pde_pool_pairs where token_id = ? "" , new Object [ ] { token_id } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object i : data ) { result . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return result ; }"
"Use $conn$ to execute SQL ( get the clientes in table based on $saldo$ ) , get all the data and return the query result.","public List recargaSaldo ( JdbcTemplate conn , String saldo ) { List res = conn . query ( "" select clientes from table where saldo = ? "" , new Object [ ] { saldo } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Execute SQL with $conn$ ( query all columns in the query table according to $id$ ) , use for loop to traverse all the obtained query results, and print each piece of query data.","public void fetchByQuery ( JdbcTemplate conn , String id ) { List fetchQuery = conn . query ( "" select * from query where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object data : fetchQuery ) { System . out . println ( data ) ; } }"
"If the string $flag$ lowercase version is' ture', use $conn$ to execute SQL ( query the first row of data in the TIMESTAMP table based on $CURRENT$ ) and return the data. If the string $flag$ lowercase version is' false', return False.","public Object convertDefaultArg ( JdbcTemplate conn , String CURRENT , String flag ) { if ( flag . equals ( "" true "" ) ) { List sa = conn . query ( "" select * from timestamp where current = ? "" , new Object [ ] { CURRENT } , new BeanPropertyRowMapper ( List . class ) ) ; return sa . get ( 0 ) ; } else if ( flag . equals ( "" false "" ) ) { return false ; } else { return null ; } }"
"If invert $username$, return the rendered ""error.html"", then use $conn$ to execute the SQL ( get the email column in the users table based on $username$ ) and get the first piece of data. If the query result is not None, then return the query result.","public Object search ( JdbcTemplate conn , String username ) { if ( username == null ) { return "" error.html "" ; } else { List users = conn . query ( "" select email from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return null ; } else { return users . get ( 0 ) ; } } }"
"Connect the database through $engine$. Try to set up the SQL statement ( query the 'column' column in the database table according to $table$ ) , execute SQL, get all the data, return the query results, and finally close the connection.","public List getSampleData ( DataSource engine , String table ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; try { List result = connection . query ( "" select column from database where table = ? "" , new Object [ ] { table } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } finally { return null ; } }"
"Use $db$ to execute SQL ( get the auther column in the books table based on $isbn$, $title$ and $year$ ) , get the first piece of data, and finally return the query result.","public Object main ( JdbcTemplate db , String isbn , String title , String year ) { List authers = db . query ( "" select auther from books where isbn = ? and title = ? and year = ? "" , new Object [ ] { isbn , title , year } , new BeanPropertyRowMapper ( List . class ) ) ; return authers . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( get all columns in the books table based on $isbn$ ) and get the first piece of data. If the query result is None, then return the rendered ""error.html"", otherwise return the rendered ""book.html"", where the book parameter is the query result.","public String book ( JdbcTemplate conn , String isbn , Model model ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" book "" , books . get ( 0 ) ) ; return "" book.html "" ; } }"
"Use $conn$ to execute the SQL statement ( query the first name data in the users based on $email$ ) , set the assertion to determine that the return result is not the empty list, and finally return the queried data.","public List testRawSql ( JdbcTemplate conn , String email ) { List out = conn . query ( "" select name from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; assert out . size ( ) > 0 ; return out ; }"
"Try to use $conn$ to execute SQL ( query all data in the user column of the books table based on $title$,$author$ and $pub_year$ ) and return the query results. If a ValueError exception occurs during execution, output error.","public List main ( JdbcTemplate conn , String title , String author , String pub_year ) { try { List feel = conn . query ( "" select user from books where title = ? and author = ? and pub_year = ? "" , new Object [ ] { title , author , pub_year } , new BeanPropertyRowMapper ( List . class ) ) ; return feel ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Set up sql ( query the player_id column in the Players table according to $player$ ) , use $conn$ to execute SQL and get all the query results. If the query result is obtained, return the 0th element of article 0; otherwise, return None.","public Object playerId ( JdbcTemplate conn , String player ) { List result = conn . query ( "" select player_id from players where player = ? "" , new Object [ ] { player } , new BeanPropertyRowMapper ( List . class ) ) ; Object player_id = JSONObject . parseObject ( result . get ( 0 ) . toString ( ) ) . get ( 0 ) ; return player_id ; }"
Use $conn$ to execute the SQL ( get the fullname column in the User table based on $name$ ) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.,"public List selectValue ( JdbcTemplate conn , String name ) { List results = conn . query ( "" select fullname from user where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List fullname = new ArrayList ( ) ; for ( Object result : results ) { fullname . add ( result ) ; } return fullname ; }"
"Use $conn$ to execute SQL ( query the name column in the passengers table according to $flight_id$ ) and get all the data. If the query result length is equal to 0, output ""fail""; otherwise, use for loop to traverse all the query results and output the name field of each query result.","public void main ( JdbcTemplate conn , String flight_id ) { List passengers = conn . query ( "" select name from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passengers . isEmpty ( ) ) { System . out . println ( "" fail "" ) ; } else { for ( Object passenger : passengers ) { System . out . println ( JSONObject . parseObject ( passenger . toString ( ) ) . getString ( "" name "" ) ) ; } } }"
"Set the SQL statement ( query the creator information in the $channels$ table where channel_name is $channel_name$ ) . Use $conn$ to execute the SQL statement, get all the query results and print them.","public void selectValue ( JdbcTemplate conn , String channel_name ) { List results = conn . query ( "" select creator from channels where channel_name = ? "" , new Object [ ] { channel_name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; }"
"Execute the SQL ( get the polyline column in the boundary_data table where adcode is $adcode$ ) with $conn$, get all the data, and return the query results.","public List update ( JdbcTemplate conn , String adcode ) { List res = conn . query ( "" select polyline from boundary_data where adcode = ? "" , new Object [ ] { adcode } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
Get the database engine through $AIRFLOW_SQL_ALCHEMY_CONN_KEY$. Execute SQL statement ( query the number of all columns in the dag table with tag as $tag$ ) and get the first piece of data. Return the query results.,"public Object getDagData ( DataSource AIRFLOW_SQL_ALCHEMY_CONN_KEY , String tag ) { JdbcTemplate engine = new JdbcTemplate ( AIRFLOW_SQL_ALCHEMY_CONN_KEY ) ; List data = engine . query ( "" select count(*) from dag where tag = ? "" , new Object [ ] { tag } , new BeanPropertyRowMapper ( List . class ) ) ; return data . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( query all the data in the idProduct column of the Product table based on $WName$ and $PCode$ ) , use for loop to traverse each query result, insert the data one by one into the list and return.","public List updateWebsite ( JdbcTemplate conn , String WName , String PCode ) { List engine = conn . query ( "" select idproduct from product where wname = ? and pcode = ? "" , new Object [ ] { WName , PCode } , new BeanPropertyRowMapper ( List . class ) ) ; return engine ; }"
"Create cursor by $conn$, set SQL ( query all information in user_table table based on $name$ ) , execute SQL and commit operation, print ""Total records of rows updated :"" and 'rowcount' attribute of cursor.","public void selectOperate ( DataSource conn , String name ) { JdbcTemplate cursor = new JdbcTemplate ( conn ) ; List data = cursor . query ( "" select * from user_table where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( "" Total records of rows updated : "" + data . size ( ) ) ; }"
Execute the SQL statement ( query all the columns of the table_name ) with $conn$ and print each item in the query result using the for loop.,"public void sqlite3ViaNames ( JdbcTemplate conn ) { List results = conn . query ( "" select * from table_name "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : results ) { System . out . println ( row ) ; } }"
"If the request module sends the request in a post method, use the $conn$ connection to execute SQL ( query the first author data in the books through $bid$ ) , render and return ""book.html"", where the bookInfo parameter is the query result; otherwise, render and return ""error.html"".","public Object bookInfo ( HttpRequest request , JdbcTemplate conn , String bid , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List book_outs = conn . query ( "" select author from books where bid = ? "" , new Object [ ] { bid } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" bookInfo "" , book_outs . get ( 0 ) ) ; return "" book.html "" ; } else { return "" error.html "" ; } }"
"Execute the SQL using $db$ ( query the information of name in the books where isbn is $isbn$ ) and get all the data. If the result of the query is None, return Error. Otherwise, return the query as a list.","public Object getBookName ( JdbcTemplate db , String isbn ) { List book_names = db . query ( "" select name from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book_names . isEmpty ( ) ) { return "" Error "" ; } else { return book_names ; } }"
"If $session$ gets the information about logged_in, get the connection through $eng$. Execute SQL ( query all columns in the logs table according to $ip$ ) , get all the data, pass the query result into the logs parameter and return the rendered 'settings.html' page. If the logged_in is not obtained, return the 'login' page through url_for and redirect.","public String settings ( DataSource eng , String ip , HttpSession session , Model model ) { if ( session . getAttribute ( "" logged_in "" ) != null ) { JdbcTemplate conn = new JdbcTemplate ( eng ) ; List result = conn . query ( "" select * from logs where ip = ? "" , new Object [ ] { ip } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" logs "" , result ) ; return "" settings.html "" ; } else { return "" /login "" ; } }"
"Try to use $conn$ to execute SQL ( query all columns in the event table based on $amount$ and $user_id$ ) and get all the data. Use for loop to store each piece of query results in a list. If a SQLAlchemyError exception occurs during execution, print the exception name as a string.","public Object makePledge ( JdbcTemplate conn , String amount , String user_id ) { try { List events = conn . query ( "" select * from event where amount = ? and user_id = ? "" , new Object [ ] { amount , user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return events ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Use $conn$ to execute SQL ( query all the query results of all the information in the artist table based on $rarity$ and $layout$ ) , use for loop to insert the data one by one into a list, and return this list.","public List generateAbridgedIndexSet ( JdbcTemplate conn , String rarity , String layout ) { List query = conn . query ( "" select * from artist where rarity = ? and layout = ? "" , new Object [ ] { rarity , layout } , new BeanPropertyRowMapper ( List . class ) ) ; List new_card_set = new ArrayList ( ) ; for ( Object i : query ) { new_card_set . add ( i ) ; } return new_card_set ; }"
"Execute the SQL ( get all the columns in the results where the name of user is $username$ ) with $conn$, get all the data, and return the query results.","public List dashboard ( JdbcTemplate conn , String username ) { List all_results = conn . query ( "" select * from results where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return all_results ; }"
"Execute the SQL statement with $conn$ ( get the book_id column in the book ) , get all the data, and print each item in the query results using the for loop.","public void searchBookId ( JdbcTemplate conn ) { List book_ids = conn . query ( "" select book_id from book "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : book_ids ) { System . out . println ( i ) ; } }"
"Connect to the database according to $session$. Try to execute the SQL statement ( get all the columns in the tooth where typeslice is $typeslice$ ) and get all the data, return all the query results. Return False if an exception occurs.","public Object dbConnect ( DataSource session , String typeslice ) { try { JdbcTemplate conn = new JdbcTemplate ( session ) ; List data = conn . query ( "" select * from tooth where typeslice = ? "" , new Object [ ] { typeslice } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; } catch ( Exception e ) { return false ; } }"
"Try to use $conn$ to execute SQL ( query all columns in the merged_imw table based on $mtr$ ) , get all the data, and return the query results. If an exception occurs, pass directly.","public Object queryPostGres ( JdbcTemplate conn , String mtr ) { try { List res = conn . query ( "" select * from merged_imw where mtr = ? "" , new Object [ ] { mtr } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return null ; } }"
"Execute the SQL with $conn$ ( get the name column in the accounts where the username is $name$ ) and get all the data, then set the assertion query result not equal to the list type.","public void testStrlen ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select name from accounts where username = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; }"
"Get the database engine and establish a connection through $db_uri$. Execute the SQL statement ( query all the columns in the database table according to $name$ ) , get all the data, close the connection, and return the query results.","public List tearDown ( DataSource db_uri , String name ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List e = conn . query ( "" select * from database where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return e ; }"
"Execute the SQL through $conn$ ( get the title column in the books table based on $isbn$ ) . If the number of rows of the query result is 0, return the rendered error.html. Then get all the query data and finally return the rendered results.html, where the books parameter is all the query data.","public String search ( JdbcTemplate conn , String isbn , Model model ) { List books = conn . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" books "" , books ) ; return "" results.html "" ; } }"
Get the database engine through $db_algorithms$ and further get the Session object. Execute the SQL statement ( query the engine column in the Sess table according to $maker$ ) and return all the obtained data.,"public List readTableBySql ( DataSource db_algorithms , String maker ) { JdbcTemplate session = new JdbcTemplate ( db_algorithms ) ; List row = session . query ( "" select engine from sess where maker = ? "" , new Object [ ] { maker } , new BeanPropertyRowMapper ( List . class ) ) ; return row ; }"
"Use $conn$ to execute SQL ( query the review_count in the book table based on $average_score$ ) and get the first piece of data. If the query result is None, return the serialized {error: Invalid}. Otherwise, return the query result.","public JSONObject reviewApi ( JdbcTemplate conn , String average_score ) { List reviews = conn . query ( "" select review_count from book where average_score = ? "" , new Object [ ] { average_score } , new BeanPropertyRowMapper ( List . class ) ) ; if ( reviews . isEmpty ( ) ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" error "" , "" Invalid "" ) ; return jsonObject ; } else { return JSONObject . parseObject ( reviews . get ( 0 ) . toString ( ) ) ; } }"
"If the request method of request is POST, use $conn$ to execute SQL ( query the onename in the books table when id equals $book_id$ ) and get the first piece of data. Return the rendered details.html and pass the query result to the bookone parameter","public String book ( HttpRequest request , JdbcTemplate conn , String book_id , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List bookones = conn . query ( "" select onename from books where id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" bookone "" , bookones . get ( 0 ) ) ; return "" details.html "" ; } else { return null ; } }"
"Get the database engine through $baasu$ and execute SQL ( get all the columns in the Temperature_table according to $lat$ ) , get all the data, and finally return the query result.","public List getTemperatures ( DataSource baasu , String lat ) { JdbcTemplate db = new JdbcTemplate ( baasu ) ; List json_temps = db . query ( "" select * from Temperature_table where lat = ? "" , new Object [ ] { lat } , new BeanPropertyRowMapper ( List . class ) ) ; return json_temps ; }"
"Get the database engine through $postgresql_uri$. Execute the SQL statement ( query the ROLE column in the database table according to $PASSWORD$ ) , get all the data, and return the query results.","public List selectDatabase ( DataSource postgresql_uri , String PASSWORD ) { JdbcTemplate engine = new JdbcTemplate ( postgresql_uri ) ; List res = engine . query ( "" select ROLE from database where PASSWORD = ? "" , new Object [ ] { PASSWORD } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"If $username$ is None, return to False. Otherwise, use $pg_root_engine$ to get the connection: set the SQL ( query the page information in the database where username is $username$ ) . Execute the SQL using the database connection and get all the data. Close the connection and return each item in the query result as a dict type.","public Object getPg ( DataSource pg_root_engine , String username ) { if ( username == null ) { return false ; } else { JdbcTemplate engine = new JdbcTemplate ( pg_root_engine ) ; List pg = engine . query ( "" select page from database where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return pg ; } }"
"Use $conn$ to execute SQL ( query the review_count in the ana_books table based on $isbn$ ) and get the first piece of data. Return Fasle if the query result is equal to None. Otherwise, return the query results.","public Object booksApi ( JdbcTemplate conn , String isbn ) { List review_counts = conn . query ( "" select review_count from ana_books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( review_counts . isEmpty ( ) ) { return null ; } else { return review_counts . get ( 0 ) ; } }"
"Connect to the database via $db_connect$ and execute SQL ( query the conments in the table_name table based on $status$ ) , get all the data, and finally return the result.","public List checkForRun ( DataSource db_connect , String status ) { JdbcTemplate conn = new JdbcTemplate ( db_connect ) ; List query = conn . query ( "" select conments from table_name where status = ? "" , new Object [ ] { status } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }"
Execute SQL with $conn$ ( get all columns in 'states' based on $tbl$ ) and get all the data. Finally convert each item in the query result into dictionary type and use jsonify to process 'States' and the dictionary content.,"public JSONObject states ( JdbcTemplate conn , String tbl ) { List States = conn . query ( "" select * from states where tbl = ? "" , new Object [ ] { tbl } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" States "" , States ) ; return jsonObject ; }"
"Set up SQL ( query the user_name column in the users table based on $user_id$ ) , execute SQL with $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List setupClass ( JdbcTemplate conn , String user_id ) { List results = conn . query ( "" select user_name from users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; List user_names = new ArrayList ( ) ; for ( Object result : results ) { user_names . add ( result ) ; } return user_names ; }"
"If the request request mode is POST, execute the SQL ( querying all columns in the users table where email is $email$ ) with $conn$ and get all the data. If the query data length is equal to 0, the rendered 'login.html', otherwise, return rendered 'login.html' and pass the query result to the data parameter.","public Object login ( HttpRequest request , JdbcTemplate conn , String email , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List data = conn . query ( "" select * from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data . isEmpty ( ) ) { return "" login.html "" ; } else { model . addAttribute ( "" data "" , data ) ; return "" login.html "" ; } } else { return null ; } }"
"Execute the SQL using $conn$ ( all columns in the RIDERS where the engine is $mock_engine$ ) . Set the assertion that the query result is not an empty list, and finally store element 0 for each item of data in the query result in the list and return it.","public List testSessionScope ( JdbcTemplate conn , String mock_engine ) { List result = conn . query ( "" select * from riders where engine = ? "" , new Object [ ] { mock_engine } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) > 0 ; List list = new ArrayList ( ) ; for ( Object r : result ) { list . add ( JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ) ; } return list ; }"
"Use $conn$ to execute SQL ( query the name in the player_master table based on $player_id$ ) and get all the data. Using for loop, each time print the strings concatenated PLAYER_NAME = with the string type of 0th element of each item in the query result.","public void getPlayerName ( JdbcTemplate conn , String player_id ) { List result = conn . query ( "" select name from player_master where player_id = ? "" , new Object [ ] { player_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( "" PLAYER_NAME = "" + JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } }"
"Use the cursor method of $db$ to execute SQL ( get all the columns in the DATABASE table according to $name$ ) , get the first piece of data, then ensure that the $db$ connection is closed, and finally return the query result.","public Object getDatabase ( DataSource db , String name ) { JdbcTemplate cursor = new JdbcTemplate ( db ) ; List data = cursor . query ( "" select result from database where id = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return data . get ( 0 ) ; }"
"Connect the database with $testing$, try to execute SQL ( query all columns in the users table based on $name$ ) , get all the query results, return the query results, and make sure that the connection is closed.","public Object testFlulsh ( DataSource testing , String name ) { JdbcTemplate cursor = new JdbcTemplate ( testing ) ; try { List flulsh = cursor . query ( "" select * from users where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return flulsh ; } finally { return null ; } }"
"If the request module sends the request as post, try to execute SQL ( query the first id in users by $username$ ) through $conn$ connection and return the query results; if there is an exception, throw out through raise.","public Object queryId ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { List user_ids = conn . query ( "" select id from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return user_ids . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } } else { return null ; } }"
"Use the string format method to set the SQL ( query the tn in the mytable based on $vt$ ) . Use $conn$ to execute SQL and get all the data. Finally, return the query results.","public List queryRow ( JdbcTemplate conn , String vt ) { List res = conn . query ( "" select tn from mytable where vt = ? "" , new Object [ ] { vt } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Set up SQL ( query the description column in the Kipartman_Parts table based on $name$ ) , execute SQL with $connection$ and get all the query results, use for loop to iterate through all the query results and print each piece of data. Close the connection and return the query result.","public List fetch ( JdbcTemplate connection , String name ) { List descriptions = connection . query ( "" select description from kipartman_parts where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : descriptions ) { System . out . println ( row ) ; } return descriptions ; }"
"Try to use $url$ to get the database engine and execute the SQL ( get all columns from SCHEMATA where SCHEMA_NAME is $database$ ) and get all the data, return the query result, or return False.","public Object databaseExists ( DataSource url , String database ) { try { JdbcTemplate engine = new JdbcTemplate ( url ) ; List result = engine . query ( "" select * from schemata where schema_name = ? "" , new Object [ ] { database } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return false ; } }"
"Use the $db_conn$ connection to execute SQL ( query all columns in the imdb_actormovies table through $id$ ) , get all the data, return query results of type list.","public List getactorsMovie ( JdbcTemplate db_conn , String id ) { List db_result = db_conn . query ( "" select * from imdb_actormovies where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }"
"Get the database engine through $db$, and the echo parameter is set to False. Try to execute the SQL statement ( query all the columns in the users table according to $number$ ) , get all the data, and return the query results. If an OperationalError exception is caught, return False.","public Object chkDB ( DataSource db , String number ) { try { JdbcTemplate engine = new JdbcTemplate ( db ) ; List result = engine . query ( "" select * from users where number = ? "" , new Object [ ] { number } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return false ; } }"
"Use the $testing$ to connect the database and execute SQL ( get the foo column in the test table according to $id$ ) , get the first piece of data, and finally return the query result.","public List getFoo ( DataSource testing , String id ) { JdbcTemplate conn = new JdbcTemplate ( testing ) ; List result = conn . query ( "" select foo from test where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
Try to use $conn$ to execute SQL ( get all columns in query_users table based on $user_id$ ) . Then set assertion to get all data with non-zero length and finally make sure $conn$ connection is closed.,"public void testRollbackOffConn ( JdbcTemplate conn , String user_id ) { try { List result = conn . query ( "" select * from query_users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; } finally { } }"
"Use $e$ to establish the connection, set up the SQL ( query the price column in the cars table based on $carid$ ) , execute the SQL and get all the query result based on $conn$, and return the execution result.","public List selectValue ( DataSource e , String carid ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List prices = conn . query ( "" select price from cars where carid = ? "" , new Object [ ] { carid } , new BeanPropertyRowMapper ( List . class ) ) ; return prices ; }"
Connect to the database through $conn$ and execute SQL ( query all flight data in flights based on $flight_id$ ) . Use for loop to store the query results into list and return all the query results.,"public List flight ( JdbcTemplate conn , String flight_id ) { List flights = conn . query ( "" select flight from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; List res = new ArrayList ( ) ; for ( Object row : flights ) { res . add ( row ) ; } return res ; }"
"Execute the SQL statement via $conn$ ( query 'author' and 'year' in the books table whose isbn is $ID$ ) . If the number of rows of execution results is 0, render and return error.html. Otherwise, render and return results.html, where the books parameter is all the obtained results.","public String search ( JdbcTemplate conn , String ID , Model model ) { List books = conn . query ( "" select author, year from books where isbn = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" books "" , books ) ; return "" results.html "" ; } }"
"Use $conn$ to execute SQL ( query the first row of data in the flights table according to $gh_id$ ) , and if no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page, where the flight parameter is the query result.","public String flight ( JdbcTemplate conn , String gh_id , Model model ) { List flights = conn . query ( "" select * from flights where gh_id = ? "" , new Object [ ] { gh_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" flight "" , flights . get ( 0 ) ) ; return "" flight.html "" ; } }"
Execute SQL through the $conn$ connection ( query all columns in the users based on $email$ ) to get the first piece of data and return if the obtained data is not empty.,"public Object validateEmail ( JdbcTemplate conn , String email ) { List users = conn . query ( "" select * from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return null ; } else { return users . get ( 0 ) ; } }"
Use dbsession method of $conn$ to execute the SQL ( get the STGeometryType column in SHAPE based on $name$ ) and get all the data. Finally return the query result.,"public List findGisDatatypeOftable ( JdbcTemplate conn , String name ) { List st_type = conn . query ( "" select stgeometrytype from shape where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return st_type ; }"
"Execute the SQL ( get all the columns in the books where ratings_count is $ratings_count$ ) with $conn$, get all the data, and finally return the query result content handled by jsonify.","public JSONArray selectRecords ( JdbcTemplate conn , String ratings_count ) { List res = conn . query ( "" select * from books where ratings_count = ? "" , new Object [ ] { ratings_count } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( res . toString ( ) ) ; }"
"Execute the SQL statement ( select all columns in the books table where title is $title$ ) with $conn$ and get all the data. Return the rendered search_result.html page, where the results parameter is the query result.","public String selectBooksValue ( JdbcTemplate conn , String title , Model model ) { List book_res = conn . query ( "" select * from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , book_res ) ; return "" search_result.html "" ; }"
"Connect the database with $testing$, execute SQL ( query the user_name column in the users table according to $user_id$ ) , get all the query results, close the connection, and return the query results.","public List testMultipleTwoPhase ( DataSource testing , String user_id ) { JdbcTemplate conn = new JdbcTemplate ( testing ) ; List res = conn . query ( "" select user_name from users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Experiment with SQL using $conn$ ( query schema_name information in schema where schema_id is $schema_id$ ) , and save element 0 for each item of all the data in the list. If an exception occurs, the exception is thrown based on the specific information of the exception. Finally, return query data.","public List getDatabases ( JdbcTemplate conn , String schema_id ) { List databases = new ArrayList ( ) ; try { List crs = conn . query ( "" select schema_name from schema where schema_id = ? "" , new Object [ ] { schema_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object line : crs ) { databases . add ( JSONObject . parseObject ( line . toString ( ) ) . get ( 0 ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } return databases ; }"
"Try to use $db$ to execute SQL ( get the result column in the meishi_collection table where taskid is $id$ ) and get all the data. Use for loop to store each item in the query result as a list type. If an exception occurs during execution, the exception is printed.","public Object getResult ( JdbcTemplate db , String id ) { try { List rs = db . query ( "" select result from meishi_collection where taskid = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Get the database engine through $SQLALCHEMY_DATABASE_URI$ and establish a connection. Execute the SQL statement ( query the ip column in the logs table according to $user_agent$ ) , get all the data, and return the query results.","public List logKaydet ( DataSource SQLALCHEMY_DATABASE_URI , String user_agent ) { JdbcTemplate con = new JdbcTemplate ( SQLALCHEMY_DATABASE_URI ) ; List ips = con . query ( "" select ip from logs where user_agent = ? "" , new Object [ ] { user_agent } , new BeanPropertyRowMapper ( List . class ) ) ; return ips ; }"
Use $conn$ to execute SQL ( query the otu_id in the samples table based on $sample_values$ ) and get all the results. Store the 0th element of each item of the query result in list and return with the serialization method.,"public List otuIdValues ( JdbcTemplate conn , String sample_values ) { List results = conn . query ( "" select otu_id from samples where sample_values = ? "" , new Object [ ] { sample_values } , new BeanPropertyRowMapper ( List . class ) ) ; JSONArray otus = new JSONArray ( ) ; for ( Object item : results ) { otus . add ( JSONObject . parseObject ( item . toString ( ) ) . get ( 0 ) ) ; } return otus ; }"
"connect to the database based on $engine$. Set up SQL ( query name column in 'table' table based on 'id': $tid$ ) , execute SQL and get all the query results, return query results.","public List selectValue ( DataSource engine , String tid ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List names = con . query ( "" select name from table where id = ? "" , new Object [ ] { tid } , new BeanPropertyRowMapper ( List . class ) ) ; return names ; }"
"If the request method is POST, use $conn$ to execute SQL ( query all columns in the users table based on $uname$ ) and get all the query results. If there are query results, return the command redirected to / search. Finally return the 'login.html' page.","public Object login ( HttpRequest request , JdbcTemplate conn , String uname ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List col = conn . query ( "" select * from users where uname = ? "" , new Object [ ] { uname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( col . isEmpty ( ) ) { return "" login.html "" ; } else { return "" /search "" ; } } else { return "" login.html "" ; } }"
"Use the string format method to set the SQL ( query all the columns in the table where table_id is $id$ ) and print the SQL. , takes the connection in $db_engine$ and tries to execute the following code: execute the SQL using the connection and get all the data, print each piece of data using the for loop; close the connection and return the data. If an exception occurs, the exception's details are printed.","public List dbCgetAllDataonnect ( DataSource db_engine , String id ) { try { JdbcTemplate engine = new JdbcTemplate ( db_engine ) ; List result = engine . query ( "" select * from table where table_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } return result ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Execute SQL with $conn$ ( query all columns in the voos table based on $origem$ and $destino$ ) , get all the query results, and use for loop to print each item of the query results.","public void main ( JdbcTemplate conn , String origem , String destino ) { List voos = conn . query ( "" select * from voos where origem = ? and destino = ? "" , new Object [ ] { origem , destino } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object voo : voos ) { System . out . println ( voo ) ; } }"
"Get the database engine and establish a connection through $db_url$. Execute the SQL statement ( query all the columns in the postgis table according to $geochat$ ) , get all the data, close the connection, and print the query results.","public void create ( DataSource db_url , String geochat ) { JdbcTemplate conn = new JdbcTemplate ( db_url ) ; List cope = conn . query ( "" select * from postgis where geochat = ? "" , new Object [ ] { geochat } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( cope ) ; }"
"Use $DB_CONNECT_STRING$ to get the database engine, where the max_overflow parameter is 5, then execute the SQL ( get all columns in the spider_jam_post where baseurl is $category$ ) and get the first data, and return the query result.","public Object queryPostsByCategory ( DataSource DB_CONNECT_STRING , String category ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List results = engine . query ( "" select * from spider_jam_post where baseurl = ? "" , new Object [ ] { category } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }"
"Try to use $conn$ to execute SQL ( get submitter column in the archive table based on $action_id$ ) and get all the data. Then return the query results. If exception occurs during execution, print the exception.","public List selectValue ( JdbcTemplate conn , String action_id ) { try { List results = conn . query ( "" select submitter from archive where action_id = ? "" , new Object [ ] { action_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Try to use $engine$ to connect to the database and execute SQL ( get all columns in the 'concat_table' table based on $value$ ) and get all the data. Then return the query results. If exception occurs during execution, print the exception.","public List comToPol ( DataSource engine , String value ) { try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List results = conn . query ( "" select * from concat_table where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Use $conn$ to execute SQL ( query the origin column in the flight table based on $dest$ and $duration$ ) , get all the query results, and use for loop to print each piece of the query results.","public void main ( JdbcTemplate conn , String dest , String duration ) { List flights = conn . query ( "" select origin from flight where dest = ? and duration = ? "" , new Object [ ] { dest , duration } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object origin : flights ) { System . out . println ( origin ) ; } }"
"Execute SQL via $conn$ ( get the description column in 'places' based on $visited$ ) , get all the data, use for loop to store the 0th element of each item in the query as list type, close the $conn$ connection, and finally use jsonify to process the list content and return.","public JSONArray places ( JdbcTemplate conn , String visited ) { List rows = conn . query ( "" select description from places where visited = ? "" , new Object [ ] { visited } , new BeanPropertyRowMapper ( List . class ) ) ; List places = new ArrayList ( ) ; for ( Object row : rows ) { places . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return JSONObject . parseArray ( places . toString ( ) ) ; }"
"Get the database engine and establish a connection through $mysql_str$. Set the SQL statement ( query the diamonds column in the ecommerce table based on $invoiceno$ and $stockcode$ ) , execute SQL, get the first piece of data, and return the query result.","public List sendToMysql ( DataSource mysql_str , String invoiceno , String stockcode ) { JdbcTemplate con = new JdbcTemplate ( mysql_str ) ; List dt = con . query ( "" select diamonds from ecommerce where invoiceno = ? and stockcode = ? "" , new Object [ ] { invoiceno , stockcode } , new BeanPropertyRowMapper ( List . class ) ) ; return dt ; }"
Use $conn$ to execute the SQL ( query all columns in the combined table ) to get all the data and use jsonify to return the execution result.,"public JSONArray combined ( JdbcTemplate conn ) { List Combined = conn . query ( "" select * from combined "" , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( Combined . toString ( ) ) ; }"
"Set the SQL ( query all EVDATE in FRC_CUSTOMSIGNALS where TASKID is $id$ ) , execute the SQL with the $conn$ connection and return the retrieved query results.","public String book ( JdbcTemplate db , String book_isbn , Model model ) { List books = db . query ( "" select isbn, title, auther, year from books where isbn = ? "" , new Object [ ] { book_isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" bookinfo "" , books . get ( 0 ) ) ; return "" book.html "" ; }"
"Set the SQL ( query all EVDATE in FRC_CUSTOMSIGNALS where TASKID is $id$ ) , execute the SQL with the $conn$ connection and return the retrieved query results.","public List queryPage ( JdbcTemplate conn , String id ) { List tasks = conn . query ( "" select evdate from frc_customsignals where taskid = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return tasks ; }"
"Use $admin_engine$ to get the database connection and execute SQL ( query all data in the name column of the DATABASE table according to $ROLE$ ) , print the queried data, and close the connection.","public void setupDb ( DataSource admin_engine , String ROLE ) { JdbcTemplate conn = new JdbcTemplate ( admin_engine ) ; List data = conn . query ( "" select name from database where role = ? "" , new Object [ ] { ROLE } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( data ) ; }"
"Get the database engine using $SQLconfig$ and connect the database using the raw_connection, then execute the SQL ( get all the columns in equity_data where the data of equity is $dataconfig$ ) and get the first data, then close the connection and return the result of the query.","public Object dataPrep ( DataSource SQLconfig , String dataconfig ) { JdbcTemplate conn = new JdbcTemplate ( SQLconfig ) ; List res = conn . query ( "" select * from equity_data where equity_data = ? "" , new Object [ ] { dataconfig } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }"
Execute SQL via $conn$ ( get all the columns in 'Sells' based on $sell$ ) and get all the data. Convert each item of the query result to dictionary type and return.,"public List getSells ( JdbcTemplate conn , String sell ) { List rs = conn . query ( "" select * from sells where sell = ? "" , new Object [ ] { sell } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }"
"If the request module sends the request as 'post', set SQL ( query all columns in the 'users' through $email$ ) , use $conn$ to execute SQL and get all the data. If the execution result is empty, use redirect to return / search; otherwise, render and return login.html.","public String login ( HttpRequest request , JdbcTemplate conn , String email ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List username_data = conn . query ( "" select * from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( username_data . isEmpty ( ) ) { return "" /search "" ; } else { return "" login.html "" ; } } else { return null ; } }"
Use $conn$ to execute SQL ( query all columns in name_table based on $id_name$ ) and get all the data. Close the connection and return the query results.,"public List dropTable ( JdbcTemplate conn , String id_name ) { List res_go = conn . query ( "" select * from name_table where id_name = ? "" , new Object [ ] { id_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res_go ; }"
make the connection using $engine$. Execute the SQL statement ( query all columns in the Customer ) and get all the data. Print each item in the query result using a for loop.,"public void search ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select * from customer "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } }"
"Get the database engine from $uri$ and make the connection. Set SQL ( query all columns in the information_schema where TABLE_SCHEMA is $openstack_citest$ ) , execute SQL to get all the data and return it.","public List testMysqlInnodb ( DataSource uri , String openstack_citest ) { JdbcTemplate engine = new JdbcTemplate ( uri ) ; List results = engine . query ( "" select count(*) from information_schema where table_schema = ? "" , new Object [ ] { openstack_citest } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
Set SQL ( query all the information in the books table based on title $booktitle$ ) . Use $conn$ to execute SQL and return the rendered 'search.html' page with the results parameter being the query result.,"public String selectValue ( JdbcTemplate conn , String booktitle , Model model ) { List results = conn . query ( "" select * from books where title = ? "" , new Object [ ] { booktitle } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; return "" search.thtml "" ; }"
"Try to create a cursor with $conn$, execute SQL ( query the taskid column in the rank_item table based on $result$ ) , use for loop to traverse all the obtained query results, and print the first element of each piece of data. If an Exception occurs during execution, print the exception.","public void start ( JdbcTemplate conn , String result ) { try { List data = conn . query ( "" select taskid from rank_item where result = ? "" , new Object [ ] { result } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object datum : data ) { System . out . println ( JSONObject . parseObject ( datum . toString ( ) ) . get ( 1 ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } }"
"Get the connection using $db_connect$. Set the SQL ( query for all columns in Employee where Employee_Id is $employee_id$ ) and execute the SQL. The keys of the result are executed as keys in the dictionary, each item in the result cursor is executed as a value, and all dict are stored in the list. Finally, return the serialized result of the list.","public JSONArray getEmployee ( JdbcTemplate db_connect , String employee_id ) { List result = db_connect . query ( "" select * from employee where employee_id = ? "" , new Object [ ] { employee_id } , new BeanPropertyRowMapper ( List . class ) ) ; List employees = new ArrayList ( ) ; for ( Object i : result ) { employees . add ( JSONObject . parseObject ( i . toString ( ) ) . getString ( "" keys "" ) ) ; } return JSONObject . parseArray ( employees . toString ( ) ) ; }"
"Use the format string matching method to set sql ( query the lat column in the acceleration table based on $long$ and $time$ ) , execute SQL with $conn$, get all the data, and use for loop to store the query results as list and return.","public List queryAcceleration ( JdbcTemplate conn , String longs , String time ) { List result = conn . query ( "" select lat from acceleration where long = ? and time = ? "" , new Object [ ] { longs , time } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Use $eng$ to execute SQL ( query all columns in the track_table according to $id$ ) , get all the query results, set assertions to determine whether the length of the query results is not equal to 0, and return the query results.","public List testStorageDataBlueprint ( JdbcTemplate eng , String id ) { List data = eng . query ( "" select * from track_table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert data . size ( ) != 0 ; return data ; }"
"Use $conn$ to execute SQL ( query all columns in the data table according to $work_ratings_count$ ) and get all the query results. If the query result is empty, return the rendered 404.html page; otherwise, return the rendered api.json, where the parameter api is the query result.","public String api ( JdbcTemplate conn , String work_ratings_count , Model model ) { List data = conn . query ( "" select * from data where work_ratings_count = ? "" , new Object [ ] { work_ratings_count } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data . isEmpty ( ) ) { return "" 404.html "" ; } else { model . addAttribute ( "" api "" , data ) ; return "" api.json "" ; } }"
"Get the database engine by $PG_URL$, execute the SQL statement ( get eventid in gino_users based on $username$ ) , get all the data, and finally return the result.","public List engine ( DataSource PG_URL , String username ) { JdbcTemplate e = new JdbcTemplate ( PG_URL ) ; List res = e . query ( "" select eventid from gino_users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Create the database engine through $mysql$ and create a connection based on the engine. Use the connection to execute SQL ( query all columns in the create_database table ) and get all the data. Finally, return the query result directly.","public List mysqlSel ( DataSource mysql ) { JdbcTemplate e = new JdbcTemplate ( mysql ) ; List result_create = e . query ( "" select * from create_database ? "" , new BeanPropertyRowMapper ( List . class ) ) ; return result_create ; }"
"Execute SQL with $conn$ ( get all columns in test based on $data$ ) and get all the data, print query result, close $conn$ connection, and finally return query result.","public List task ( JdbcTemplate conn , String data ) { List res = conn . query ( "" select * from test where data = ? "" , new Object [ ] { data } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; return res ; }"
"Use for loop to traverse the execution results of the following code: Execute SQL with $conn$ ( query the password column in the user table based on $usr_name$ ) , get all the query results, store them as list, and finally return.","public List handler ( JdbcTemplate conn , String usr_name ) { List result = new ArrayList ( ) ; List res = conn . query ( "" select password from user where usr_name = ? "" , new Object [ ] { usr_name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : res ) { result . add ( row ) ; } return result ; }"
"Open and read the file books.csv and convert the data into a list. Use for loop to iterate through the first data in this list to the end and get the value corresponding to the 'year' field in the database. Set the SQL ( query all columns in the booktable table based on 'year' ) , execute the SQL based on $conn$, get all the data, and return the query result.","public List selectValue ( JdbcTemplate conn ) { List books = new ArrayList ( ) ; String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String year = sc . nextLine ( ) ; books = conn . query ( "" select * from booktable where year = ? "" , new Object [ ] { year } , new BeanPropertyRowMapper ( List . class ) ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } return books ; }"
"Use $conn$ to execute SQL ( get all columns in the flights table with id as $flight_id$ ) and get the first piece of data. Finally return the rendered flight.html, where the flight parameter is the query result.","public String flight ( JdbcTemplate conn , String flight_id , Model model ) { List flights = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights . get ( 0 ) ) ; return "" flight.html "" ; }"
"Connect to the database engine using $testing$. Set the SQL ( query all columns for users where the id of user is $user_id$ ) , execute the SQL and get all the data. Close the database connection and return the result of the query.","public List selectValue ( DataSource testing , String user_id ) { JdbcTemplate connection = new JdbcTemplate ( testing ) ; List results = connection . query ( "" select * from users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use $conn$ to execute SQL ( query all columns in the books table according to $isbn$ ) , get all the data, insert the data one by one into a list, close the connection, and return list.","public List main ( JdbcTemplate conn , String isbn ) { List query = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List csv = new ArrayList ( ) ; for ( Object i : query ) { csv . add ( i ) ; } return csv ; }"
"Set the SQL statement ( query all the columns in books where isbn is $isbn$ and return all the data ) . Execute an SQL statement with $conn$ to get all the data, return None if the query result is empty, otherwise return the query result.","public List selectApi ( JdbcTemplate conn , String isbn ) { List book_res = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book_res . isEmpty ( ) ) { return null ; } else { return book_res ; } }"
"If the request module sends the request in a post method, use $conn$ to execute SQL ( query all the login_info in the login_table through $user_name$ ) and return all the query results.","public List defav ( HttpRequest request , JdbcTemplate conn , String user_name ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select login_info from login_table where user_name = ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } else { return null ; } }"
"Use $db$ to establish a connection, set up SQL ( query all the information in the mock_calls table based on $id$ ) , use $conn$ to execute SQL and get all the query results, close the connection, and return the query results.","public List selectValue ( DataSource db , String id ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List calls = engine . query ( "" select * from mock_calls where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return calls ; }"
"Execute SQL with $engine$ ( get all the columns in the testtable table according to $id$ ) , get the first piece of data, then set the assertion that the length of the query result is 1, and finally return the query result.","public Object testFirst ( JdbcTemplate engine , String id ) { List results = engine . query ( "" select * from testtable where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert results . size ( ) == 1 ; return results . get ( 0 ) ; }"
"Get the database engine via $db_connection_string$, execute the SQL statement ( get the id column in 'places'based on $suggested_by$ ) , get all the data, and finally return the query result.","public List connect ( DataSource db_connection_string , String suggested_by ) { JdbcTemplate engine = new JdbcTemplate ( db_connection_string ) ; List Session = engine . query ( "" select id from places where suggested_by = ? "" , new Object [ ] { suggested_by } , new BeanPropertyRowMapper ( List . class ) ) ; return Session ; }"
"Execute SQL with $conn$ ( query all columns in the courses table according to $universities$ ) and get all the query results. If the query results are not empty, return the rendered 'all_courses.html' page, where the parameter courses is set to the query results.","public String allCourses ( JdbcTemplate conn , String universities , Model model ) { List courses = conn . query ( "" select * from courses where universities = ? "" , new Object [ ] { universities } , new BeanPropertyRowMapper ( List . class ) ) ; if ( courses . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" courses "" , courses ) ; return "" all_courses.html "" ; } }"
"Try to use $conn$ to execute SQL ( query the rank information in the ncbi_nodes table based on $tax_id$ ) , get all the data, convert each item of the query result to a dict type and return. If an exception occurs, return False.","public Object queryPage ( JdbcTemplate conn , String tax_id ) { try { List resrank = conn . query ( "" select rank from ncbi_nodes where tax_id = ? "" , new Object [ ] { tax_id } , new BeanPropertyRowMapper ( List . class ) ) ; return resrank ; } catch ( Exception e ) { return false ; } }"
"Try to execute the SQL statement ( query all the columns in the mat where curso is $curso$ ) with $conn$ and return after getting all the data. If an Exception is thrown, the specific Exception information is printed and False is returned.","public Object listarMateriasNome ( JdbcTemplate conn , String curso ) { try { List mats = conn . query ( "" select * from mat where curso = ? "" , new Object [ ] { curso } , new BeanPropertyRowMapper ( List . class ) ) ; return mats ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }"
"Execute SQL with $conn$ ( get all the columns in the Machines_sql where id is $id$ ) to get all the data, disconnect the database, and return the query results.","public List selectMachines ( JdbcTemplate conn , String id ) { List Machines_results = conn . query ( "" select * from machines_sql where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return Machines_results ; }"
Experiment with $conn$ to execute SQL ( querying the title information where movieId is $movieId$ in Movie ) and get all the data. Converts each item in the query result to a dict type and return. Return False if an exception occurs.,"public Object getMovie ( JdbcTemplate conn , String movieId ) { try { List res = conn . query ( "" select title from Movie where movieId = ? "" , new Object [ ] { movieId } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }"
"Execute the SQL ( get the id column in the reviews table where isbn is $isbn$ ) with $conn$ and get all the data, return False if the query result is None, otherwise return the query result.","public Object api ( JdbcTemplate conn , String isbn ) { List info = conn . query ( "" select id from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( info . isEmpty ( ) ) { return false ; } else { return info ; } }"
"Execute SQL with $conn$ ( query all columns in the users table based on $email$ ) and get the first row of data. If no results are found, return the rendered error.html page; otherwise, return the query result.","public Object registerUser ( JdbcTemplate conn , String email ) { List users = conn . query ( "" select * from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return "" error.html "" ; } else { return users . get ( 0 ) ; } }"
"Execute the SQL statement using the $conn$ connection ( get all the meta in user where the name of meta is $name_meta$ ) , store the 0th element of the query result, and return it.","public Object testNoneIsEncodedAsEmptyFict ( JdbcTemplate conn , String name_meta ) { List result = conn . query ( "" select meta from user where name_meta = ? "" , new Object [ ] { name_meta } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = result . get ( 0 ) ; return row ; }"
"Try to set up SQL ( query all the books columns where isbn is $isbn$ ) , execute the SQL statement with $conn$, obtain all the data and return it. If an exception occurs, 'error' is printed.","public Object selectBooks ( JdbcTemplate conn , String isbn ) { try { List result_book = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return result_book ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
Execute the SQL statement ( query all the columns in the Likes ) with $conn$ and get all the data. Convert each item of the query result to a dict and return it as a list.,"public List getLikes ( JdbcTemplate conn ) { List rs = conn . query ( "" select * from likes "" , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }"
"Connect to the database through $e$, then execute the SQL ( get the id column in the JPY table ) , further use for loop to store the keywords and subscripts of each item of the query results processed by the cursor method as tuple. Compress the tuple and convert it to the dictionary type. Finally return 'data' and the contents of dictionary.","public List get ( DataSource e ) { JdbcTemplate engine = new JdbcTemplate ( e ) ; List result = engine . query ( "" select id from jpy "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Connect to the database via $db$, execute SQL ( get all the columns processed by the counting method in the query_users table based on $user_id$ ) and get all the data. Set the length of the assertion query result to 0, and finally close the connection.","public void testNesting ( DataSource db , String user_id ) { JdbcTemplate connection = new JdbcTemplate ( db ) ; List result = connection . query ( "" select count(*) from query_users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) == 0 ; }"
"Execute the SQL with $conn$ ( get all the columns in the books where isbn is $isbn$ ) and get the first data, return No Such A Book if the query result is None, otherwise return the query result.","public Object api ( JdbcTemplate conn , String isbn ) { List bdatas = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( bdatas . isEmpty ( ) ) { return "" No Such A Book "" ; } else { return bdatas . get ( 0 ) ; } }"
Execute SQL with $conn$ ( query job_id in the tasks where the index of task is $task_index$ ) and get all the data. Then print and return the query results.,"public List insertKeys ( JdbcTemplate conn , String task_index ) { List jobs = conn . query ( "" select job_id from tasks where task_index = ? "" , new Object [ ] { task_index } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( jobs ) ; return jobs ; }"
"Try to use $conn$ to execute SQL ( query all the data in the validISBN column of the books table based on $work_ratings_count$ ) , return the query data if there is a query result; otherwise, return None. If an exception occurs during execution, return False.","public Object bookPage ( JdbcTemplate conn , String work_ratings_count ) { try { List goodreads = conn . query ( "" select validISBN from books where work_ratings_count = ? "" , new Object [ ] { work_ratings_count } , new BeanPropertyRowMapper ( List . class ) ) ; if ( goodreads . isEmpty ( ) ) { return null ; } else { return goodreads ; } } catch ( Exception e ) { return false ; } }"
"Use $con$ to execute SQL ( query the equation column in the samples table according to $id$ ) , get all the query results, close the connection, and use for loop to store the 0th element of each article of the query result as list and return.","public List getEquations ( JdbcTemplate conn , String id ) { List result = conn . query ( "" select equation from samples where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object row : result ) { list . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return list ; }"
Use $db$ to execute SQL ( get the amount column in the accounts table based on $name$ and $id$ ) and get the first record. Finally return the query result.,"public Object getAmount ( JdbcTemplate db , String name , String id ) { List ams = db . query ( "" select amount from accounts where name = ? and id = ? "" , new Object [ ] { name , id } , new BeanPropertyRowMapper ( List . class ) ) ; return ams . get ( 0 ) ; }"
"Set up the SQL ( query all columns in the email table based on $username$ ) , execute the SQL based on $conn$ and get all the query results. Close the connection, use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","public List getRecords ( JdbcTemplate conn , String username ) { List results = conn . query ( "" select * from email where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; List emails = new ArrayList ( ) ; for ( Object i : results ) { emails . add ( i ) ; } return emails ; }"
"Get the database engine using $connection_string$, execute the SQL ( get all the columns in the table where name is $name$ ) , get all the data, and finally return the query results.","public List getRes ( DataSource connection_string , String name ) { JdbcTemplate engine = new JdbcTemplate ( connection_string ) ; List res = engine . query ( "" select * from table where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $session$ to execute SQL ( query 'id' in the User table based on $name$ ) and get all the data. Then execute commit method on $session$ and close, and finally return the query result.","public List tellData ( JdbcTemplate session , String name ) { List res = session . query ( "" select id from User where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $db$ to get the database engine, execute SQL ( get all the columns in the 'Table' table according to $id$ ) , get the first row of data, and finally return the query result.","public Object testFetchone ( DataSource db , String id ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List results = engine . query ( "" select * from Table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }"
"Connect to the database through $db_connect$, set the SQL statement ( query all the columns in the customers table according to $id$ ) , execute the SQL statement to get all the data, convert each item of the execution result into dict, store it as list, and return the execution result through jsonify.","public JSONArray get ( JdbcTemplate db_connect , String id ) { List result = db_connect . query ( "" select * from customers where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( result . toString ( ) ) ; }"
"If username is not empty, use $conn$ to execute SQL ( query all columns in the username table based on $username$ ) , get all the query results, and return the rendered 'login.html' page, where the parameter users is the query result; otherwise, return the rendered 'error.html' page.","public String loginFunc ( JdbcTemplate conn , String username , Model model ) { if ( username == null ) { List users = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" users "" , users ) ; return "" login.html "" ; } else { return "" error.html "" ; } }"
"Get the database engine based on $DB_CONNECT_STRING$, where the max_overflow parameter is 5. Then execute the SQL ( get the profileurl column in the portal_profile table ) and get all the data. Use for loop to print each item of the query results.","public void startRequests ( DataSource DB_CONNECT_STRING ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List profileurls = engine . query ( "" select profileurl from portal_profile "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : profileurls ) { System . out . println ( i ) ; } }"
"Use $engine$ to execute SQL ( query all columns in the data_dict table according to $LIMIT$ ) , get all the query results, and set assertions to determine whether the query result length is not equal to 0. Use for loop to traverse all the query results obtained with for loop, insert each piece of data into a list, and return the list.","public List search ( JdbcTemplate engine , String LIMIT ) { List result = engine . query ( "" select * from data_dict where limit = ? "" , new Object [ ] { LIMIT } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; List fields_info = new ArrayList ( ) ; for ( Object name : result ) { fields_info . add ( name ) ; } return fields_info ; }"
"Execute the SQL statement ( query all columns in the flights ) with $conn$, get all the data, and print it using the for loop.","public void searchFlight ( JdbcTemplate conn ) { List flights = conn . query ( "" select * from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( flight ) ; } }"
"Get the database engine through $url$, where the echo parameter is assigned to False, and establish a connection. Try to execute the SQL statement ( query all the columns in the test_data table according to $DbProp$ ) and get all the data, return the query results, and finally close the connection.","public List dbConnect ( DataSource url , String DbProp ) { try { JdbcTemplate engine = new JdbcTemplate ( url ) ; List kanou = engine . query ( "" select * from test_data where dbprop = ? "" , new Object [ ] { DbProp } , new BeanPropertyRowMapper ( List . class ) ) ; return kanou ; } finally { return null ; } }"
"Connect to the database through $db_connect$, set the SQL ( query all columns in customers based on $name$ ) . Execute the SQL statement to get all the data. Use jsonify to return all the query results.","public JSONArray getInfo ( JdbcTemplate db_connect , String name ) { List result = db_connect . query ( "" select * from table where datum = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( result . toString ( ) ) ; }"
"Connect the database with $engine$, try to execute SQL ( query all columns in the stderr table based on $traceback$ ) , get all the data, close the database, and return the query data. If an Exception occurs during execution, return False.","public Object worker ( JdbcTemplate engine , String traceback ) { try { List res = engine . query ( "" select * from stderr where traceback = ? "" , new Object [ ] { traceback } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }"
"Set up sql ( query the clothes column in the tablename table based on $phone$ ) , execute SQL with $cur$ and return all the obtained query results.","public List getTable ( JdbcTemplate cur , String phone ) { List res = cur . query ( "" select clothes from tablename where phone = ? "" , new Object [ ] { phone } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
use $engine$ to get the database connection. Execute the SQL statement ( get all the columns of the transactions where name is $name$ ) to get all the data and return it directly if the query result is None otherwise every item in the query result is converted to dict and return.,"public List selectValue ( DataSource engine , String name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from transactions where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }"
"Use the format string matching method to set the SQL ( query the appel column in the services table based on $limit$ ) , use $connection$ to execute the SQL, and get all the data. Return the query results.","public List getServices ( JdbcTemplate connection , String limit ) { List result = connection . query ( "" select appel from services where limit = ? "" , new Object [ ] { limit } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Exception,""Try to use $conn$ to execute SQL ( query the dbapi column in the 'connection' table based on $record$ and $proxy$ ) , get the first piece of data, close the connection, return the query data, and if an exception occurs, trigger and execute Exception.","public Object pingConnection ( JdbcTemplate conn , String record , String proxy ) { try { List cursor = conn . query ( "" select dbapi from connection where record = ? and proxy = ? "" , new Object [ ] { record , proxy } , new BeanPropertyRowMapper ( List . class ) ) ; return cursor ; } catch ( Exception e ) { return e ; } }"
"Get the database engine through $postgresql$, execute the SQL statement ( query the date_part column in the stock_data table according to $date$ ) , get all the data, use for loop to traverse all the query results, insert each piece of data into a list, and convert the list to json and return.","public JSONArray getYears ( DataSource postgresql , String date ) { JdbcTemplate con = new JdbcTemplate ( postgresql ) ; List data = con . query ( "" select date_part from stock_data where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; List newdata = new ArrayList ( ) ; for ( Object x : data ) { newdata . add ( x ) ; } return JSONObject . parseArray ( newdata . toString ( ) ) ; }"
Get the database engine and establish a connection through $conn_string$. Execute the SQL statement ( query the first piece of data in the USERS table based on $user$ and $passwd$ ) and return the query results.,"public List connectToDatabase ( DataSource conn_string , String user , String passwd ) { JdbcTemplate connection = new JdbcTemplate ( conn_string ) ; List u = connection . query ( "" select * from users where user = ? and passwd = ? "" , new Object [ ] { user , passwd } , new BeanPropertyRowMapper ( List . class ) ) ; return u ; }"
"Try to get the database engine and make the connection through $DB_HOST$, use the connection to execute the SQL statement ( select all the columns in the TABLE ) and get all the data. Return after converting the query result to a list using a for loop. Return False if an exception is generated.","public Object search ( DataSource DB_HOST ) { try { JdbcTemplate connection = new JdbcTemplate ( DB_HOST ) ; List result_set = connection . query ( "" select * from table "" , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object item : result_set ) { result . add ( item ) ; } return result ; } catch ( Exception e ) { return false ; } }"
"Set SQL ( query the field column in the 'table' table according to $id$ ) , execute SQL according to $conn$, get all the query results, and return the data.","public List simpleSelect ( JdbcTemplate conn , String id ) { List result = conn . query ( "" select field from table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Use $call_center$ to get the database engine, where the echo parameter is True. Connect to the database, then execute the SQL ( get all the columns in the technician table based on $tech_id$ ) and get all the data. Finally return the query results.","public List getTechInfoByTechId ( DataSource call_center , String tech_id ) { JdbcTemplate conn = new JdbcTemplate ( call_center ) ; List results = conn . query ( "" select * from technician where tech_id = ? "" , new Object [ ] { tech_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Execute the SQL using $connects$ ( query the information of name in the department table where id is $id$ ) and get the first data. If the length of the query result is greater than 0, return the query result [0][0] element. Otherwise, return False.","public Object getStudentDept ( JdbcTemplate conn , String id ) { List res = conn . query ( "" select name from department where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { return JSONObject . parseObject ( res . get ( 0 ) . toString ( ) ) . get ( 0 ) ; } else { return false ; } }"
"If $cluster_id$ is not None, execute SQL with $conn$ ( get all the columns in the clusters where the id of cluster is $cluster_id$ ) and get all the data. Print each item in the query result using a for loop.","public void selectValue ( JdbcTemplate conn , String cluster_id ) { if ( cluster_id != null ) { List results = conn . query ( "" select * from clusters where cluster_id = ? "" , new Object [ ] { cluster_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object result : results ) { System . out . println ( result ) ; } } }"
"Get the database engine by $db_string$, try to execute the SQL statement ( get all columns in sistema based on $id_fornecedor$ ) and get all the data. Otherwise return the result as False, and finally return the obtained result.","public Object addCompra ( DataSource db_string , String id_fornecedor ) { JdbcTemplate db = new JdbcTemplate ( db_string ) ; try { List res = db . query ( "" select * from sistema where id_fornecedor = ? "" , new Object [ ] { id_fornecedor } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }"
"Try to use $conn$ to execute SQL ( get the data_year column in the vw_muertes_estado table where muertes_name is $name$ ) , get all the data, return the query result, and print the exception if there is an exception during execution.","public List yearsEp ( JdbcTemplate conn , String name ) { try { List years = conn . query ( "" select data_year from vw_muertes_estado where muertes_name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return years ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Execute SQL with $conn$ ( query the unit_found column in the Otu table based on $found$ ) , get all the query results, use for loop to traverse the query results, insert a list, convert this list to json and return.","public JSONArray otu ( JdbcTemplate conn , String found ) { List tmp = conn . query ( "" select unit_found from otu where found = ? "" , new Object [ ] { found } , new BeanPropertyRowMapper ( List . class ) ) ; List otu_list = new ArrayList ( ) ; for ( Object x : tmp ) { otu_list . add ( x ) ; } return JSONObject . parseArray ( otu_list . toString ( ) ) ; }"
Set up the SQL statement ( query the City in the users table based on $Phone$ ) . Execute SQL to get all the data through the $conn$ connection and print it.,"public void readUser ( JdbcTemplate conn , String Phone ) { List exc = conn . query ( "" select city from users where phone = ? "" , new Object [ ] { Phone } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( exc ) ; }"
"If the request method is ""POST"", use $conn$ to execute the SQL statement ( get all the columns in the gd where isbn is $isbn$ ) and get all the data. Finally, the query results are returned.","public List selectGds ( HttpRequest request , JdbcTemplate conn , String isbn ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List gds = conn . query ( "" select * from gd where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return gds ; } else { return null ; } }"
"Execute the SQL with $conn$ ( get all the information in the places where postal_code is $q$, place_name is $q$, and admin_code1 is $q$ ) and get all the data, and finally return the content of the query processed by jsonify.","public JSONArray search ( JdbcTemplate conn , String q ) { List results = conn . query ( "" select * from places where postal_code = ? and place_name = ? and admin_code1 = ? "" , new Object [ ] { q , q , q } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( results . toString ( ) ) ; }"
Connect to the database through $engine$ and execute the SQL statement with the following contents: Query all the name in the friends table based on $fid$. Use the dispose ( ) method to close the database and release resources. Convert each item of the query results into dict and store it as list and return it,"public List selectFriend ( DataSource engine , String fid ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List val = conn . query ( "" select name from friends where fid = ? "" , new Object [ ] { fid } , new BeanPropertyRowMapper ( List . class ) ) ; return val ; }"
"Use $conn$ to execute SQL ( query the city column in the cities table according to $statecode$ ) , get all the query results, use for loop to convert each of the query results to dict, and store them in list. Then convert this list to json, and return.","public JSONArray getMeFilteredCities ( JdbcTemplate conn , String statecode ) { List results = new ArrayList ( ) ; List rows = conn . query ( "" select nextval from SEQUENCE where sequence_name = ? "" , new Object [ ] { statecode } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object city : rows ) { results . add ( city ) ; } return JSONObject . parseArray ( results . toString ( ) ) ; }"
"Set up SQL ( query time column in Transactions table based on $transactionID$ ) , use $conn$ to execute SQL and get all query results. Use for loop to convert each query result to dict, store in list and return.","public List selectValue ( JdbcTemplate conn , String transactionID ) { List results = conn . query ( "" select time from transactions where transactionid = ? "" , new Object [ ] { transactionID } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
Get the database engine and establish a connection through $psycopg2$. Execute the SQL statement ( query the first 'name' data in the magazijnvoorraad table based on $email$ ) and return the query result.,"public List toonGrafiek ( DataSource psycopg2 , String email ) { JdbcTemplate con = new JdbcTemplate ( psycopg2 ) ; List res = con . query ( "" select name from magazijnvoorraad where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Execute the SQL statement using the $conn$ connection ( according to $Casino$ to get all the Bars in a Barstable ) . Transform each query result into dict store it as a list, and return.","public List queryPage ( JdbcTemplate conn , String Casino ) { List Bars = conn . query ( "" select bar from barstable where casino = ? "" , new Object [ ] { Casino } , new BeanPropertyRowMapper ( List . class ) ) ; return Bars ; }"
"First set sql ( query the table_name column in the 'table' table based on $old_column_name$ and $new_column_name$ ) , use $conn$ to execute SQL and get all the query results. Return False, if the query results are empty; otherwise, return True.","public boolean renameColumn ( JdbcTemplate conn , String old_column_name , String new_column_name ) { List res = conn . query ( "" select table_name from table where old_column_name = ? and new_column_name = ? "" , new Object [ ] { old_column_name , new_column_name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return false ; } else { return true ; } }"
Execute the SQL ( query all the columns in the Products table when the id is $id_orig$ ) with $conn$ and get all the data. Print each element in the query result using a for loop.,"public void selectValue ( JdbcTemplate conn , String id_orig ) { List products_sub = conn . query ( "" select * from products where id = ? "" , new Object [ ] { id_orig } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object sub : products_sub ) { System . out . println ( sub ) ; } }"
"If $username$ exists, use $db$ to execute SQL ( query the user information in NOTES where username is $username$ and note is $note$ ) and get all the data. Return the rendered index.html page and pass the query result to the notes parameter.","public String index ( JdbcTemplate db , String note , String username , Model model ) { List notes = db . query ( "" select user from notes where username = ? and note = ? "" , new Object [ ] { note , username } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" notes "" , notes ) ; return "" index.html "" ; }"
"If the request module sends the request in a post method, execute SQL through the $conn$ connection ( query all isbn and author in the books through $title$ ) and print the query results. If the length of the query result is less than 1, return False; otherwise, return the query result.","public Object search ( HttpRequest request , JdbcTemplate conn , String title ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List searchResult = conn . query ( "" select isbn, author from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( searchResult . isEmpty ( ) ) { return false ; } else { return searchResult ; } } else { return false ; } }"
"Use $conn$ to execute the SQL ( get the flight column in the flights table based on $id$ ) and get all the data, then use for loop to store the 0th element of each item in the query result as list, and finally return the list contents","public List flight ( JdbcTemplate conn , String id ) { List results = conn . query ( "" select flight from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List flights = new ArrayList ( ) ; for ( Object row : results ) { flights . add ( row ) ; } return flights ; }"
Use $conn$ to execute the SQL ( get the title column in the books table based on $isbn$ ) and get all the data. Finally return the query results.,"public List main ( JdbcTemplate conn , String isbn ) { List books = conn . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return books ; }"
"Execute the SQL ( get all the columns in the reviews where the id of book is $book_id$ and the id of user is $user_id$ ) with $conn$, get all the data, and return the query results.","public List submitReview ( JdbcTemplate conn , String book_id , String user_id ) { List res = conn . query ( "" select * from reviews where book_id = ? and user_id = ? "" , new Object [ ] { book_id , user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
Execute the SQL with $conn$ ( query all columns in the reviews table based on $isbn$ ) and get all the query results. Use for loop to store each of the query results into list and return the list. *,"public List getReviewsByIsbn ( JdbcTemplate conn , String isbn ) { List res = conn . query ( "" select * from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List cache = new ArrayList ( ) ; for ( Object rev : res ) { cache . add ( rev ) ; } return cache ; }"
Use $db_uri$ to get the database engine and execute SQL ( get all columns in sqlite_master table with type as $table$ ) and get all the data. Use for loop to store the 0th element of each item of the query results as list and finally return the contents of list.,"public List testSimple ( DataSource db_uri , String table ) { JdbcTemplate engine = new JdbcTemplate ( db_uri ) ; List res = engine . query ( "" select * from sqlite_master where type = ? "" , new Object [ ] { table } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object row : res ) { list . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return list ; }"
"Use $con$ to set up a cursor, execute SQL ( query all columns in the players table according to $factory$ ) , get all the query results, return the rendered profile.html page, and set the query results to the value of the parameter rows.","public String profile ( JdbcTemplate con , String factory , Model model ) { List rows = con . query ( "" select * from players where factory = ? "" , new Object [ ] { factory } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rows "" , rows ) ; return "" profile.html "" ; }"
"Use $conn$ to execute SQL ( query the first row of data in the autoload_width column of the autoload table based on $total_per_day$ ) , print the data, and return.","public List insertStudent ( JdbcTemplate conn , String total_per_day ) { List ins = conn . query ( "" select autoload_width from autoload where total_per_day = ? "" , new Object [ ] { total_per_day } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( ins ) ; return ins ; }"
"Set the SQL ( select all columns in my_entities where id is $id$ ) in a java expression. Execute the SQL with $conn$ and get all the data, set assertion to determine that the query result length is equal to 2, and return the query result.","public List testDeleteById ( JdbcTemplate conn , String id ) { List entities = conn . query ( "" select * from my_entities where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return entities ; }"
"Set the SQL ( query all columns in the roundtrip table where test_frame is $test_frame$ ) . Execute the SQL with $conn$ and get all the data, then return the query results.","public List getChunksize ( JdbcTemplate conn , String test_frame ) { List res = conn . query ( "" select * from roundtrip where test_frame = ? "" , new Object [ ] { test_frame } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
Connect via $engine$. Execute the SQL statement ( select all columns in the coolkids where nick is $nick$ ) and return after getting all the data.,"public List selectCoolkids ( DataSource TimeTable , String nick ) { JdbcTemplate engine = new JdbcTemplate ( TimeTable ) ; List coolkids = engine . query ( "" select * from coolkids where nick = ? "" , new Object [ ] { nick } , new BeanPropertyRowMapper ( List . class ) ) ; return coolkids ; }"
"Use $conn$ to execute the SQL statement ( query all the columns in the events_aggregation_imputed table based on $entity_id$ ) , get all the data, set the assertion to determine that the length of the returned result is not 0, and finally return the query result.","public List testBasicSpacetime ( JdbcTemplate conn , String entity_id ) { List rows = conn . query ( "" select * from events_aggregation_imputed where entity_id = ? "" , new Object [ ] { entity_id } , new BeanPropertyRowMapper ( List . class ) ) ; assert rows . size ( ) != 0 ; return rows ; }"
"Use the getLogger method to get the log output tool. Try to execute the following code: Set SQL ( query all columns in the table based on $debug$ ) ; record SQL as debug information in the log; use $conn$ to execute SQL and get all the data; return the result if the result exists; otherwise, return empty list. If an SQLAlchemyError exception occurs, use error to log the exception information and throw the exception.","public List execute ( JdbcTemplate conn , String debug ) { try { List rows = conn . query ( "" select * from err where debug = ? "" , new Object [ ] { debug } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! rows . isEmpty ( ) ) { return rows ; } else { return null ; } } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Execute the SQL ( get the message column in the Message where the id of file is $file_id$ ) with $conn$, get all the data, and return the query results.","public List getMessage ( JdbcTemplate conn , String file_id ) { List message_text = conn . query ( "" select message from Message where file_id = ? "" , new Object [ ] { file_id } , new BeanPropertyRowMapper ( List . class ) ) ; return message_text ; }"
"Get the database engine through $database_uri$. Execute SQL statement ( query all columns in database table with dname as $dname$ ) , get all the data and return the query result.","public List info ( DataSource database_uri , String dname ) { JdbcTemplate engine = new JdbcTemplate ( database_uri ) ; List ot = engine . query ( "" select * from database where dname = ? "" , new Object [ ] { dname } , new BeanPropertyRowMapper ( List . class ) ) ; return ot ; }"
"Execute the SQL with $conn$ ( get all the columns in the review table where name is $user1$ ) and get all the information. If the query result is longer than 0, return the rendered bookpage.html, where the revw parameter is the query result, otherwise return the rendered error.html.","public String finalReview ( JdbcTemplate conn , String user1 , Model model ) { List revw = conn . query ( "" select * from review where name = ? "" , new Object [ ] { user1 } , new BeanPropertyRowMapper ( List . class ) ) ; if ( revw . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" revw "" , revw ) ; return "" bookpage.html "" ; } }"
"Use sessionmaker ( ) to create a DBSession class ( where the bind parameter is $engine$ database connection ) . Instantiate the Session, and then set the SQL statement: Query all the columns in the jihemei, execute SQL to get all the data, close the database connection, and return all the execution results.","public List getItem ( DataSource engine ) { JdbcTemplate session = new JdbcTemplate ( engine ) ; List items = session . query ( "" select * from jihemei "" , new BeanPropertyRowMapper ( List . class ) ) ; return items ; }"
"connect to the database according to $engine$. Set the SQL ( query all fruit data in the table_name where fileds is $fileds$ ) , execute the SQL and return the query results.","public List queryTime ( DataSource engine , String fileds ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List mytime = conn . query ( "" select fruit from table_name where fileds = ? "" , new Object [ ] { fileds } , new BeanPropertyRowMapper ( List . class ) ) ; return mytime ; }"
"If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the users table based on $username$ ) and get the first row of data. If the query result is not empty, return the rendered ""register.html"" page; otherwise, return the rendered ""login.html"" page.","public Object register ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List guoes = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( guoes . isEmpty ( ) ) { return "" login.html "" ; } else { return "" register.html "" ; } } else { return "" login.html "" ; } }"
"connect to the database through $engine$, then execute the SQL ( get the city column in the drinkers table based on $state$ ) and get all the data. Use for loop to convert each item of the query results into dictionary type and finally return the contents of dictionary.","public List selectValue ( DataSource engine , String state ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select city from drinkers where state = ? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
Use $conn$ to execute the SQL ( query the flights_table table for origin information based on $durations$ and $destinations$ ) and get all the data. Use for loop to store the 0th element of each item of the query result in list and return.,"public List selectReader ( JdbcTemplate conn , String durations , String destinations ) { List origin = conn . query ( "" select origin from flights_table where durations = ? and destinations = ? "" , new Object [ ] { durations , destinations } , new BeanPropertyRowMapper ( List . class ) ) ; List origins = new ArrayList ( ) ; for ( Object i : origin ) { origins . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return origins ; }"
"Use $conn$ to execute SQL ( query all columns in the supporters table based on $nonprofit_id$ ) , get the first row of data, open 'campaigns.json' in a writable manner, and write the query results to the file in json format.","public List dumpCampaignToLocalJson ( JdbcTemplate conn , String nonprofit_id ) { List mons = conn . query ( "" select * from supporters where nonprofit_id = ? "" , new Object [ ] { nonprofit_id } , new BeanPropertyRowMapper ( List . class ) ) ; return mons ; }"
"Use $conn$ to get the cursor and use the cursor to execute SQL ( query the fips in the base_counts table ) and get all the data. Finally, return the query results.","public List getDist ( JdbcTemplate conn ) { List values = conn . query ( "" select fips from base_counts "" , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }"
"Use $conn$ to execute SQL ( query all columns in the users table based on $userid$ and $email$ ) . If the obtained number of data row is 0, return the rendered success.html, otherwise return the rendered error.html.","public String user ( JdbcTemplate conn , String userid , String email ) { List rec = conn . query ( "" select * from users where userid = ? and email = ? "" , new Object [ ] { userid , email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rec . isEmpty ( ) ) { return "" success.html "" ; } else { return "" error.html "" ; } }"
"If the request module sends the request as post, execute the SQL using $conn$ ( get all the users in ideas_table where the title is $title$ and content is $content$ ) . If the query results are empty, 'login_page' is returned using redirect and url_for.","public Object createIdeaPage ( HttpRequest request , JdbcTemplate conn , String title , String content , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user_result = conn . query ( "" select user from ideas_table where title = ? and content = ? "" , new Object [ ] { title , content } , new BeanPropertyRowMapper ( List . class ) ) ; if ( user_result . isEmpty ( ) ) { return "" login_page "" ; } else { return null ; } } else { return null ; } }"
"If the requested method is GET, return the rendered index.html, otherwise use $conn$ to execute the SQL ( get all columns in the books table based on $isbn$ ) and get all the data. Finally return the rendered matches.html, where the matches parameter is the query result.","public Object index ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List matches = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( matches . isEmpty ( ) ) { return "" login_page "" ; } else { model . addAttribute ( "" matches "" , matches ) ; return "" index.html "" ; } } else { return "" login_page "" ; } }"
"Set SQL ( get the password column in the members table where user_name is $name$ and id is $id$ ) , and use $db$ execute the SQL statement. If the first piece of data obtained is None, return Error; otherwise, return Correct.","public String getPwd ( JdbcTemplate db , String name , String id ) { List rows = db . query ( "" select password from members where user_name = ? and id = ? "" , new Object [ ] { name , id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return "" Error "" ; } else { return "" Correct "" ; } }"
"Use $conn$ to execute SQL ( query the id in the t table based on $x$ and $y$ ) and get the first piece of data. Finally, return the query results directly.","public List testKey ( JdbcTemplate conn , String x , String y ) { List id = conn . query ( "" select id from t where x = ? and y = ? "" , new Object [ ] { x , y } , new BeanPropertyRowMapper ( List . class ) ) ; return id ; }"
"Use $engine$ to get the database connection and execute SQL ( query all columns in the clock table based on $documents$ ) , get all the data, insert the data one by one into a list, and print the list.","public void select1 ( DataSource engine , String documents ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List data = con . query ( "" select * from clock where documents = ? "" , new BeanPropertyRowMapper ( List . class ) ) ; List time = new ArrayList ( ) ; for ( Object i : data ) { time . add ( i ) ; } System . out . println ( time ) ; }"
"If the request method is GET, execute the SQL using $conn$ ( GET all the columns in the books table where isbn is $isbn$ ) and GET all the data. Return the rendered libros.html page, where the book_detail parameter is the query result.","public Object selectBook ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List isbn_books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book_detail "" , isbn_books ) ; return "" libros.html "" ; } else { return null ; } }"
"Create a cursor with $connection$, execute SQL ( query the title column in the call_list table based on $id$ ) , get all the query results, close the connection, and return the query results.","public List getArticle ( JdbcTemplate connection , String id ) { List flash = connection . query ( "" select title from call_list where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return flash ; }"
"Use $conn$ to get a cursor and execute SQL ( query all columns in the catagory table based on $id$ ) and get all the query results. Use for loop to traverse all the obtained query results, output the 0th element of each piece of data, and return the query results.","public List importCat ( JdbcTemplate conn , String id ) { List cari = conn . query ( "" select * from catagory where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object record : cari ) { System . out . println ( JSONObject . parseObject ( record . toString ( ) ) . get ( 0 ) ) ; } return cari ; }"
"Use $conn$ to execute SQL ( get all columns in nhdz based on $username$ ) and get all the data, print the query result, and finally return the obtained result.","public List processItem ( JdbcTemplate conn , String username ) { List res = conn . query ( "" select * from nhdz where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; return res ; }"
"Get the database engine through $host$ where the parameter of client_encoding is 'utf8', and establish a connection. Set up sql ( query all columns in the query table based on $postgresql$ and $client$ ) , execute the SQL statement and get all the data, close the connection, and return the oth query data if there is query result; otherwise, return None.","public List executeQuery2 ( DataSource host , String postgresql , String client ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; List results = conn . query ( "" select * from query where postgresql = ? and client = ? "" , new Object [ ] { postgresql , client } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }"
"Use $conn$ to execute SQL ( query all columns in the users table ) . Close the connection after getting all the query results. Finally, return the query result.","public List task ( JdbcTemplate conn ) { List result = conn . query ( "" select * from users "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
Execute the SQL using $db$ ( query all the columns in the books table where isbn is $isbn$ ) and get all the data. Print query results. Return 'details.html' after rendering and passes the query result to the book parameter.,"public String detail ( JdbcTemplate db , String isbn , Model model ) { List book = db . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book "" , book ) ; return "" details.html "" ; }"
"Set up SQL ( all columns in imdb_movies are queried where movietitle is $movietitle$ ) , execute SQL with $conn$ to get all the data and convert it to list, and return list-style query results.","public List pertenece ( JdbcTemplate conn , String movietitle ) { List result = conn . query ( "" select * from imdb_movies where movietitle = ? "" , new Object [ ] { movietitle } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Connect to the database using $db$ , execute the SQL statement ( query all FaceVector in the FaceIDStore ) and get all the data. The for loop is used to store the 0th element of each item of the query result as a list and return it.","public List search ( DataSource db ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List results = conn . query ( "" select facevector from faceidstore "" , new BeanPropertyRowMapper ( List . class ) ) ; List face_vector = new ArrayList ( ) ; for ( Object row : results ) { face_vector . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return face_vector ; }"
"If the request module sends the request in the way of post, then execute SQL via $conn$ ( query 'email' in 'users' via $username$ and $password$ ) to get the first piece of data. If the query result is empty, render and return login.html, otherwise return the query result. If the request module sends the request in a way other than post, render and return login.html.","public Object login ( HttpRequest request , JdbcTemplate conn , String username , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List result = conn . query ( "" select email from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return "" login.html "" ; } else { return result . get ( 0 ) ; } } else { return "" login.html "" ; } }"
Execute the SQL ( query all columns in the flights where flight_id is $id$ ) using $db$ and get the first data. Print each item in the query result using a for loop.,"public void selectTable ( JdbcTemplate db , String id ) { List fs = db . query ( "" select * from flights where flight_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object f : fs ) { System . out . println ( f ) ; } }"
"Execute the SQL using $db$ ( querying the author information in the books table where isbn is $isbn$ ) and get the first data. If the result of the query is None, then 'ERROR' is returned; otherwise, the result of the query is returned.","public Object bookAuthors ( JdbcTemplate db , String isbn ) { List author = db . query ( "" select author from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( author . isEmpty ( ) ) { return "" Error "" ; } else { return author ; } }"
"Execute the SQL statement ( query all columns from the genres table ) through $db_conn$ to get all the data, convert the execution result to list and return.","public List getGenres ( JdbcTemplate db_conn ) { List db_result = db_conn . query ( "" select * from genres "" , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }"
Use $con$ to execute the SQL statement ( query all origin in the flights table ) . Use for loop traversal to query the results and print them.,"public void main ( JdbcTemplate con ) { List flights = con . query ( "" select origin from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( flight ) ; } }"
"Connect to the database via $e$, execute the SQL statement ( query all columns in titanic where message is $message$ ) to get all the data and return the query results.","public List get ( DataSource e , String message ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List list = conn . query ( "" select * from titanic where message = ? "" , new Object [ ] { message } , new BeanPropertyRowMapper ( List . class ) ) ; return list ; }"
"Try to use $connection$ to execute SQL ( get all the columns in the tools table where tool_name is $name$ ) , get all the data, then close the $connection$ connection and return the query result. If an exception occurs during execution, return 'fail'.","public Object getTools ( JdbcTemplate connection , String name ) { try { List results = connection . query ( "" select * from tools where tool_name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { return "" fail "" ; } }"
"Use $conn$ to execute SQL ( query the value column in the Passenger table according to $flight_id$ ) and get all the query results. If there are query results, return the rendered sucess.html page.","public String putDb ( JdbcTemplate conn , String flight_id ) { List passenger = conn . query ( "" select value from passenger where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passenger . isEmpty ( ) ) { return null ; } else { return "" sucess.html "" ; } }"
"Use $conn$ to execute SQL ( query all columns in the books table based on $book_id$ ) and get the first row of data. If the query result is empty, redirect to the 'index' page; otherwise, return the rendered book.html page and set the book parameter to the query result.","public String book ( JdbcTemplate conn , String book_id , Model model ) { List books = conn . query ( "" select * from books where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" index "" ; } else { model . addAttribute ( "" book "" , books . get ( 0 ) ) ; return "" book.html "" ; } }"
"Get the database engine through $pyhive_test_database$. Try to establish a connection, execute the SQL statement ( query all the columns in the TABLES table based on $one_row$ ) , get all the data, and return the query results. Finally, close all connections.","public List testSwitchDatabase ( DataSource pyhive_test_database , String one_row ) { try { JdbcTemplate connection = new JdbcTemplate ( pyhive_test_database ) ; List res = connection . query ( "" select * from TABLES where one_row = ? "" , new Object [ ] { one_row } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } finally { return null ; } }"
"Try to use $conn$ to execute SQL ( query the value in $mytable$ based on $username$ ) and get all the data. Finally, return the query result. If a SQLAlchemyError exception occurs, print a specific exception message, exit the program and set the exit code to 1.","public List getPercentile ( JdbcTemplate conn , String username ) { try { List information = conn . query ( "" select value from mytable where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return information ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Set the SQL statement ( query the newsids column in the Model table through $headline$ ) , execute SQL through $conn$, get all the data, and return it.","public List selectNewsid ( JdbcTemplate conn , String headline ) { List results = conn . query ( "" select newsids from model where headline = ? "" , new Object [ ] { headline } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use the string matching method to set sql ( query the amount of all the information in the exchange_ticker table based on $state$ ) , try to use $conn$ to execute SQL and get the first piece of data, and output this exception if an Exception occurs during execution. Finally, return the 0th character of the 0th piece of data of the query result.","public Object tickerCount ( JdbcTemplate conn , String state ) { Object count = null ; try { List results = conn . query ( "" select count(*) from exchange_ticker where state = ? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; count = JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return count ; }"
"Get the database engine and establish the connection through $db$. Execute the SQL statement ( query all columns in the Alltypes where State is $State$ ) and get all the data to convert the query results to DataFrame type. Return all the query results after the to_json method of the DataFrame is processed, where the orient parameter is 'records'.","public JSONObject selectData ( DataSource db , String State ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List data = conn . query ( "" select * from alltypes where state = ? "" , new Object [ ] { State } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" orient "" , "" records "" ) ; jsonObject . put ( "" data "" , data ) ; return jsonObject ; }"
"Try to execute SQL with $conn$ ( get the metalinks column in published based on $identifier$ ) and get all the data. Use dumps to process 'MSG' and query result and return. If not, use dumps to process 'MSG':'Gagal unpublish servis CSW!', and finally return the content processed by dumps.","public JSONObject pycswdel ( JdbcTemplate conn , String identifier ) { JSONObject jsonObject = new JSONObject ( ) ; try { List msg = conn . query ( "" select metalinks from published where identifier = ? "" , new Object [ ] { identifier } , new BeanPropertyRowMapper ( List . class ) ) ; jsonObject . put ( "" Msg "" , msg ) ; } catch ( Exception e ) { jsonObject . put ( "" Msg "" , "" Gagal unpublish servis CSW! "" ) ; } return jsonObject ; }"
"Use $DATABASEURI$ to get the database engine and connect to the database, execute SQL ( get all the columns in the myinsert where name is $name1$ ) and get all the data, and finally return the rendered profile.html with the rows_user parameter as the result of the query.","public String profile ( DataSource DATABASEURI , String name1 , Model model ) { JdbcTemplate con = new JdbcTemplate ( DATABASEURI ) ; List rows_user = con . query ( "" select * from myinsert where name = ? "" , new Object [ ] { name1 } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rows_user "" , rows_user ) ; return "" profile.html "" ; }"
"Use $connstr$ to get the database engine and connect to the database, where the echo parameter is True, then execute the SQL ( get the DATABASE in the data_warehouse_admin where name is $name$ ) and get all the data, then make sure the connection is closed, and finally return the query results.","public List selectDb ( DataSource connstr , String name ) { JdbcTemplate engine = new JdbcTemplate ( connstr ) ; List res = engine . query ( "" select DATABASE from data_warehouse_admin where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Set SQL ( query all columns in playertable where uid is $uid$ ) , execute SQL with $conn$ connection to get all data, render and return 'transactions.html', where the trans parameter is the result of the query.","public String transac ( JdbcTemplate conn , String uid , Model model ) { List result = conn . query ( "" select * from playertable where uid = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" trans "" , result ) ; return "" transactions.html "" ; }"
"Use $conn$ to execute SQL ( query all columns in the rows_1 table according to $id$ ) , get all the query results, set the assertion to determine whether the returned result is equal to the empty set, and finally return the query result","public List testFunctions ( JdbcTemplate conn , String id ) { List stmt = conn . query ( "" select * from rows_1 where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert stmt . size ( ) != 0 ; return stmt ; }"
"Use $conn$ to execute SQL ( query the name column in the passengers table according to $flight_id$ ) and get all the query results. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page.","public String selectFlight ( JdbcTemplate conn , String flight_id ) { List names_val = conn . query ( "" select name from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( names_val . isEmpty ( ) ) { return "" error.html "" ; } else { return "" flight.html "" ; } }"
"Execute the SQL ( query data in the ins00 table when the id is $value$ ) using $db$ and get the first data. Use the for loop to store element 0 for each item in the query result in a list. Finally, we use the join method to convert the list result into a string and return it.","public JSONArray findText ( JdbcTemplate db , String value ) { List text = db . query ( "" select data from ins00 where id = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object o : text ) { result . add ( JSONObject . parseObject ( o . toString ( ) . toString ( ) ) . get ( 0 ) ) ; } return JSONObject . parseArray ( result . toString ( ) ) ; }"
"Use $conn$ to execute SQL ( get all the columns in the 'table' table according to $stromsonst$ ) , get the first data, and finally return the last element of the query result.","public Object getLastRow ( JdbcTemplate conn , String stromsonst ) { List rows = conn . query ( "" select * from table where stromsonst = ? "" , new Object [ ] { stromsonst } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = rows . get ( - 1 ) ; return row ; }"
"Use the $conn$ connection to execute the SQL statement ( get all the columns in the users table based on $username$ and $password$ ) and get all the data. If the length of the query result is not 0, print the query result; otherwise, return Account does not exist.","public Object user ( JdbcTemplate conn , String username , String password ) { List query = conn . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( query . isEmpty ( ) ) { return "" Account does not exist "" ; } else { System . out . println ( query ) ; return query ; } }"
"Execute the SQL ( get all the columns in the pg_database where dbname is $dbname$ ) with $conn$, get all the data, and return the query results.","public List sqlCheckDatabase ( JdbcTemplate conn , String dbname ) { List res = conn . query ( "" select * from pg_database where dbname = ? "" , new Object [ ] { dbname } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $engine$ to get cursor, set SQL ( query all information in table_name table based on $key$ ) , execute SQL and get all the query results. Close the connection and return the query results.","public List searchData ( DataSource engine , String key ) { JdbcTemplate cursor = new JdbcTemplate ( engine ) ; List records = cursor . query ( "" select * from table_name where key = ? "" , new Object [ ] { key } , new BeanPropertyRowMapper ( List . class ) ) ; return records ; }"
"Execute SQL with $conn$ ( query all columns in the master table according to $cookies$ ) , get all the query results, print and return the 0th element of the query result.","public Object makeQuery ( JdbcTemplate conn , String cookies ) { List results = conn . query ( "" select * from master where cookies = ? "" , new Object [ ] { cookies } , new BeanPropertyRowMapper ( List . class ) ) ; Object first_row = results . get ( 0 ) ; System . out . println ( first_row ) ; return first_row ; }"
Use $conn$ to execute SQL ( get num column in the mytable table based on $id$ ) and get all the data. Finally set assertion that the length of the query results is 1.,"public void selectNum ( JdbcTemplate conn , String id ) { List rows = conn . query ( "" select num from mytable where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert rows . size ( ) == 1 ; }"
Use $engine$ to connect to the database. Set up the SQL statement ( query all columns in the transactions table based on $bar$ ) and execute the SQL statement to get all the data. Convert each item of the query result into dict and store it as list and return it.,"public List getLargestSpenders ( DataSource engine , String bar ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from transactions where bar = ? "" , new Object [ ] { bar } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
Execute the SQL ( query all columns in the student where username is $name$ ) using $db$ and get the first data. Return if the query result exists.,"public List getStudent ( JdbcTemplate db , String name ) { List res = db . query ( "" select * from student where username = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }"
"Use $session$ to execute SQL ( query the country information in the actions table based on $ID$ ) , get all the data, and close $session$. Store the 0th element of each item in the query result into list, use for loop to print each item of data in list, and finally, return the data in list.","public List country ( JdbcTemplate session , String ID ) { List s = session . query ( "" select country from actions where ID = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; List data = new ArrayList ( ) ; for ( Object o : s ) { data . add ( JSONObject . parseObject ( o . toString ( ) ) . get ( 0 ) ) ; } for ( Object x : data ) { System . out . println ( x ) ; } return data ; }"
"Try to execute the following code: Use $db_connect$ to get the connection; use the connection to execute SQL ( query all columns in the ticket table ) ; use the keys of the execution result as a key in the dictionary, each item in the result cursor as value, and finally store the dictionary in list; use jsonify to return the processed dictionary. If an exception occurs, return the {'error': fail} that is processed by jsonify.","public Object dbConnect ( DataSource db_connect ) { try { JdbcTemplate engine = new JdbcTemplate ( db_connect ) ; List result = engine . query ( "" select * from ticket "" , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( result . toString ( ) ) ; } catch ( Exception e ) { JSONObject json = new JSONObject ( ) ; json . put ( "" error "" , "" fail "" ) ; return json ; } }"
"Use $conn$ to execute the SQL statement ( query all the columns in the happiness ) to get all the data, convert each item of the obtained data into dict, store it as list, and use jsonify to return the list content.","public JSONObject happynessIndex ( JdbcTemplate conn , String datum ) { List data = conn . query ( "" select * from happiness "" , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" data "" , data ) ; return jsonObject ; }"
"Connect to the database according to $engine$. Set the SQL statement ( get the statistics of the ovie_id data from the links table ) , execute the SQL, and get the first piece of data. If the data obtained is not empty, return the query result; otherwise, return 'fail' through logging.error ( ) .","public Object query ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List count = conn . query ( "" select count(ovie_id) from links "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( count . isEmpty ( ) ) { return "" fail "" ; } else { return count ; } }"
"Set up SQL ( query SQL column in sqlite_master table based on $type$ ) , use $conn$ to execute SQL and get the first piece of data, and return the 0th element of the query result.","public Object getTableSchema ( JdbcTemplate conn , String type ) { List res = conn . query ( "" select sql from sqlite_master where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }"
Use $conn$ to execute SQL ( query the review information in the reviews table based on $user_id$ and $book_id$ ) and get all the data. Pass in the query result as the review parameter and navigate to the book page through url_for and redirect.,"public Object submitReview ( JdbcTemplate conn , String user_id , String book_id , Model model ) { List review = conn . query ( "" select review from reviews where user_id = ? and book_id = ? "" , new Object [ ] { user_id , book_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" review "" , review ) ; return "" book "" ; }"
"Execute SQL through $conn$ ( query the first title data in books based on $isbn$ ) , render and return 'book_select.html', where the title parameter is the query result.","public Object bookSelect ( JdbcTemplate conn , String isbn , Model model ) { List result = conn . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" title "" , result ) ; return "" book_select.html "" ; }"
Use $conn$ to execute the SQL ( get the value column in stats_master table based on $id$ ) . Then use for loop to convert each item of the query results into list and finally return the list.,"public List getStatsMaster ( JdbcTemplate conn , String id ) { List result_proxy = conn . query ( "" select value from stats_master where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List a = new ArrayList ( ) ; for ( Object r : result_proxy ) { a . add ( r ) ; } return a ; }"
"Execute SQL with $conn$ ( get the user_id column in the query_users table processed by the count method where name is $name$ ) and get the first data, then close the $Conn$ connection and return the query results.","public List testTransactionClose ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select count(user_id) from query_users where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Use $conn$ to execute the SQL statement ( get all the columns in the books table based on $isbn$ and get the first piece of data. If the query result is empty, return None; if the request module sends the request in a way that renders for post, return book.html, where the book parameter is the query result.","public Object login ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return null ; } if ( request . getMethod ( ) . equals ( "" POST "" ) ) { model . addAttribute ( "" book "" , books . get ( 0 ) ) ; return "" book.html "" ; } return null ; }"
Set up SQL ( query all columns in orderItem based on $orderId$ ) . Use $conn$ to execute SQL and get all the data. Close the connection and return the query results.,"public List getOrder ( JdbcTemplate conn , String orderId ) { List execResults = conn . query ( "" select * from orderitem where orderid = ? "" , new Object [ ] { orderId } , new BeanPropertyRowMapper ( List . class ) ) ; return execResults ; }"
"Use the string matching to set SQL ( query all the information in the cars table based on $id$ ) . Use $conn$ to execute SQL, get all the query results, and return the query results.","public List findById ( JdbcTemplate conn , String id ) { List cars = conn . query ( "" select * from cars where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return cars ; }"
"Set SQL ( query all columns in the tablesModel table based on $col$ and $func_length$ ) , execute SQL based on $conn$, get the first piece of data, and return the 0th element of the data.","public Object getNaForAColumn ( JdbcTemplate conn , String col , String func_length ) { List qs = conn . query ( "" select * from tablesModel where col = ? and func_length = ? "" , new Object [ ] { col , func_length } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( qs . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }"
connect with the acquisition method of $engine$ execute SQL ( query the sanic_polls column of sanic_polls based on $id$ )  get all the data and finally return the query result.,"public List prepareDb ( DataSource engine , String id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select sanic_polls from sanic_polls where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use for loop to iterate through each element in $items$, set up SQL ( query all the information in the 'table' table based on 'item' which is every piece of the result after iteration ) , use $conn$ to execute the SQL and get all the query results, store the obtained query results in a list, and finally return the list.","public List getMasterData ( JdbcTemplate conn , List items ) { List to_return = new ArrayList ( ) ; for ( Object item : items ) { List results = conn . query ( "" select * from table where item = ? "" , new Object [ ] { item } , new BeanPropertyRowMapper ( List . class ) ) ; to_return . add ( results ) ; } return to_return ; }"
"Set the SQL statement ( query all the columns in the vocabulary table based on $word$ ) and use $conn$ to execute SQL to get the first piece of data. If the execution result exists, it is printed.","public void dictate ( JdbcTemplate conn , String word ) { List vocabulary_rows = conn . query ( "" select * from vocabulary where word = ? "" , new Object [ ] { word } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! vocabulary_rows . isEmpty ( ) ) { System . out . println ( vocabulary_rows . get ( 0 ) ) ; } }"
"Execute the SQL ( query all columns in the flights where the flight_id is $id$ ) using $db$ and get all the data. Finally, print the query result.","public void flights ( JdbcTemplate db , String id ) { List res = db . query ( "" select * from flights where flight_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; }"
"Set the SQL statement ( get all the columns in the 'table' table based on $value$ ) , use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result, print it, store each element of the execution result into list and return the list content.","public List printTable ( JdbcTemplate conn , String value ) { List cols = conn . query ( "" select * from table where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List headers = new ArrayList ( ) ; for ( Object col : cols ) { System . out . println ( col ) ; headers . add ( col ) ; } return cols ; }"
"Execute the SQL ( get the columns ID, origin, destination, duration in the flights where id is $flight_id$ ) with $conn$ and get all the data. If the length of the query result is 0, print No flights. and return directly to the query result.","public List main ( JdbcTemplate conn , String flight_id ) { List res = conn . query ( "" select id, origin, destination, duration from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { System . out . println ( "" No flights. "" ) ; return null ; } else { return res ; } }"
"Set the SQL statement ( use the format ( ) function to format the output string, query all the columns in the users table through the string $id$ ) , execute SQL to get the first piece of data via the $conn$ connection, convert the execution result to dict and use jsonify to return.","public JSONObject getUserByid ( JdbcTemplate conn , String id ) { List users = conn . query ( "" select * from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( users . get ( 0 ) . toString ( ) ) ; }"
"Get the database connection from $engine$ and set the SQL ( query all the columns in the Works when the Barsname is equal to $name$ ) . Execute the SQL using the database connection and get all the data. Convert each item in the query result to type dict and return None if the result is empty after processing, otherwise return the query result.","public List findBartendersStartEnd ( DataSource engine , String name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from works where barsname = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }"
"Use $conn$ to execute SQL ( get the datname column in the pg_database ) to get all the data, store the 0th element of each item in the query result in a list and return.","public List searchName ( JdbcTemplate conn ) { List names = conn . query ( "" select datname from pg_database "" , new BeanPropertyRowMapper ( List . class ) ) ; List items = new ArrayList ( ) ; for ( Object i : names ) { items . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return items ; }"
"Use $conn$ to execute SQL ( query all columns in the pedidos table based on $clienteid$ ) and get all the data. Return empty if the length of the query result is 0, and use for loop to add each item in the query result to 'list' and return.","public List getHistorial ( JdbcTemplate conn , String clienteid ) { List result = conn . query ( "" select * from pedidos where clienteid = ? "" , new Object [ ] { clienteid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } List historial = new ArrayList ( ) ; for ( Object auxdic : result ) { historial . add ( auxdic ) ; } return historial ; }"
Use $conn$ to execute SQL ( get all columns in the players table based on $id$ ) and get all the data. Then set assertion that the length of query result is greater than 0.,"public void testEngineConnectExecute ( JdbcTemplate conn , String id ) { List results = conn . query ( "" select * from players where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert results . size ( ) > 0 ; }"
"connect the database through $engine$, execute SQL ( get all the counted columns in the 'table' table where invoicedate is $date$ ) , get all the data, and finally print the query result.","public void getTableNum ( DataSource engine , String date ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List num = connection . query ( "" select count(*) from table where invoicedate = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( num ) ; }"
"Execute the SQL statement ( query all the columns in neihan ) with $conn$, get all the data and return.","public List searchNeihan ( JdbcTemplate conn ) { List neihan_results = conn . query ( "" select * from neihan "" , new BeanPropertyRowMapper ( List . class ) ) ; return neihan_results ; }"
"Execute the SQL ( query all the columns in content_table where title is $title$ ) with $conn$ and get all the data. Return False if the result is None, otherwise the query result is returned.","public Object selectEntry ( JdbcTemplate conn , String title ) { List testrow = conn . query ( "" select * from content_table where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( testrow . isEmpty ( ) ) { return false ; } else { return testrow ; } }"
"Use $conn$ to execute SQL ( query the values column in the card table based on $cardType_id$ and $cardType_name$ ) , get the first row of data, and return the data.","public List insertDummyCardType ( JdbcTemplate conn , String cardType_id , String cardType_name ) { List ins = conn . query ( "" select values from card where cardType_id = ? and cardType_name = ? "" , new Object [ ] { cardType_id , cardType_name } , new BeanPropertyRowMapper ( List . class ) ) ; return ins ; }"
"Set up SQL ( query all information in tbl table based on $value$ ) , execute SQL with $conn$ and get the cursor, use for loop to iterate through the results, convert each piece of data and its 'keys' value into tuple and pack it in zip. Then convert it into dict and insert it into a list, and finally return the list.","public List selectValue ( JdbcTemplate conn , String value ) { List records = conn . query ( "" select * from tbl where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List rs = new ArrayList ( ) ; for ( Object record : records ) { rs . add ( JSONObject . parseObject ( record . toString ( ) ) . getString ( "" keys "" ) ) ; } return rs ; }"
"Use $conn$ to execute SQL ( get the req_url_host column of httpreqs2 based on $devid$ ) , get all the data, use for loop to print the 0th element of each item in the query result, and finally return the query result.","public Object getUrls ( JdbcTemplate conn , String devid ) { List res = conn . query ( "" select req_url_host from httpreqs2 where devid = ? "" , new Object [ ] { devid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return false ; } else { for ( Object r : res ) { System . out . println ( JSONObject . parseObject ( r . toString ( ) ) ) ; } return res ; } }"
"Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement ( query the INTO column in the project table according to $telefone$ ) and get the first piece of data. If data is obtained, return True. If an exception is caught, return False.","public boolean getProvider ( DataSource db_string , String telefone ) { boolean res ; JdbcTemplate db = new JdbcTemplate ( db_string ) ; try { List don = db . query ( "" select INTO from project where telefone = ? "" , new Object [ ] { telefone } , new BeanPropertyRowMapper ( List . class ) ) ; res = true ; } catch ( Exception e ) { res = false ; } return res ; }"
"If the request method is' POST', use $conn$ to execute SQL ( query all columns in the users table where username is $user$ ) . If get the data, jump to the 'login' page; otherwise, jump to the' home' page and return the rendered 'login.html'.","public Object login ( HttpRequest request , JdbcTemplate conn , String user ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select * from users where username = ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return "" login "" ; } else { return "" home "" ; } } else { return "" login.html "" ; } }"
Connect to the database with $engine$ and execute SQL ( get all the columns in database based on $DATABASE_NAME$ ) and get all the data. Close the connection and finally return the query result.,"public List tearDown ( DataSource engine , String DATABASE_NAME ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select * from database where DATABASE_NAME = ? "" , new Object [ ] { DATABASE_NAME } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Set the SQL statement ( query all columns in BOOKS where id is $id$ ) . Execute the SQL statement with $conn$ and get all the data. If the query result is empty, render and return ""error"". Otherwise render and return ""book_detail.html"", where the parameter book is the result of the query.","public Object book ( JdbcTemplate conn , String id , Model model ) { List books_by_id = conn . query ( "" select * from books where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books_by_id . isEmpty ( ) ) { return "" error "" ; } else { model . addAttribute ( "" book "" , books_by_id ) ; return "" book_detail.html "" ; } }"
"Get the database engine where the name of db_engine is $db_engine_name$. Connect to the database based on the acquired database engine. Try to use the connection to execute an SQL statement ( query all year_id with an id of $id$ in the month table ) , print all the data, and set the query state to True. If an exception occurs during SQL execution, the query state is set to False, and finally the query state is returned.","public boolean checkGED ( DataSource db_engine_name , String id ) { boolean go ; try { JdbcTemplate engine = new JdbcTemplate ( db_engine_name ) ; List texts = engine . query ( "" select year_id from month where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( texts ) ; go = true ; } catch ( Exception e ) { go = false ; } return go ; }"
"Execute the SQL statement ( query the data column in the ins00 table according to $lname$ ) and get all the data, use for loop to insert each item of the query result into a list, and return the result with an undelimited string fromat.""","public String readDbData ( DataSource CONN_STRING , String lname ) { JdbcTemplate engine = new JdbcTemplate ( CONN_STRING ) ; List insurances = engine . query ( "" select data from ins00 where lname = ? "" , new Object [ ] { lname } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object ins : insurances ) { results . add ( ins ) ; } return results . toString ( ) ; }"
"Set up SQL ( query all columns in the orderdetail table based on $orderid$ ) , execute SQL based on $conn$, get all the query results, and return the data.","public List updateOrderdetail ( JdbcTemplate conn , String orderid ) { List res = conn . query ( "" select * from orderdetail where orderid = ? "" , new Object [ ] { orderid } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Open the ""flights.csv"" file. Use csv to read open files. For each origin information read, use $conn$ to execute the SQL statement ( query the information of the duration in the flights based on the origin ) and print the query results. Finally, close the open file.","public void readerSel ( JdbcTemplate conn ) { String filePath = "" flights.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String origin = sc . nextLine ( ) ; List result = conn . query ( "" select duration from flights where origin = ? "" , new Object [ ] { origin } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }"
Use $conn$ to execute SQL ( query all columns in the drop_table table ) . Use for loop to print each item of data in the query results.,"public void ResetTable ( JdbcTemplate conn ) { List res = conn . query ( "" select * from drop_table "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : res ) { System . out . println ( i ) ; } }"
Use the $con$ connection to execute the SQL statement ( get the first origin and destination in the flights table based on $flight_id$ ) . Return False if the execution result is empty. Use for loop traversal to execute the result and print it.,"public boolean main ( JdbcTemplate conn , String flight_id ) { List flights = conn . query ( "" select origin, destination from flights where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object f : flights ) { System . out . println ( f ) ; } if ( flights . isEmpty ( ) ) { return false ; } else { return true ; } }"
Create the database engine via $connection$. Execute SQL ( query all the id data in the pg_tables table based on $name$ ) . Use for loop to store each element in the query results into 'list' and return the list content.,"public List getId ( DataSource connection , String name ) { JdbcTemplate engine = new JdbcTemplate ( connection ) ; List res = engine . query ( "" select id from pg_tables where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List ret = new ArrayList ( ) ; for ( Object row : res ) { ret . add ( row ) ; } return ret ; }"
"Use $connection_string$ to get the database engine, try to execute SQL ( get all the columns in the 'table' table where table_id is $tid$ ) and get all the data, return the query results, and print the exception if there is an exception during execution.","public List getTabel ( DataSource connection_string , String tid ) { try { JdbcTemplate engine = new JdbcTemplate ( connection_string ) ; List ret_data = engine . query ( "" select * from table where table_id = ? "" , new Object [ ] { tid } , new BeanPropertyRowMapper ( List . class ) ) ; return ret_data ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Use $conn$ to create a cursor object and execute a SQL statement through the cursor object ( query all columns from the customer table ) , get all the data, and print the query results.","public void testSqlite3 ( JdbcTemplate conn ) { List res = conn . query ( "" select * from customer "" , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; }"
"Use $engine$ to get the connection, and execute SQL based on the connection ( query the fullname information in the users table when name is listed as $name$ ) and get the first piece of data. Finally, print the query results","public void nameInsert ( DataSource engine , String name ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List myfullname = conn . query ( "" select fullname from users where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( myfullname ) ; }"
"Get the database engine through $dburi$, where convert_unicode parameter is False and echo parameter is False, execute SQL ( get the greylist_stamp column in the greylist table where greylist_id is $gid$ ) , get all the data, and finally return the query result.","public List main ( DataSource dburi , String gid ) { JdbcTemplate engine = new JdbcTemplate ( dburi ) ; List gstamps = engine . query ( "" select greylist_stamp from greylist where greylist_id = ? "" , new Object [ ] { gid } , new BeanPropertyRowMapper ( List . class ) ) ; return gstamps ; }"
"Use $root_user$ to get the database engine and connect. Set the SQL statement: get all the columns in the database table based on $value$. Try to execute the SQL statement to get all the data, make sure the database connection is closed, and return the execution result. If an Exception occurs, use logging.warn ( ) to return exception information.","public List selectData ( DataSource root_user , String value ) { try { JdbcTemplate engine = new JdbcTemplate ( root_user ) ; List results = engine . query ( "" select * from database where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Set the SQL ( get the name column in the tbl table based on $id$ ) , set the assertion to determine that $cursor$ is not closed. Execute the SQL statement through $cursor$. Use for loop to convert each item of data in $cursor$ into list and return it in the case of processing $cursor$.","public List testCursor ( JdbcTemplate cursor , String id ) { List ret = cursor . query ( "" select name from tbl where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return ret ; }"
Create a database engine via $sql_str$. Execute the SQL statement ( get the alembic in the migrations table according to $url$ ) to get all the data and return the obtained data.,"public List queryDb ( DataSource sql_str , String url ) { JdbcTemplate engine = new JdbcTemplate ( sql_str ) ; List res = engine . query ( "" select alembic from migrations where url = ? "" , new Object [ ] { url } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $conn$ to execute SQL ( get the origin table in flights table where is destination $dest$ and duration is $dur$ ) , get all the data, and finally print the query result.","public void main ( JdbcTemplate conn , String dest , String dur ) { List res = conn . query ( "" select origin from flights where destination = ? and duration = ? "" , new Object [ ] { dest , dur } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; }"
"Use $conn$ to execute SQL ( query all columns in the secrets table based on $secret_uuid$ ) and get all the query data, use for loop to traverse all the obtained query results, convert the 0th element of each piece of data into a string and insert it into a list.","public List testActiveSecretNotDeleted ( JdbcTemplate conn , String secret_uuid ) { List results = conn . query ( "" select * from secrets where secret_uuid = ? "" , new Object [ ] { secret_uuid } , new BeanPropertyRowMapper ( List . class ) ) ; List secret_list = new ArrayList ( ) ; for ( Object row : results ) { secret_list . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) . toString ( ) ) ; } return secret_list ; }"
"Use $tlengine$ to connect to the database, try to execute SQL ( get the user_id column of users based on $user_name$ ) and get all the data. Return the query result and finally ensure that the connection is closed.","public List testmixednesting ( DataSource tlengine , String user_name ) { JdbcTemplate external_connection = new JdbcTemplate ( tlengine ) ; try { List res = external_connection . query ( "" select time from comments where summary = ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } finally { return null ; } }"
"Create the database engine using $host$ and get the connection. Experiment with using conn to execute SQL ( query all the columns in the database based on $root_user$ ) and get the first result. Close the connection and return data. If an exception occurs, logging.warn is used to record 'Fail'.","public List getRootUser ( DataSource host , String root_user ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; try { List user = conn . query ( "" select time from comments where summary = ? "" , new Object [ ] { root_user } , new BeanPropertyRowMapper ( List . class ) ) ; return user ; } catch ( Exception e ) { System . out . println ( "" Fail "" ) ; return null ; } }"
"Get database engine through $SQLALCHEMY_SERVER_URI$, where echo parameter is True. Execute SQL statement ( get the first piece of name data in model table through $mid$ ) and return query result.","public List queryInfo ( DataSource SQLALCHEMY_SERVER_URI , String mid ) { JdbcTemplate conn = new JdbcTemplate ( SQLALCHEMY_SERVER_URI ) ; List ot = conn . query ( "" select name from model where mid = ? "" , new Object [ ] { mid } , new BeanPropertyRowMapper ( List . class ) ) ; return ot ; }"
"Set up SQL ( query the email column in the userdetails table based on $survey$ ) , execute SQL based on $engine$ and get all the query result. Use for loop to convert each query result to dict, and store it in list and return.","public List getSurvey ( JdbcTemplate engine , String survey ) { List emails = engine . query ( "" select email from userdetails where survey = ? "" , new Object [ ] { survey } , new BeanPropertyRowMapper ( List . class ) ) ; return emails ; }"
"If the request request method is POST, use $conn$ to execute SQL ( query the password in the users table based on $username$ ) and get the first piece of data. If the query result is not None, return the rendered 'login.html'. Otherwise, return the query results.","public Object login ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user_datas = conn . query ( "" select password from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( user_datas . isEmpty ( ) ) { return "" login.html "" ; } else { return user_datas . get ( 0 ) ; } } else { return "" login.html "" ; } }"
"Try to use $conn$ to execute SQL ( query the id in user_dataset when $name$ is $username$ ) and get the first piece of data. When the keyword is id, return the corresponding value in the query result. If an SQLAlchemyError exception occurs, print 'Failed'.","public String importUser ( JdbcTemplate conn , String username ) { try { List rows = conn . query ( "" select id from user_dataset where name = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( rows . get ( 0 ) . toString ( ) ) . getString ( "" id "" ) ; } catch ( Exception e ) { System . out . println ( "" Failed "" ) ; return null ; } }"
"Execute the SQL ( get all the columns in the flights where origin is $origin$, destination is $destination$, and duration is $duration$ ) with $conn$, get all the data, and return the query results.","public List main ( JdbcTemplate conn , String origin , String destination , String duration ) { List res = conn . query ( "" select * from flights where origin = ? and destination = ? and duration = ? "" , new Object [ ] { origin , destination , duration } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
Use $conn$ to execute the SQL ( get the login column in the USER table based on $id$ ) and get all the data. Then use for loop to store each item of the query results as list and return the contents of the list.,"public List getEvent ( JdbcTemplate conn , String id ) { List logins = conn . query ( "" select login from user where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return logins ; }"
"Try to use $conn$ to execute SQL ( query all the information in the query_users table based on $tlengine$ ) , get the first piece of data, return the query results, and finally close the connection.","public Object testMorerollback0ffConn ( JdbcTemplate conn , String tlengine ) { try { List trans = conn . query ( "" select * from query_users where tlengine = ? "" , new Object [ ] { tlengine } , new BeanPropertyRowMapper ( List . class ) ) ; return trans . get ( 0 ) ; } finally { return null ; } }"
"If the request method of request is POST, use redirect and url_for to go to the 'code' page. Otherwise, use $db_file$ to create the database engine and get the connection. Execute the SQL ( query the description in the Course table where courseID is $courseID$ ) and get all the data. Close the connection and return the query results.","public Object editCourse ( HttpRequest request , DataSource db_file , String courseID ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { JdbcTemplate connection = new JdbcTemplate ( db_file ) ; List res = connection . query ( "" select description from course where courseid = ? "" , new Object [ ] { courseID } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } else { return "" code "" ; } }"
"Get the database engine and establish a connection through $call_center$. Execute the SQL statement ( query all the columns in the technician table based on $chat_id$ ) , get all the data, use for loop to store the 0th element of each item of the query result into list, and return the list content.","public List getTechInfoByChatId ( DataSource call_center , String chat_id ) { JdbcTemplate conn = new JdbcTemplate ( call_center ) ; List result = conn . query ( "" select * from technician where chat_id = ? "" , new Object [ ] { chat_id } , new BeanPropertyRowMapper ( List . class ) ) ; List res = new ArrayList ( ) ; for ( Object row : result ) { res . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return res ; }"
"If the request module sends the request as post, try to set up the SQL ( query all columns in users through $login$ ) , use the $conn$ connection to execute the SQL and get all the data. Convert each item of the query results into dict to store as list and return it. Otherwise, use raise to throw the exception.","public Object login ( HttpRequest request , JdbcTemplate conn , String login ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { List entries = conn . query ( "" select * from users where login = ? "" , new Object [ ] { login } , new BeanPropertyRowMapper ( List . class ) ) ; return entries ; } catch ( Exception e ) { return e ; } } else { return null ; } }"
"Get the database engine and establish a connection through $url$. Execute the SQL statement ( query the form column in the odkform table according to $project_id$ and $form_id$ ) , get the first result, close all connections, and return the query results.","public Object getFormDetails ( DataSource url , String project_id , String form_id ) { JdbcTemplate engine = new JdbcTemplate ( url ) ; List results = engine . query ( "" select form from odkform where project_id = ? and form_id = ? "" , new Object [ ] { project_id , form_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( get all the columns in the user_rev1 based on $subtitle$ ) , get all the data, print the query result, and finally return the rendered ""users.html"", where the users parameter is the query result.","public String registration ( JdbcTemplate conn , String subtitle , Model model ) { List users = conn . query ( "" select * from user_rev1 where subtitle = ? "" , new Object [ ] { subtitle } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( users ) ; model . addAttribute ( "" Users "" , users ) ; return "" users.html "" ; }"
"Establish a connection via $engine$. Set the SQL statement ( query all the columns in the FLOWERS table based on $name$ ) , use connection to execute SQL, close the connection, and return the rendered ""home.html"" page, where the flowers parameter is set to the query result.","public String getFlowers ( DataSource engine , String name , Model model ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List flowers = connection . query ( "" select * from flowers where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flowers "" , flowers ) ; return "" home.html "" ; }"
"Open the books.csv file and read, use for loop traversal to read the content of the file, use $conn$ to execute SQL ( query all 'author' in the books table through pubyear ) and print the results.","public void main ( JdbcTemplate conn ) { String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String pubyear = sc . nextLine ( ) ; List res = conn . query ( "" select author from books where pubyear = ? "" , new Object [ ] { pubyear } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }"
"Get database engine by $database_uri$ and establish connection, try to execute SQL statement ( get user in USER according to 'PASSWORD': $password$ ) , get all data after execution and return. If an Exception occurs during execution, return the error message ""Error assigning permissions"".","public List createUser ( DataSource database_uri , String password ) { JdbcTemplate conn = new JdbcTemplate ( database_uri ) ; try { List res = conn . query ( "" select user from USER where PASSWORD = ? "" , new Object [ ] { password } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { System . out . println ( "" Error assigning permissions "" ) ; return null ; } }"
"Get the database engine using $greencouriers$ and establish the connection ( where echo parameter is True, encoding parameter is 'utf-8' ) . Try to execute the SQL statement ( query the first piece of name data in the countries table based on $id$ ) . Close the database connection and return the query result. If UnicodeDecodeError exception occurs, use raise to throw an Exception ( ) exception.","public Object countries ( DataSource greencouriers , String id ) { JdbcTemplate conn = new JdbcTemplate ( greencouriers ) ; try { List out = conn . query ( "" select name from countries where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return out ; } catch ( Exception e ) { return e ; } }"
"Execute SQL with $session$ ( get all the columns in the target table where id is $uuids$ ) , get all the data, then close the $session$ connection, and finally return the query result.","public List getOgetTargetne ( JdbcTemplate session , String uuids ) { List targets = session . query ( "" select * from target where id = ? "" , new Object [ ] { uuids } , new BeanPropertyRowMapper ( List . class ) ) ; return targets ; }"
Execute SQL through $pgconn$ ( get the maximum value of id column in the 'table' table ) and get the first piece of data. Finally return the 0th element of the query result.,"public Object getPkSequence ( JdbcTemplate pgconn ) { List rs = pgconn . query ( "" select max(id) from tables "" , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( rs . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }"
"If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the logins table based on $username$ and $password$ ) , get all the data, and return the query results; otherwise, return the rendered ""login.html"" page.","public Object login ( HttpRequest request , JdbcTemplate conn , String username , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select * from logins where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; } else { return "" login.html "" ; } }"
"Execute SQL ( get all the columns in USER_LIST where UID is $UID$ and LID is $LID$ ) with $conn$, get all the data, then close the $Conn$ connection and return the query results.","public List getUserList ( JdbcTemplate conn , String UID , String LID ) { List res = conn . query ( "" select * from USER_LIST where UID = ? and LID = ? "" , new Object [ ] { UID , LID } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
Use $engine$ to get the connection. Use the connection to execute the SQL ( query all columns in the growth ) and get all the data. Close the connection and return the query results.,"public List queryGrow ( DataSource engine ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List result = connection . query ( "" select * from growth "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Try to execute SQL via $conn$ ( get all the columns in the dbkoppelusers based on $dbnr$ ) and get all the data, return the query result, and print the exception if there is an exception.","public List getDBUsers ( JdbcTemplate conn , String dbnr ) { try { List rows = conn . query ( "" select * from dbkoppelusers where dbnr = ? "" , new Object [ ] { dbnr } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
Use the $conn$ connection to execute SQL ( query all the name data in the falcon_portal_test table through $t_id$ ) . Returns the query results.,"public List teardown ( JdbcTemplate conn , String t_id ) { List result = conn . query ( "" select name from falcon_portal_test where t_id = ? "" , new Object [ ] { t_id } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Execute SQL with $conn$ ( query the isbn column in the books table according to $title$ ) , get all the query results, print them, and return the query results.","public List importData ( JdbcTemplate conn , String title ) { List result = conn . query ( "" select isbn from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; return result ; }"
"Connect the database with $db$, try to execute SQL ( query all columns in the users table according to $user_name$ ) , get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection.","public List testWithInterface ( DataSource db , String user_name ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; try { List res = engine . query ( "" select * from users where user_name = ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }"
"Connect to the database with $engine$. Execute the SQL statement ( query all s_id in the seasons table where id is $id$ ) , and convert each query item into dict and store it as a list and return it.","public List queryPage ( DataSource engine , String id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List s_idata = conn . query ( "" select s_id from seasons where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return s_idata ; }"
"Set the SQL statement ( Format the output string with the format ( ) function, query the grade data in the acceleration using the string $time_val$ ) , execute the SQL statement with the $conn$ join and get all the data. Then use jsonify to return the query results.","public JSONArray accelerationHour ( JdbcTemplate conn , String time_val ) { List time_data = conn . query ( "" select grade from acceleration where time_val = ? "" , new Object [ ] { time_val } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( time_data . toString ( ) ) ; }"
Execute the SQL and get all the data ( get all rows in the query_users ) using $connection$. Close the database connection and return the result of the query.,"public Object searchCount ( JdbcTemplate connection ) { List count = connection . query ( "" select count(*) from query_users "" , new BeanPropertyRowMapper ( List . class ) ) ; return count ; }"
"Use $testing$ to connect the database and execute SQL ( get all the counted columns in the query_users table when user_id is $uid$ ) and get all the data, further set the assertion, the length of the query result is 1, and finally close the connection.","public void dbConnect ( DataSource testing , String uid ) { JdbcTemplate engine = new JdbcTemplate ( testing ) ; List result = engine . query ( "" select count(*) from query_users where user_id = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) == 1 ; }"
"Connect the database through $e$ and execute SQL ( query the statel column in the lsstate table according to $lettershop$ ) , get all the query results, print them and return.","public List get ( DataSource e , String lettershop ) { JdbcTemplate engine = new JdbcTemplate ( e ) ; List result = engine . query ( "" select statel from lsstate where lettershop = ? "" , new Object [ ] { lettershop } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; return result ; }"
"get the database connection based on $engine$. Execute the SQL statement ( query all the columns in the Sells table where price is $price$ ) , get all the data, convert each item of the query result to dict, store it as list, and return the query result.","public List filterBeers ( DataSource engine , String price ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from sells where price = ? "" , new Object [ ] { price } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"If the request module sends the request in a post method, use $conn$ to execute SQL ( query all the columns in the names table through $aname$, get all the data, and print the query results. Use redirect to return the 'index' spliced by url_for, where the names parameter is the query result.","public String index ( HttpRequest request , JdbcTemplate conn , String aname , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List names = conn . query ( "" select * from names where aname = ? "" , new Object [ ] { aname } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( names ) ; model . addAttribute ( "" names "" , names ) ; return "" index "" ; } else { return null ; } }"
"Try to use $conn$ to execute SQL ( query the passwd column in the ROLE table according to $name$ ) , get all the data, and return the query data. If an exception occurs during execution, return False.","public Object sqlGetUser ( JdbcTemplate conn , String name ) { try { List comando = conn . query ( "" select passwd from role where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return comando ; } catch ( Exception e ) { return false ; } }"
"Use $conn$ to execute SQL ( get all the columns in the flights based on $index$ ) , get all the data, and finally return the rendered 'index.html', where the flights parameter is the query result.","public String index ( JdbcTemplate conn , String index , Model model ) { List flights = conn . query ( "" select * from flights where index = ? "" , new Object [ ] { index } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights ) ; return "" index.html "" ; }"
"connect the database according to $engine$. Execute SQL ( query the name column in the beers table according to $manf$ ) , get all the query results, and convert each item of the query result to dict, store it as list, and return.","public List getBeers ( DataSource engine , String manf ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select name from beers where manf = ? "" , new Object [ ] { manf } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }"
"Execute SQL with $conn$ ( query all columns in the imdb_movies table according to $genreid$ ) , get all the data, convert the query results to list and return.","public List getMoviesByGenre ( JdbcTemplate conn , String genreid ) { List db_result = conn . query ( "" select * from imdb_movies where genreid = ? "" , new Object [ ] { genreid } , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }"
"Use $conn$ to execute SQL ( query all the columns in the username table according to $autocommit$ ) , get all the data, and output the query results.","public void testMixedTransactionClose ( JdbcTemplate conn , String autocommit ) { List eq = conn . query ( "" select * from username where autocommit = ? "" , new Object [ ] { autocommit } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( eq ) ; }"
Get database engine through $db_string$ and execute SQL ( get all columns in tb_produtos table based on $id$ ) and get all the data. Finally return the query results.,"public List getProdutos ( DataSource db_string , String id ) { JdbcTemplate con = new JdbcTemplate ( db_string ) ; List produtos = con . query ( "" select * from tb_produtos where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return produtos ; }"
Use the $conn$ connection to execute the SQL statement ( query the statistical values of all columns in GEI_DNS_MANUAL based on $domain$ ) and get all the data. Set an assertion to determine that the length of the returned result is greater than 0.,"public void checkExistsDomain ( JdbcTemplate conn , String domain ) { List res = conn . query ( "" select count(*) from gei_dns_manual where domain = ? "" , new Object [ ] { domain } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) > 0 ; }"
"Get the database engine with $postgresql_uri$, execute the SQL statement ( get all the columns in the owner where asterisk is $asterisk$ ) , get all the data after execution and return.","public List selectOwner ( DataSource postgresql_uri , String asterisk ) { JdbcTemplate engine = new JdbcTemplate ( postgresql_uri ) ; List results = engine . query ( "" select * from owner where asterisk = ? "" , new Object [ ] { asterisk } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use the $DATABASEURI$ to get the database engine and connect to the database, then execute the SQL ( get all the columns in the players where employees_ssn is $employees_ssn$ ) and get all the data, and finally return the query results.","public List initpSql ( DataSource DATABASEURI , String employees_ssn ) { JdbcTemplate conn = new JdbcTemplate ( DATABASEURI ) ; List rows_player = conn . query ( "" select * from players where employees_ssn = ? "" , new Object [ ] { employees_ssn } , new BeanPropertyRowMapper ( List . class ) ) ; return rows_player ; }"
"Use $db_connect$ to connect the database and execute SQL ( get all the columns in the employee1 table according to $country$ ) and get all the data. If the length of the query result is 0, return None; otherwise, return the query result.","public List getEmployee ( DataSource db_connect , String country ) { JdbcTemplate conn = new JdbcTemplate ( db_connect ) ; List result = conn . query ( "" select * from employee1 where country = ? "" , new Object [ ] { country } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }"
"Get the database engine and establish a connection through $BASEWEB$. Execute the SQL statement ( get all the columns in the Offre based on $validation$ ) , get all the data and close the database connection. Use for loop traversal to query the results, print them and returns.","public List newOffer ( DataSource BASEWEB , String validation ) { JdbcTemplate connection = new JdbcTemplate ( BASEWEB ) ; List res = connection . query ( "" select * from Offre where validation = ? "" , new Object [ ] { validation } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object ite : res ) { System . out . println ( ite ) ; } return res ; }"
"Get the database engine and establish a connection through $url$. Set up the SQL statement ( query all the columns in the Users table according to $username$ ) , execute sql, get all the data, and return the query results.","public List createUser ( DataSource url , String username ) { JdbcTemplate connection = new JdbcTemplate ( url ) ; List res = connection . query ( "" select * from Users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Connect to the database using $testing$, execute the SQL ( get the user_id column in the query_users table that was processed by the counting method ) , get all the data, and finally return the result of the query.","public List testCommit ( DataSource testing ) { JdbcTemplate connection = new JdbcTemplate ( testing ) ; List result = connection . query ( "" select count(user_id) from query_users "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"Get the database engine and connect the database through $app$, execute SQL ( get the partner_uni column in the mapping table whose nus_module_1 is $module$ ) , get all the data, and finally return the query result.","public List moduleFilters ( DataSource app , String module ) { JdbcTemplate con = new JdbcTemplate ( app ) ; List unis = con . query ( "" select partner_uni from mapping where nus_module_1 = ? "" , new Object [ ] { module } , new BeanPropertyRowMapper ( List . class ) ) ; return unis ; }"
"Use $conn$ to execute SQL ( query the flight column in the passengers table based on $name$ ) and get the first piece of data. Return None if the query result is None; otherwise, use for loop to print the name attribute of each item of the query result.","public Object main ( JdbcTemplate conn , String name ) { List passengers = conn . query ( "" select flight from passengers where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passengers . isEmpty ( ) ) { return null ; } System . out . println ( JSONObject . parseObject ( passengers . get ( 0 ) . toString ( ) ) . getString ( "" name "" ) ) ; return passengers . get ( 0 ) ; }"
Execute the SQL based on $db$ ( querying the table information in the user_tables where tablename is $tablename$ ) and get the first data. Print and return query results.,"public Object searchTable ( JdbcTemplate db , String tablename ) { List res = db . query ( "" select table from user_tables where tablename = ? "" , new Object [ ] { tablename } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res . get ( 0 ) ) ; return res . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( query all columns in the users table according to $transfer$ ) , get all the data, return the rendered 'transfer.html' page, and pass the 'data' parameter as the returned data.","public Object transfer ( JdbcTemplate conn , String transfer , Model model ) { List data = conn . query ( "" select * from users where transfer = ? "" , new Object [ ] { transfer } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" data "" , data ) ; return "" transfer.html "" ; }"
"Execute SQL with $conn$ ( get the name column in the passengers table where the id of flight is $flight_id$ ) and get all the data. If the query result is None, return rendered ""error.html"" and finally rendered ""flight.html"" with the res parameter being the result of the query.","public String flight ( JdbcTemplate conn , String flight_id , Model model ) { List res = conn . query ( "" select name from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" res "" , res ) ; return "" flight.html "" ; } }"
"Execute SQL via $conn$ ( get server_info's sat_index column based on $state$ ) , get all the data, and finally return the query result.","public List unpackFile ( JdbcTemplate conn , String state ) { List data_query = conn . query ( "" select sat_index from server_info where state = ? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; return data_query ; }"
"If the passed $lname$ is empty, return ""Unavailable"" directly; if the request method is ""POST"", use $conn$ to execute the SQL statement ( query the title in the location table based on $lname$ ) and get all the data, and finally return the query result.","public Object event ( HttpRequest request , JdbcTemplate conn , String lname ) { if ( lname == null ) { return "" Unavailable "" ; } else { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select title from location where lname = ? "" , new Object [ ] { lname } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } else { return null ; } } }"
"Use $conn$ to execute the SQL ( get all columns in the users where username is $username$ and password is $password$ ) and get the first data if the method of the request is ""POST"" and return the query result if the result is true otherwise the method of the request is not ""POST"", return the rendered ""login.html"".","public Object login ( HttpRequest request , JdbcTemplate conn , String username , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List check_login_credentials = conn . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( check_login_credentials . isEmpty ( ) ) { return "" login.html "" ; } else { return check_login_credentials ; } } else { return "" login.html "" ; } }"
"If the request module sends the request as a post, execute the SQL statement using $conn$ ( query all columns in books where author is $author$ ) and get all the query results. Return all the data from the query.","public List searchValue ( HttpRequest request , JdbcTemplate conn , String author ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books_author = conn . query ( "" select * from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; return books_author ; } else { return null ; } }"
"Execute the SQL statement through the $con$ connection ( query all columns in the tbl_user table based on $username$ ) . If the number of rows of the query result is greater than or equal to 1, print ""find user"", render and return 'user/message.html'.","public String saveUser ( JdbcTemplate con , String username ) { List users_qry = con . query ( "" select * from tbl_user where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users_qry . size ( ) > 1 ) { System . out . println ( "" find user "" ) ; return "" user/message.html "" ; } else { return null ; } }"
"If $username$ is empty, return the rendered ""log-in.html"" page; otherwise, use $conn$ to execute SQL ( query the id column in the users table based on $username$ ) , get the first row of data, return the rendered ""log-in.html"" page, and set the ids parameter to the query result.","public String loginCheck ( JdbcTemplate conn , String username , Model model ) { if ( username == "" "" ) { return "" log-in.html "" ; } else { List ids = conn . query ( "" select id from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" ids "" , ids ) ; return "" log-in.html "" ; } }"
"Set up SQL ( query all columns in the view table based on $value$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List selectValue ( JdbcTemplate conn , String value ) { List results = conn . query ( "" select * from view where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List views = new ArrayList ( ) ; for ( Object v : results ) { views . add ( v ) ; } return views ; }"
"Use $connection$ to execute SQL ( query the title in the books table based on $isbn$ ) and get the first piece of data. Print the query results, and finally use the jsonify method to return the query results.","public JSONObject getJson ( JdbcTemplate connection , String isbn ) { List rows = connection . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( rows . get ( 0 ) ) ; return JSONObject . parseObject ( rows . get ( 0 ) . toString ( ) ) ; }"
"Use $conn$ to execute SQL ( query the name in the passengers table based on $flight_id$ ) and get all the data. If the query result is None, print ""fail"" and return it directly. Otherwise, use for loop to print the name property of each item in the query result.","public void flight ( JdbcTemplate conn , String flight_id ) { List passengers = conn . query ( "" select name from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passengers . isEmpty ( ) ) { System . out . println ( "" fail "" ) ; return ; } for ( Object passenger : passengers ) { System . out . println ( JSONObject . parseObject ( passenger . toString ( ) ) . getString ( "" name "" ) ) ; } }"
"Use the $db_conn$ cursor method to execute SQL ( get the TABLE_NAME column in the INFORMATION_SCHEMA based on $BASE_DB_DATABASE$ ) and get all the data, then use the for loop to convert each item of the query result to a list type, and finally return the list content.","public List getTableInfoList ( DataSource db_conn , String BASE_DB_DATABASE ) { JdbcTemplate engine = new JdbcTemplate ( db_conn ) ; List result = engine . query ( "" select table_name from information_schema where BASE_DB_DATABASE = ? "" , new Object [ ] { BASE_DB_DATABASE } , new BeanPropertyRowMapper ( List . class ) ) ; List tableInfoList = new ArrayList ( ) ; for ( Object row : result ) { tableInfoList . add ( row ) ; } return tableInfoList ; }"
"Get the database engine through $data_base$, initialize the log module, try to execute the SQL statement ( query all the columns in the data_ base table according to $destination$ ) , get all the data, and return the query results. If an Exception is caught, output the error log, and finally close all connections.","public List data ( DataSource data_base , String destination ) { JdbcTemplate engine = new JdbcTemplate ( data_base ) ; try { List rs = engine . query ( "" select * from data_base where destination = ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; } catch ( Exception e ) { System . out . println ( "" error "" ) ; return null ; } finally { return null ; } }"
Execute the SQL statement ( get the amount of data in the table ) with $conn$ and get the first row of data. Return the result of the query.,"public Object searchCount ( JdbcTemplate conn ) { List counts = conn . query ( "" select count(*) from table "" , new BeanPropertyRowMapper ( List . class ) ) ; return counts . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( query all columns in the pg_database table based on $datname$ ) and get the first query results. If the query result does not exist, return False. Otherwise, return the query result.","public Object createDatabase ( JdbcTemplate conn , String datname ) { List pg_datas = conn . query ( "" select * from pg_database where datname = ? "" , new Object [ ] { datname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( pg_datas . isEmpty ( ) ) { return false ; } else { return pg_datas . get ( 0 ) ; } }"
"connect the database according to $engine$. Set SQL ( query the number of userID columns in the proyecto_SI table based on $ratings$ ) , get all the query results, and return the 0th item of the query results.","public Object getAllUserCount ( DataSource engine , String ratings ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select count(userID) from proyecto_SI where ratings = ? "" , new Object [ ] { ratings } , new BeanPropertyRowMapper ( List . class ) ) ; return result . get ( 0 ) ; }"
Use $conn$ to execute SQL ( query all columns in the obj table based on $nodes$ ) and return all obtained query results.,"public List composeNodeQuery ( JdbcTemplate conn , String nodes ) { List rows = conn . query ( "" select * from obj where nodes = ? "" , new Object [ ] { nodes } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }"
"Connect to the database with $e$, execute the SQL ( get the lettershop column in lsstate where state is $state$ ) , get all the data, and finally return the query results.","public List get ( DataSource e , String state ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List result = conn . query ( "" select lettershop from lsstate where state = ? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"If the request module sends a request via POST, execute the SQL statement via $conn$ ( query the first user_id in the users table based on $username$ ) and return the query results.","public Object review ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user_ids = conn . query ( "" select user_id from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return user_ids . get ( 0 ) ; } else { return null ; } }"
