nl,code
"Use $testing$ to establish a connection, execute SQL ( query all columns in the deadlock_users table based on $user_id$ ) , get all the query results, close the connection, and return the query results.","public Object testRollbackDeadlock ( DataSource testing , Integer user_id ) { JdbcTemplate conn1 = new JdbcTemplate ( testing ) ; List < Object > res = conn1 . query ( "" select * from deadlock_users where user_id = ? "" , new Integer [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"connect the database according to $engine$. Execute the SQL statement ( get the statistics of all the columns in the Bills table based on $type$ ) , get all the data, convert each item of the query result to dict, store it as list and return.","public Object getData ( DataSource engine , Object type ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List < Object > rs = connection . query ( "" select count(*) from Bills where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > results = new ArrayList < Object > ( ) ; for ( Object result : rs ) { results . add ( new HashMap ( ) { { put ( "" type "" , result ) ; } } ) ; } return results ; }"
Use $conn$ to execute SQL ( get the name column in the Campground ) to get all the data and print each item in the query result using the for loop.,"public void searchName ( JdbcTemplate conn ) { List < Map < String , Object > > cities = conn . queryForList ( "" select name from Campground "" ) ; for ( Object city : cities ) { System . out . println ( city ) ; } }"
"Open the $input_file$ file, read the file, execute the 'next' command, traverse the title in the file and connect the database according to $db$. Execute SQL ( query all columns in the books table according to title ) , get all the query results and print them.","public void readCsv ( JdbcTemplate db , String input_file ) { try ( BufferedReader bufferedReader = new BufferedReader ( new InputStreamReader ( new FileInputStream ( input_file ) ) ) ) { String line ; while ( ( line = bufferedReader . readLine ( ) ) != null ) { List < Object > res = db . query ( "" select * from books where title = ? "" , new Object [ ] { line } , new BeanPropertyRowMapper < > ( Object . class ) ) ; System . out . println ( res ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } }"
"Use $conn$ to execute the SQL statement ( query all id data in the flights table ) , use for loop traversal to query the results and print, set assertions to determine that the length of the returned result is greater than 0.","public void main ( JdbcTemplate conn ) { List < Map < String , Object > > flights = conn . queryForList ( "" select id from flights "" ) ; for ( Object flight : flights ) { System . out . println ( flight ) ; } assert flights . size ( ) > 0 ; }"
Try to use $conn$ to execute SQL ( query all ids in the localtable where the id of parent is $parent_id$ ) and return all results.,"public Object testReflectAltOwnerSynonyms ( JdbcTemplate conn , Integer parent_id ) { Object texts = conn . query ( "" select id from localtable where parent_id = ? "" , new Integer [ ] { parent_id } , new BeanPropertyRowMapper ( List . class ) ) ; return texts ; }"
"Print $intcol$, execute SQL with $conn$ ( get the numericcol column in t1 where intcol is $intcol$ ) , get all the data and return.","public Object testNumerics ( JdbcTemplate conn , Object intcol ) { System . out . println ( intcol ) ; String sql = "" select numericcol from t1 where intcol = ? "" ; Object results = conn . query ( sql , new Object [ ] { intcol } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
Set SQL: ( query the id information in the item_info table where name is $keywords$ ) . Execute the SQL using $session$ and get all the data. Close $session$ and return each item in the query result as map.,"public Object getKeywords ( JdbcTemplate session , Object keywords ) { List < Object > rs = session . query ( "" select id from item_info where name = ? "" , new Object [ ] { keywords } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > results = new ArrayList < Object > ( ) ; for ( Object result : rs ) { results . add ( new HashMap ( ) { { put ( "" id "" , result ) ; } } ) ; } return results ; }"
"Use $connect_str$ to get the database engine, where the echo parameter is False. Bind the database engine. Set SQL statement: ( Query names data in tables through $schema$ ) , execute SQL to get all the data. Convert each item of the query results into map and store it as list and return it.","public Object getAllTableNames ( DataSource connect_str , Object schema ) { JdbcTemplate engine = new JdbcTemplate ( connect_str ) ; List < Object > rs = engine . query ( "" select names from tables where schema = ? "" , new Object [ ] { schema } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > results = new ArrayList < Object > ( ) ; for ( Object result : rs ) { results . add ( new HashMap ( ) { { put ( "" name "" , result ) ; } } ) ; } return results ; }"
"Create the database engine from $proxy$ and set the echo parameter to False. Create a connection using the engine. Set the SQL ( queries for the hostname in the Table where IP is $ip$, id is $id$, and location is $location$ ) . Try Out SQL with $conn$ and get the first data and return the query results. If an exception occurs, the information for the specific exception is printed.","public Object main ( DataSource proxy , Object ip , Object id , Object location ) { JdbcTemplate engine = new JdbcTemplate ( proxy ) ; try { List < Object > result = engine . query ( "" select hostname from Table where ip = ? and id = ? and location = ? "" , new Object [ ] { ip , id , location } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }"
"Connect to the database via $engine$, try to execute the SQL ( get all the columns in the database based on $name$ ) , get all the data and then return the query result.If an exception occurs during the execution, print the exception print and finally make sure the connection is closed.","public Object initialize ( DataSource engine , String name ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; Object res = null ; try { res = connection . query ( "" select * from database where name = ? "" , new String [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; } catch ( Exception ex ) { System . err . println ( ex ) ; } return res ; }"
"If the request module sends the request in a POST method, try to use the $conn$ connection to execute the SQL statement ( get the first user_name in the Reviews table based on $user$ and $isbn$ ) , render and return ""bookinfo.html"", where the review parameter is the obtained data. If an exception occurs, return False.","public Object bookInfo ( HttpRequest request , Model model , JdbcTemplate conn , Object user , Object isbn ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { Object information = conn . query ( "" select user_name from Reviews where user_name = ? and isbn = ? "" , new Object [ ] { user , isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" username "" , information ) ; } catch ( Exception e ) { return false ; } } return "" bookinfo.html "" ; }"
"Use $conn$ to execute SQL ( query the nlast column in the stock_fund_holdings table based on $code$ and $date$ ) , get all the data, and use $conn$ to submit it. And output the query results.","public void fetchFundHoldings ( JdbcTemplate conn , Object code , Object date ) { Object cur = conn . query ( "" select nlast from stock_fund_holdings where code = ?, date = ? "" , new Object [ ] { code , date } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( cur ) ; }"
"Set SQL ( query the status column in 'orders' table based on the $customerid$ which is converted to a string ) , use $conn$ to execute the SQL and get all the query results, and return the results of the execution statement.","public Object setOrderStatusPaid ( JdbcTemplate conn , Integer customerid ) { String query = "" select status from orders where customerid = ? "" ; Object stauts = conn . query ( query , new Integer [ ] { customerid } , new BeanPropertyRowMapper ( List . class ) ) ; return stauts ; }"
"Execute the SQL ( get the customerid column in the customers table processed by the count method where the name of user is $username$ ) with $conn$, get all the data, then use the for loop to convert each item of the query result to a list type, and finally return the list content.","public Object getNumberUsersWithUsername ( JdbcTemplate conn , Object username ) { Object inforauto = conn . query ( "" select count(customerid) from customers where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return inforauto ; }"
"Use $engine$ to connect the database and execute SQL ( get the UID column in the USER_LIST table whose LID is $lid$ ) , get all the data, close the connection, and finally return the query result.","public Object getUserid ( DataSource engine , Integer lid ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; Object uids = connection . query ( "" select UID from USER_LIST where LID = ? "" , new Integer [ ] { lid } , new BeanPropertyRowMapper ( List . class ) ) ; return uids ; }"
"Set the SQL ( query all autoload in $devices$ where metadata is $metadata$ ) , execute the SQL using the $connection$ and fetch the data.","public Object opendb ( JdbcTemplate connection , Object metadata ) { String sql = "" select autoload from devices where metadata = ? "" ; Object inforauto = connection . query ( sql , new Object [ ] { metadata } , new BeanPropertyRowMapper ( List . class ) ) ; return inforauto ; }"
"If the request module sends the request as GET, render and return ""register.html"". Otherwise execute the SQL ( query all columns in users where the state of login is $login_state$ ) over the $conn$ connection and get the first data, return the obtained data.","public Object register ( HttpRequest request , Model model , JdbcTemplate conn , Object login_state ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { return "" register.html "" ; } else { Object information = conn . query ( "" select * from users where login_state = ? "" , new Object [ ] { login_state } , new BeanPropertyRowMapper ( List . class ) ) ; return information ; } }"
"Execute SQL with $db$ ( query all columns in the usuarios table according to $id_user$ ) , get the first row of data, return the rendered ""main.html"", and set the parameter name to the 0th element of the query result.","public String login ( JdbcTemplate db , Integer id_user , Model model ) { List < Object > users = db . query ( "" select * from usuarios where id_user = ? "" , new Integer [ ] { id_user } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" name "" , users . get ( 0 ) ) ; return "" main.html "" ; }"
Use $testing$ to get the database connection. Use the connection to execute SQL ( query all columns in the query_users table ) and get all the data. Close the connection and return the query results.,"public Object testClose2 ( DataSource testing ) { JdbcTemplate connection = new JdbcTemplate ( testing ) ; List < Object > users_value = Collections . singletonList ( connection . queryForList ( "" select * from query_users "" ) ) ; return users_value ; }"
"connect the database according to $engine$. Execute SQL ( query the drinker column in the Transactions table according to $transactionID$ ) , get all the query results, convert each item of the query result to map, store it as list, and return.","public List < Object > queryPage ( DataSource engine , Integer transactionID ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List < Object > rs = connection . query ( "" select drinker from Transactions where transactionID = ? "" , new Integer [ ] { transactionID } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > results = new ArrayList < Object > ( ) ; for ( Object row : rs ) { results . add ( new HashMap ( ) { { put ( "" name "" , row ) ; } } ) ; } return results ; }"
"Execute SQL through $conn$ ( query all columns in secrets table based on $id$ ) and get all data. Use for loop iterate the query results, convert the 0th element of each item in the query results to a string and store it in list. Return all the query results.","public Object test ( JdbcTemplate conn , Integer id ) { List < List > results = conn . query ( "" select * from secrets where id = ? "" , new Integer [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > secret_list = new ArrayList < Object > ( ) ; for ( List item : results ) { secret_list . add ( item . get ( 0 ) . toString ( ) ) ; } return results ; }"
"Execute SQL with $conn$ ( query the isbn and author columns in the books table according to $title$ ) and return the rendered ""error.html"" page if the rowcount field of the execution result is 0. Get all the results of the execution statement and return the rendered ""results.html"" page, where the parameter books is the obtained data.","public String search ( Model model , JdbcTemplate conn , Object title ) { List < Object > rows = conn . query ( "" select isbn, author from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows == null ) { return "" error.html "" ; } else { model . addAttribute ( "" books "" , rows ) ; return "" results.html "" ; } }"
Use $conn$ to execute SQL ( query the number of all columns in the collisions table ) and get all the query results. Use for loop to convert each query result into a string and connect it with 'join'. Return the obtained concatenate string.,"public List < Object > viewdb ( JdbcTemplate conn ) { List < Object > rows = Collections . singletonList ( conn . queryForList ( "" select count(*) from collisions "" ) ) ; return rows ; }"
Execute the SQL statement ( query all columns in the stock where id is $id$ ) using $conn$ and get all the data. Use the for loop to print the 0th element of each item in the query result.,"public List < Object > selectStock ( JdbcTemplate conn , Integer id ) { String sql = "" select * from stock where id = ? "" ; List < Object > results = conn . query ( sql , new Integer [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( int i = 0 ; i < results . size ( ) ; i ++ ) { System . out . println ( results . get ( i ) ) ; } return results ; }"
"Set the SQL ( query all user_id in $ic_user_session$ where session_hash is $session_hash$ ) , execute the SQL with $conn$ and return the acquired data.","public List queryPage ( JdbcTemplate conn , String session_hash ) { String s = "" select user_id from ic_user_session where session_hash = "" + session_hash ; List res = conn . query ( s , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use the $conn$ connection to execute SQL ( query all columns in the pay_newitem table through $barcode$ ) and get all the data, use "" to connect the query results and return.","public List < Object > messageProcessor ( JdbcTemplate conn , String barcode ) { String sql = "" select * from pay_newitem where barcode = ? "" ; List < Object > result = conn . query ( sql , new String [ ] { barcode } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }"
"If the request method of quest is POST, use $conn$ to execute SQL ( query all columns in the register_users table when id equals $newID$ ) and get all the data, return to the rendered ""register.html"" page, and pass the query result to the users parameter. Otherwise, return the rendered ""register.html"".","public String register ( HttpRequest request , Model model , JdbcTemplate conn , Integer id ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { String sql = "" select * from register_users where id = ? "" ; List < Object > users = conn . query ( sql , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" users "" , users ) ; return "" register.html "" ; } else { return "" register.html "" ; } }"
"Use $engine$ to get the database connection. Use the connection to execute SQL ( query all columns in the sometable table ) and get all the data. Finally, return the query results in json.","public JSONObject testInvalidate ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < Object > res = conn . query ( "" select * from sometable "" , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" user "" , res ) ; } } ) ; return json ; }"
"Get the database engine and make the connection via $host$, execute the SQL statement ( query all the weight_col in the TABLE where arm_col is $arm_col$ ) and get all the data. Return the result of the query in json.","public JSONObject selectValue ( DataSource host , String armcol ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; List < Object > res = conn . query ( "" select weight_col from where arm_col = ? "" , new Object [ ] { armcol } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" user "" , res ) ; } } ) ; return json ; }"
"Get the database engine through $url$. Execute the SQL statement ( query the glass column in the DATABASE table according to $db_name$ ) , get all the data, and use for loop to convert each query result to map, store it in list and return.","public List getSqlalchemyEngine ( DataSource url , String dbname ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; List < Object > query = conn . query ( "" select glass from database where db_name = ? "" , new Object [ ] { dbname } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > glasses = new ArrayList < > ( ) ; for ( Object r : query ) { glasses . add ( new HashMap ( ) { { put ( "" glass "" , r ) ; } } ) ; } return glasses ; }"
"Set the SQL statement ( get all columns in the youtube_video table based on $data$ ) , use $conn$ connection to execute SQL and get all the data. Render and return 'index.html', where the cpl parameter is all the query results.","public String getData ( Model model , JdbcTemplate conn , String data ) { String register_sql = "" select * from youtube_video where data = ? "" ; List < Object > alldata = conn . query ( register_sql , new Object [ ] { data } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" cpl "" , alldata ) ; return "" index.html "" ; }"
"Try to connect to the database using $connection$, executSQL SQL ( query all names in the student table where score is $score$ ) , and get and print all query results. If a BaseException exception occurs during execution, the Error message 'Connection Error!'.","public void getScoreIn ( JdbcTemplate connection , String score ) { try { List < Object > res = connection . query ( "" select name from student where score = ? "" , new Object [ ] { score } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; } catch ( Exception e ) { System . out . println ( "" Connection Error! "" ) ; } }"
"Use $DBUSER$ to create the database engine. Try to use the engine to execute SQL ( query all the columns in the $fluffi_gm$ table based on $stmt$ ) , get all the data, and return the query results. If an exception occurs, print the specific exception information.","public List < Object > getResult ( DataSource DBUSER , String stmt ) { try { JdbcTemplate engine = new JdbcTemplate ( DBUSER ) ; List < Object > res = engine . query ( "" select * from fluffi_gm where stmt = ? "" , new Object [ ] { stmt } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }"
"Use $conn$ to execute SQL ( query the typname column in the pg_catalog table based on $sqlite$ ) , get the first row of data, and return the query results in json.","public JSONObject typeLookup ( JdbcTemplate conn , String sqlite ) { List < Object > res = conn . query ( "" select typname from pg_catalog where sqlite = ? "" , new Object [ ] { sqlite } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" typname "" , res . get ( 0 ) ) ; } } ) ; return json ; }"
Set the SQL ( Query all columns in CourseData where Name is $name$ ) . Execute SQL with $conn$ and get all the data. Use A for loop to convert the result to a list and return.,"public List getAllCourseData ( JdbcTemplate conn , String name ) { List < Object > query = conn . query ( "" select * from CourseData where Name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > queries = new ArrayList < > ( ) ; for ( Object r : query ) { queries . add ( new HashMap ( ) { { put ( "" allcoursedata "" , r ) ; } } ) ; } return queries ; }"
"Try to set SQL statement: ( Query all columns in habiencia table according to $year$ ) , execute SQL to get all the data and return. If an Exception occurs, print the exception message.","public List < Object > derechohabientesByYear ( JdbcTemplate conn , String year ) { try { List < Object > res = conn . query ( "" select * from habiencia where year = ? "" , new Object [ ] { year } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }"
"Use $db$ to execute SQL ( get all the columns in the users_autoinc table where user_name is $name$ ) , get all the data, and use for loop to convert each item of the query result to a mapionary type and return.","public JSONArray searchAutonic ( JdbcTemplate db , String name ) { String sql = "" select * from users_autoinc where user_name = ? "" ; List < Object > res = db . query ( sql , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : res ) { result . add ( new HashMap ( ) { { put ( "" autonic "" , r ) ; } } ) ; } return new JSONArray ( result ) ; }"
"Try to use $conn$ to execute the SQL ( get all the columns in the flights where id is $id$ ) and get all the data, then return the query results, return the rendered 'error.html' if a ValueError occurs while executing.","public String book ( Model model , JdbcTemplate conn , Integer id ) { try { String register_sql = "" select * from flights where id = ? "" ; List < Object > res = conn . query ( register_sql , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , res ) ; return "" res.html "" ; } catch ( Error e ) { return "" error.html "" ; } }"
"Execute SQL via $conn$ ( get all columns in the books table via $isbn$ ) and get all the data. If the obtained data does not exist, return Null; otherwise return all query results in json.","public JSONObject api ( JdbcTemplate conn , String isbn ) { List < Object > res = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; if ( res == null ) { return null ; } else { json = new JSONObject ( new HashMap ( ) { { put ( "" res "" , res ) ; } } ) ; } return json ; }"
"Use the $conn$ connection to execute the SQL statement ( query all the col_string in the one_row_complex table where param is $param$ ) , set the assertion to determine that the length of the query result is greater than 0, and return all the query results in json.","public JSONObject testContain ( JdbcTemplate conn , String param ) { List < Object > res = conn . query ( "" select col_string from one_row_complex where param = ? "" , new Object [ ] { param } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) > 0 ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" res "" , res ) ; } } ) ; return json ; }"
"Use $engine$ to execute SQL ( get all the columns in the users table based on $brand$ ) , get all the data and return the query result.","public List testSqlA ( DataSource engine , String brand ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List < Object > query = connection . query ( "" select * from users where brand = ? "" , new Object [ ] { brand } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > users = new ArrayList < > ( ) ; for ( Object r : query ) { users . add ( new HashMap ( ) { { put ( "" user "" , r ) ; } } ) ; } return users ; }"
"Execute the SQL statement through $conn$ ( query all id in the pg_extension table whose extname is $extension$ ) . Set the assertion to determine the length of the query result is greater than 0, and return the query result in json.","public JSONObject testContain ( JdbcTemplate conn , String extension ) { List < Object > res = conn . query ( "" select id from pg_extension where extname = ? "" , new Object [ ] { extension } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) > 0 ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" res "" , res ) ; } } ) ; return json ; }"
"Set the SQL statement as follows: ( Query the id column in flight table whose name is $flightname$ ) , use the $conn$ connection to execute SQL, get all the data, convert each item of the execution result to map, store it as list, and return.","public List selectValue ( JdbcTemplate conn , String flightname ) { List < Object > query = conn . query ( "" select id from flight where name = ? "" , new Object [ ] { flightname } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > ids = new ArrayList < > ( ) ; for ( Object r : query ) { ids . add ( new HashMap ( ) { { put ( "" id "" , r ) ; } } ) ; } return ids ; }"
Set the SQL statement: ( query the tablename data in pg_tables where the name of schema is $schemaname$ ) . Execute the SQL statement and return all query results using the $conn$ connection.,"public JSONObject getListOfTablesInDatabase ( JdbcTemplate conn , String schemaname ) { List < Object > res = conn . query ( "" select tablename from pg_tables where schemaname = ? "" , new Object [ ] { schemaname } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" table "" , res ) ; } } ) ; return json ; }"
"Execute the SQL ( query all the columns in the books where the ISBN is $book_isbn$ ) using $db$ and get the first data. Print query results. Return the rendered ""book.html"" and passe the query result to the result parameter.","public String book ( Model model , JdbcTemplate db , String book_isbn ) { String sql = "" select * from books where isbn = ? "" ; List < Object > result = db . query ( sql , new Object [ ] { book_isbn } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result . get ( 0 ) ) ; model . addAttribute ( "" result "" , result ) ; return "" book.html "" ; }"
"If the request module sends the request as post, set the SQL ( query all columns in the reviews through $book_id$ and $user_name$ ) . Use the $conn$ connection to execute the SQL to get all the data and return it.","public List getBarCounts ( HttpRequest request , JdbcTemplate conn , String book_id , String user_name ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { String sql = "" select * from reviews where book_id = ? and user_name = ? "" ; List < Object > info = conn . query ( sql , new Object [ ] { book_id , user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return info ; } return null ; }"
"Try to use $testing$ to get a connection. Use the connection to execute SQL ( query user_id in the users table based on $user_name$ ) , get the first data and return the query results.","public JSONObject example ( DataSource testing , String user_name ) { JdbcTemplate connection = new JdbcTemplate ( testing ) ; String sql = "" select user_id from users where user_name = ? "" ; List < Object > res = connection . query ( sql , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" user_id "" , res . get ( 0 ) ) ; } } ) ; return json ; }"
"Execute the SQL statement via $conn$: ( Query all the columns in the drug table and get all the data ) . Each item of the query result is converted to map, stored as 'list', and returned in json.","public JSONArray drugData ( JdbcTemplate conn ) { String sql = "" select * from drug "" ; List < Object > res = conn . query ( sql , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : res ) { result . add ( new HashMap ( ) { { put ( "" Drugs "" , r ) ; } } ) ; } return new JSONArray ( result ) ; }"
"Set up the SQL ( get the right_answer column in the learning table based on $user_id$ ) , then try to execute the SQL statement with $conn$, get all the data and return the query result. If exception occurs during execution, return null.","public List < Object > getRightAnswer ( JdbcTemplate conn , String user_id ) { try { List < Object > res = conn . query ( "" select right_answer from learning where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return null ; } }"
"Get database engine by $conn_info$, execute SQL statement ( get all columns in db_session based on $tb_compras$ ) and get all the data. Finally return the obtained data.","public List dbConn ( DataSource conn_info , String tb_compras ) { JdbcTemplate connection = new JdbcTemplate ( conn_info ) ; String sql = "" select * from db_session where tb_compras = ? "" ; List < Object > res = connection . query ( sql , new Object [ ] { tb_compras } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"create a connection based on $engine$, execute SQL ( query the amount of data in the frequents table based on $bar$ ) and get the first piece of data, and finally return the query result in json.","public JSONObject getBarFrequentCounts ( DataSource engine , String bar ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List < Object > res = con . query ( "" select count(*) from frequents where bar = ? "" , new Object [ ] { bar } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" counts "" , res . get ( 0 ) ) ; } } ) ; return json ; }"
"Use $db$ to connect the database, execute SQL ( get all the columns in the dialect table when the statement_compiler is $statement$ ) and get the first data. Finally return the query result in json.","public JSONObject testNoParamsOption ( DataSource db , String statement ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; String sql = "" select * from dialect where statement_compiler = ? "" ; List < Object > res = conn . query ( sql , new Object [ ] { statement } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" statement "" , res . get ( 0 ) ) ; } } ) ; return json ; }"
Use $conn$ to execute SQL ( get all columns in the sales table with city as $location$ and saleyear as $date$ ) and get all the data. Then use for loop to store each item of the query results as list and finally process the list content in json and return it.,"public JSONArray dataPullSales ( JdbcTemplate conn , String location , Date date ) { String sql = "" select * from sales where city = ? and saleyear = ? "" ; List < Object > res = conn . query ( sql , new Object [ ] { location , date } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : res ) { result . add ( new HashMap ( ) { { put ( "" sales "" , r ) ; } } ) ; } return new JSONArray ( result ) ; }"
"Execute the SQL using $db$ ( fetch the name column in the results where year is $year$ ) and get all the data, then print each item of the query result using the for loop, and return the query result.","public List selectRecords ( JdbcTemplate db , String year ) { List < Object > clause = db . query ( "" select name from results where year = ? "" , new Object [ ] { year } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : clause ) { System . out . println ( r . toString ( ) ) ; } return clause ; }"
"Set SQL: ( query comment in the reviews where the user_id is $uid$ ) . Execute the SQL using $db$ and get all the data. Return null if the query result length is equal to 0, otherwise, return the query result in json.","public JSONObject getReviewsComment ( JdbcTemplate db , String uid ) { List < Object > comments = db . query ( "" select comment from reviews where user_id = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; if ( comments . size ( ) == 0 ) { return null ; } else { json = new JSONObject ( new HashMap ( ) { { put ( "" comments "" , comments ) ; } } ) ; } return json ; }"
"Connect to the database via $e$, execute the SQL ( query all columns in the RInd table ) to get all the data and return all the obtained data.","public List < Object > get ( DataSource e ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List < Object > res = conn . query ( "" select * from RInd "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Use $conn$ to execute SQL ( query all the columns in the 'Table' table based on $rowid$ ) , get all the data, use for loop to convert each item of the query result to map, store it in list and return.","public List testRowid ( JdbcTemplate conn , String rowid ) { List < Object > sq = conn . query ( "" select * from Table where rowid = ? "" , new Object [ ] { rowid } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : sq ) { result . add ( new HashMap ( ) { { put ( "" res "" , r ) ; } } ) ; } return result ; }"
"Connect to the database using $db_connect$, and execute the SQL statement using $conn$ ( get all trackids in the tracks ) .Then use for loop to store each item of the query results as list and finally process the list content in json and return it.","public JSONArray search ( DataSource db_connect ) { JdbcTemplate connection = new JdbcTemplate ( db_connect ) ; String sql = "" select trackid from tracks "" ; List < Object > query = connection . query ( sql , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : query ) { result . add ( new HashMap ( ) { { put ( "" data "" , r ) ; } } ) ; } return new JSONArray ( result ) ; }"
Connect to the database using $db$. Execute the SQL statement: ( Query the number of all columns in the tv table ) . Use for loop to print the obtained data.,"public void search ( JdbcTemplate db ) { List < Object > clause = db . query ( "" select count(*) from tv "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : clause ) { System . out . println ( r . toString ( ) ) ; } }"
"Try to execute the SQL using $conn$ ( query the first piece of task in the horse table based on $tid$ ) . Print and return all query results. If Exception occurs, print the exception message.","public List < Object > structure ( JdbcTemplate conn , String tid ) { try { List < Object > taskrs = conn . query ( "" select task from horse where tid = ? "" , new Object [ ] { tid } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( taskrs ) ; return taskrs ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }"
Connect to the database via $dbraw_engine$. Try to execute the SQL statement ( get all columns in the world table based on $ID$ ) to get the first piece of data and return.,"public List < Object > rawUpdates ( DataSource dbraw_engine , String ID ) { JdbcTemplate connection = new JdbcTemplate ( dbraw_engine ) ; List < Object > world = connection . query ( "" select * from world w ID = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; return ( List < Object > ) world . get ( 0 ) ; }"
"Use $conn$ to execute SQL ( query all columns in the flights table based on $wallets$ ) , get all the data, and output the obtained data.","public void main ( JdbcTemplate conn , String wallets ) { List < Object > flights = conn . query ( "" select * from flights where wallets = ? "" , new Object [ ] { wallets } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : flights ) { System . out . println ( r . toString ( ) ) ; } }"
"Use $conn$ to execute SQL ( get all columns in the reviews table with isbn as $isbn$ and userid as $id$ ) and get all the data. Finally, return the query result.","public List review ( JdbcTemplate conn , String isbn , Integer id ) { List < Object > item = conn . query ( "" select * from reviews where isbn = ? and userid = ? "" , new Object [ ] { isbn , id } , new BeanPropertyRowMapper ( List . class ) ) ; return item ; }"
"Set the SQL statement and the content is as follows: ( Query the ar_role data in the gsys_admin_role based on $ip$ ) , and use $conn$ to execute SQL to get all the data. Use for loop traversal to execute and print the query results, and return them.","public List getHostname ( JdbcTemplate conn , String ip ) { List < Object > ress = conn . query ( "" select ar_role from gsys_admin_role where ip = ? "" , new Object [ ] { ip } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : ress ) { System . out . println ( r . toString ( ) ) ; } return ress ; }"
"Use $host$ to get the database connection and execute SQL ( get all the columns in the DATABASE based on $db_name$ ) , get all the data, and finally return the query result.","public List < Object > getSqlalchemyEngine ( DataSource host , String db_name ) { JdbcTemplate connection = new JdbcTemplate ( host ) ; List < Object > res = connection . query ( "" select * from DATABASE where db_name = ? "" , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }"
"Set SQL ( query the password column in the student table based on username $itemname$ ) , use $conn$ to execute SQL and get all the query results. Return the query result if the length of the query result is 1, else return null.","public List getWord ( JdbcTemplate conn , String itemname ) { List < Object > passwords = conn . query ( "" select password from student where username = ? "" , new Object [ ] { itemname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passwords . size ( ) == 1 ) { return passwords ; } return null ; }"
"Use $conn$ to execute SQL ( query the origin column in the flight table according to $id$ ) , get the first row of data, use for loop to traverse all the obtained query results, print and return the query results.","public List main ( JdbcTemplate conn , Integer id ) { List < Object > flights = conn . query ( "" select origin from flight where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > pokemons = new ArrayList < > ( ) ; for ( Object r : flights ) { System . out . println ( r . toString ( ) ) ; } return pokemons ; }"
"Use $db$ to execute SQL ( get the class column in the Classtabel table where user_name is $uname$ and user_id is $uid$ ) , get all the data, and finally return the query result.","public List getClass ( JdbcTemplate db , String uname , Integer uid ) { List < Object > classes = db . query ( "" select class from Classtabel where user_name = ? and user_id = ? "" , new Object [ ] { uname , uid } , new BeanPropertyRowMapper ( List . class ) ) ; return classes ; }"
"Try to set the SQL statement: ( Get the imgur_id in the item table through $local_thumbnail$ ) and use $conn$ to execute SQL to get all the data and print. If an Exception occurs, print the exception information.","public void upload ( JdbcTemplate conn , String local_thumbnail ) { try { List < Object > results = conn . query ( "" select imgur_id from item where local_thumbnail = ? "" , new Object [ ] { local_thumbnail } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; } }"
Use $conn$ to execute the SQL ( get the state column in the combined table based on $month_year$ ) and get all the data and return them.,"public List states ( JdbcTemplate conn , String month_year ) { List < Object > Combined = conn . query ( "" select state from combined where month_year = ? "" , new Object [ ] { month_year } , new BeanPropertyRowMapper ( List . class ) ) ; return Combined ; }"
Use $session$to execute SQL ( get auth_name column in the spatial_ref_sys table based on $srid$ ) and get all the data. Finally return the query results.,"public List setUp ( JdbcTemplate session , Integer srid ) { List < Object > results = session . query ( "" select auth_name from spatial_ref_sys where srid = ? "" , new Object [ ] { srid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }"
"Use $conn$ to execute SQL ( query the ID column in the database table based on $TITLE$ ) , get all the query results, use for loop to traverse each item of the query results, and print them.","public void blogIter ( JdbcTemplate conn , String TITLE ) { List < Object > results = conn . query ( "" select ID from database where TITLE = ? "" , new Object [ ] { TITLE } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : results ) { System . out . println ( r . toString ( ) ) ; } }"
"Use $conn$ to execute SQL ( get year column in books table based on $author$ ) and get all the data, then use for loop to print each item in the query result, and finally return the query result.","public List < Object > main ( JdbcTemplate conn , String author ) { List < Object > res = conn . query ( "" select year from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : res ) { System . out . println ( r . toString ( ) ) ; } return res ; }"
"Set up the SQL: ( Query the ime in the osebe table based on $priimek$, $starost$ and $kupil$ ) . Use $conn$ to execute the SQL and get all the data. Finally close the connection and return the query results.","public List suroviSql ( JdbcTemplate conn , String priimek , String starost , String kupil ) { List < Object > values = conn . query ( "" select ime from osebe where priimek = ? and starost = ? and kupil = ? "" , new Object [ ] { priimek , starost , kupil } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }"
"Connect to the database through $engine$ and execute the SQL statement: ( query All city statistics from the Accidents table ) . Convert each item of the query result to map, store as list and return.","public List cityData ( DataSource engine ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; String sql = "" select count(city) from Accidents "" ; List < Object > ResultProxy = connection . query ( sql , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : ResultProxy ) { result . add ( new HashMap ( ) { { put ( "" res "" , r ) ; } } ) ; } return result ; }"
"Execute the SQL using $conn$ ( get all the columns in the 'table_name' where id is $data$ ) and get the first piece of data, return true if the query result is not null, else return false.","public Boolean handleStandardTable ( JdbcTemplate conn , String data ) { List < Object > data_exists = conn . query ( "" select * from table_name where id = ? "" , new Object [ ] { data } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data_exists . get ( 0 ) != null ) { return true ; } else { return false ; } }"
"Print the $time$ and set sql ( query the name column in the tableName table according to $time$ ) , use $conn$ to execute the SQL and get all the query results, and return the query results.","public List selectChiaPetCluster ( JdbcTemplate conn , String time ) { System . out . println ( time ) ; List < Object > rows = conn . query ( "" select name from tableName where time = ? "" , new Object [ ] { time } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }"
"Execute the SQL statement through the $conn$ connection: ( Query the title in the books table based on $book_id$ ) . If the size of the query is greater than 0, render and return ""book.html""; otherwise render and return ""error.html"".","public String book ( JdbcTemplate conn , String book_id ) { String sql = "" select title from books where book_id = ? "" ; List < Object > titles = conn . query ( sql , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( titles . size ( ) > 0 ) { return "" book.html "" ; } else { return "" error.html "" ; } }"
"Set up the SQL ( get all the columns in the 'table' table based on $aid$ ) , then try to execute the SQL statement with $conn$ and get all the data. Then return the query results. If exception occurs during execution, print the exception.","public List < Object > blockingSelect ( JdbcTemplate conn , Integer aid ) { try { List < Object > results = conn . query ( "" select * from table where aid = ? "" , new Object [ ] { aid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }"
"Try to connect to the database through $engine$. Execute SQL statement ( query all columns in 'table' based on $column$ ) , get all data and return all query results. If Exception occurs, return null.","public List < Object > selectFromDB ( DataSource engine , String column ) { try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < Object > result = conn . query ( "" select * from table where column = ? "" , new Object [ ] { column } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return null ; } }"
"Use $conn$ to execute SQL ( query all columns in the BOOKS table according to $bneq$ ) , get all the query results, use for loop to traverse all the obtained query results, and print each piece of data.","public void main ( JdbcTemplate conn , String bneq ) { List < Object > ve = conn . query ( "" select * from BOOKS where bneq = ? "" , new Object [ ] { bneq } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : ve ) { System . out . println ( i ) ; } }"
"If request module sends the request in a post method, use $conn$ to execute the SQL statement: ( Get the id and password ) , in the users table according to $email$ and return the obtained data.","public List login ( HttpRequest request , JdbcTemplate conn , String email ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { String sql = "" select id, password from users where email = ? "" ; List < Object > user = conn . query ( sql , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return user ; } return null ; }"
"Set the SQL to: ( Get all the columns in the book through $isbn$ ) , use $conn$ connection to execute the SQL and get the first piece of data. Render and return ""bookDetails.html"", where the info parameter is the query result.","public String renderBook ( Model model , JdbcTemplate jdbcTemplate , String isbn ) { String query = "" select * from book where isbn = ? "" ; List < Object > info = jdbcTemplate . query ( query , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" info "" , info . get ( 0 ) ) ; return "" bookDetails.html "" ; }"
"Get the database engine and establish a connection through $test$. Execute the SQL statement ( query all the name data in the users table according to $id$ ) , close the database connection, and return all the query results.","public List getData ( DataSource test , String id ) { JdbcTemplate conn = new JdbcTemplate ( test ) ; List < Object > rs = conn . query ( "" select name from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }"
"If the request method is 'GET': Return the rendered 'search_recipe.html' page; otherwise, use $conn$ to execute SQL ( query all columns in the recipes table based on $time$ ) , get all the query results, return the rendered' search_recipe.html' page, and set the all_recipes parameter to the query result.","public String searchRecipe ( HttpRequest httpRequest , Model model , JdbcTemplate conn , String time ) { if ( httpRequest . getMethod ( ) . equals ( "" GET "" ) ) { return "" search_recipe.html "" ; } else { List < Object > all_recipes = conn . query ( "" select * from recipes where time = ? "" , new Object [ ] { time } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" all_recipes "" , all_recipes ) ; return "" search_recipe.html "" ; } }"
"If $frame_id$ is not empty, use $connection$ to execute SQL ( query the taozi column in the collection table based on $frame_id$ ) , get all the query results. Return the length of the query results.","public Integer collectionAddFramesViaQuery ( JdbcTemplate connection , String frame_id ) { if ( null != frame_id ) { List < Object > data = connection . query ( "" select taozi from collection where frame_id = ? "" , new Object [ ] { frame_id } , new BeanPropertyRowMapper ( List . class ) ) ; return data . size ( ) ; } else { return null ; } }"
"Try to use $conn$ to execute SQL ( query all columns in books_table based on $isbn$ ) and get the first piece of data, return the rendered 'book.html' and pass the query results to the vals parameter. If an exception occurs, return the rendered 'book.html'and pass False to the vals parameter.","public String bookSql ( Model model , JdbcTemplate conn , String isbn ) { try { List < Object > vals = conn . query ( "" select * from books_table where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" vals "" , vals ) ; return "" book.html "" ; } catch ( Exception e ) { model . addAttribute ( "" vals "" , "" False "" ) ; return "" book.html "" ; } }"
"Use $conn$ to execute SQL ( query all columns in the users table based on $username$ ) . If the query result length is not equal to 0, return the json version of ""false""; otherwise, return the json version of ""true"".","public JSONObject check ( JdbcTemplate conn , String username ) { List < Object > rows = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; if ( rows . size ( ) != 0 ) { json . put ( "" true "" , "" true "" ) ; return json ; } else { json . put ( "" false "" , "" false "" ) ; } return json ; }"
"Execute SQL with $conn$ ( query all columns in the pg_database table according to $pg_catalog$ ) , get the first row of data, use for loop to traverse all the obtained query results, insert the 0th element of each piece of data into a list, and return the list.","public List dbNamesGet ( JdbcTemplate conn , String catalog ) { List < List > r = conn . query ( "" select * from pg_database where pg_catalg = ? "" , new Object [ ] { catalog } , new BeanPropertyRowMapper ( List . class ) ) ; List r2 = null ; for ( List i : r ) { r2 . add ( i . get ( 0 ) ) ; } return r2 ; }"
"Get the database engine and establish a connection through $engine$. Set the SQL statement ( query all the columns in the Vendeur table according to $email$ and $mdp$ ) , execute sql and get all the data. Return -1 if the length of the query data is not 1; otherwise, return the 0th element of the oth query result.","public Object verifLoginBd ( DataSource engine , String email , String mdp ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; String qry = "" select * from Vendeur where email = ? and mdp = ? "" ; List < List > data = connection . query ( qry , new Object [ ] { email , mdp } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data . size ( ) != 1 ) { return - 1 ; } else { return data . get ( 0 ) . get ( 0 ) ; } }"
"Set up SQL statement: ( Get the information of 'a' in foo according to $b$ ) , use $conn$ to execute SQL to get all information, store each item of query result as list and return.","public List testColumnCollectionOrdered ( JdbcTemplate conn , String b ) { String foo_sql = "" select a from foo where b = ? "" ; List < Object > foos = conn . query ( foo_sql , new Object [ ] { b } , new BeanPropertyRowMapper ( List . class ) ) ; return foos ; }"
Use $conn$ to execute SQL ( query all columns in the eis_user table based on $USERNAME$ ) and get all the data. Print the 0th element in the query result.,"public void selectUser ( JdbcTemplate conn , String USERNAME ) { List < List > rows1 = conn . query ( "" select * from eis_user where username = ? "" , new Object [ ] { USERNAME } , new BeanPropertyRowMapper ( List . class ) ) ; for ( List row_0 : rows1 ) { System . out . println ( row_0 . get ( 0 ) . toString ( ) ) ; } }"
"Use $conn$ to execute the SQL statement: ( Query all columns from the flights table and get all the data ) . Render and return ""flights.html"", where the title parameter is ""Flights"" and the flights parameter is the query result.","public String flights ( JdbcTemplate conn , Model model ) { List < Object > flights = conn . query ( "" select * from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" title "" , "" Flights "" ) ; model . addAttribute ( "" flights "" , flights ) ; return "" flights.html "" ; }"
"Set up SQL ( query the oid column in the pg_class table based on $relname$ ) , execute SQL with $conn$ and get all the query results. Use for loop to iterate through all obtained the query results, insert the 0th element of each piece of data into a list, and return the list.","public List selectValue ( JdbcTemplate conn , String relname ) { String query_sql = "" select oid from pg_class where relname = ? "" ; List < List > oids = conn . query ( query_sql , new Object [ ] { relname } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > rs = null ; for ( List o : oids ) { rs . add ( o . get ( 0 ) ) ; } return rs ; }"
"connect the database according to the begin method of $engine$. Execute SQL ( query all columns in the 'table' table based on $games$ ) , get the first piece of data, and return the query result.","public Object getTupleCount ( JdbcTemplate engine , String games ) { List < Object > cd = engine . query ( "" select * from table where games = ? "" , new Object [ ] { games } , new BeanPropertyRowMapper ( List . class ) ) ; return cd . get ( 0 ) ; }"
"If $user_id$ is empty, return the command redirected to ""/ login""; otherwise, use $conn$ to execute SQL ( query all columns in the reviews table based on $user_id$ ) , get all the query results, and return the rendered ""myreviews.html"" page, where the parameter reviews is set to the query result.","public String myreviews ( Model model , JdbcTemplate conn , String user_id ) { if ( null == user_id ) { return "" /login "" ; } else { List < Object > reviews = conn . query ( "" select * from reviews where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" reviews "" , reviews ) ; return "" myreviews.html "" ; } }"
"Use $conn$ to execute SQL ( query all columns in the flights table based on $duration$ and $destination$ ) and get all the results. For each piece of data queried, each element is printed in a for loop, represented as from the origin attribute of the query result to the destination attribute.","public void queryFlights ( JdbcTemplate conn , String duration , String destination ) { List < Map > flights = conn . query ( "" select * from flights where duration = ? and destination = ? "" , new Object [ ] { duration , destination } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Map flight : flights ) { System . out . println ( flight . get ( "" origin "" ) + "" to "" + flight . get ( "" destination "" ) ) ; } }"
"Try to set up SQL ( query all columns in the users table where email is $email$ ) , execute SQL with $conn$, get all the results and return True. Return False if an exception occurs.","public Boolean userExists ( JdbcTemplate conn , String email ) { try { String users_sql = "" select * from users where email = ? "" ; List < Object > users = conn . query ( users_sql , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return Boolean . TRUE ; } catch ( Exception e ) { return Boolean . FALSE ; } }"
"Execute the SQL ( get all the columns in the epi table where model_version_id is $mvid$ ) with $conn$, get all the data, and return the query results.","public List getModelVersion ( JdbcTemplate conn , String mvid ) { String query = "" select * from epi where model_version_id = ? "" ; List < Object > df = conn . query ( query , new Object [ ] { mvid } , new BeanPropertyRowMapper ( List . class ) ) ; return df ; }"
